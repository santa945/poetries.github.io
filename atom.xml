<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Poetry&#39;s Blog</title>
  
  <subtitle>Choose a gesture to allow yourself to live irreplaceable.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.poetries.top/"/>
  <updated>2020-07-24T04:13:35.061Z</updated>
  <id>http://blog.poetries.top/</id>
  
  <author>
    <name>Poetry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信h5网页跳转小程序方案</title>
    <link href="http://blog.poetries.top/2020/07/24/weapp-h5-jump/"/>
    <id>http://blog.poetries.top/2020/07/24/weapp-h5-jump/</id>
    <published>2020-07-24T04:01:24.000Z</published>
    <updated>2020-07-24T04:13:35.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接入要求"><a href="#接入要求" class="headerlink" title="接入要求"></a>接入要求</h2><ul><li>主体要求: 仅开放给已认证的服务号</li><li>系统要求：微信版本要求为：<code>7.0.12</code>及以上。系统版本要求为：<code>iOS 10.3</code>及以上、<code>Android 5.0</code>及以上</li></ul><h2 id="接入微信JS-SDK"><a href="#接入微信JS-SDK" class="headerlink" title="接入微信JS-SDK"></a>接入微信JS-SDK</h2><p><strong>包使用方式</strong></p><h2 id="接入要求-1"><a href="#接入要求-1" class="headerlink" title="接入要求"></a>接入要求</h2><ul><li>主体要求: 仅开放给已认证的服务号</li><li>系统要求：微信版本要求为：<code>7.0.12</code>及以上。系统版本要求为：<code>iOS 10.3</code>及以上、<code>Android 5.0</code>及以上</li></ul><h2 id="接入微信JS-SDK-1"><a href="#接入微信JS-SDK-1" class="headerlink" title="接入微信JS-SDK"></a>接入微信JS-SDK</h2><p><strong>包使用方式</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"weixin-js-sdk"</span>: <span class="string">"^1.6.0"</span></span><br></pre></td></tr></table></figure><p><strong>直接在页面上使用</strong></p><blockquote><p>在需要调用JS接口的页面引入如下JS文件：<code>http://res.wx.qq.com/open/js/jweixin-1.6.0.js</code> （支持<code>https</code>）</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">  appId: <span class="string">''</span>,</span><br><span class="line">  debug: <span class="literal">true</span>,</span><br><span class="line">  timestamp: <span class="string">''</span>,</span><br><span class="line">  nonceStr: <span class="string">''</span>,</span><br><span class="line">  signature: <span class="string">''</span>,</span><br><span class="line">  jsApiList: [],</span><br><span class="line">  openTagList: [<span class="string">'wx-open-launch-app'</span>,<span class="string">'wx-open-launch-weapp'</span>] <span class="comment">// 获取开放标签权限</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>需要注意的点</strong></p><ul><li><code>wx.config</code> 内列出使用到的 <code>openTagList</code></li><li>符合开放平台列出的要求 <code>https://developers.weixin.qq.com/doc/oplatform/Mobile_App/WeChat_H5_Launch_APP.html</code></li><li>app 需要根据接入微信 sdk <code>https://developers.weixin.qq.com/doc/oplatform/Mobile_App/Access_Guide/iOS.html</code></li></ul><blockquote><p>在微信开发者工具内打开你的网页测试如果显示</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">errMsg</span>: <span class="string">"config:ok”&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>说明你已经接入JS-SDK成功了</p></blockquote><h2 id="在vue中使用例子"><a href="#在vue中使用例子" class="headerlink" title="在vue中使用例子"></a>在vue中使用例子</h2><h2 id="第1步-在main-js中设置"><a href="#第1步-在main-js中设置" class="headerlink" title="第1步 在main.js中设置"></a>第1步 在main.js中设置</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 忽略微信自定义标签</span></span><br><span class="line">Vue.config.ignoredElements = [<span class="string">'wx-open-launch-weapp'</span>,<span class="string">'wx-open-launch-app'</span>]</span><br></pre></td></tr></table></figure><h2 id="第2步-获取微信版本"><a href="#第2步-获取微信版本" class="headerlink" title="第2步 获取微信版本"></a>第2步 获取微信版本</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取微信版本</span></span><br><span class="line"><span class="comment">// return eg. 7.0.16.1600</span></span><br><span class="line">getWeixinVersion() &#123;</span><br><span class="line">  <span class="keyword">return</span> navigator.userAgent.match(<span class="regexp">/MicroMessenger\/([\d\.]+)/i</span>)[<span class="number">1</span>]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">created()&#123;</span><br><span class="line">  <span class="comment">// 微信版本号大于 7.0.12 开放标签才可进行</span></span><br><span class="line">  <span class="keyword">const</span> wxVersion = <span class="keyword">this</span>.isWechat() &amp;&amp; <span class="keyword">this</span>.getWeixinVersion() || <span class="string">''</span></span><br><span class="line">  <span class="keyword">if</span>(wxVersion)&#123;</span><br><span class="line">    <span class="keyword">let</span> v = wxVersion.split(<span class="string">'.'</span>)</span><br><span class="line">    <span class="keyword">if</span>(v[<span class="number">0</span>]&gt;=<span class="number">7</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(v[<span class="number">1</span>]&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[<span class="number">2</span>]&gt;=<span class="number">12</span>)&#123;</span><br><span class="line">          <span class="keyword">this</span>.enableLaunchWeapp = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="第3步-在页面上展示"><a href="#第3步-在页面上展示" class="headerlink" title="第3步 在页面上展示"></a>第3步 在页面上展示</h2><blockquote><p>如果微信版本低于7.0.12 开放标签是无法使用的，需要降级处理</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"enableLaunchWeapp"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">wx-open-launch-weapp</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"launch-btn"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">username</span>=<span class="string">"gh_ed1212c48129d7fa3d"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">path</span>=<span class="string">"/pages/home/index.html"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/wxtag-template"</span>&gt;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line">        .goodsname &#123;</span><br><span class="line">          font-size: 16px;</span><br><span class="line">          color: #333333;</span><br><span class="line">          font-weight: 600;</span><br><span class="line">          line-height: 24px;</span><br><span class="line">          margin-bottom: 5px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="javascript">      &lt;h1 <span class="class"><span class="keyword">class</span></span>=<span class="string">"goodsname"</span>&gt;&#123;&#123; goodsInfo.goodsName &#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">wx-open-launch-weapp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123; goodsInfo.goodsName &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>需要注意</strong></p><ul><li>在<code>vue</code>中需要加上 <code>&lt;script type=&quot;text/wxtag-template”&gt;&lt;/script&gt;</code>包裹元素，否则按钮不能展示</li><li><code>username</code>为小程序原始id，需要在小程序后台设置那里获取</li><li><code>path</code>是打开小程序的指定页面，需要加上<code>.html</code> 如<code>/pages/home/index.html</code></li><li><code>style</code>中样式写法需要注意，<code>goods-name</code> 好像不支持，需要这样写<code>goodsname</code>，只支持px格式</li></ul><h2 id="第4步-监听开发标签回调事件"><a href="#第4步-监听开发标签回调事件" class="headerlink" title="第4步 监听开发标签回调事件"></a>第4步 监听开发标签回调事件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">  <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'launch-btn'</span>)</span><br><span class="line">  btn.addEventListener(<span class="string">'launch'</span>, e =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'success'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  btn.addEventListener(<span class="string">'error'</span>,  e =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fail'</span>, e.detail);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更多参考"><a href="#更多参考" class="headerlink" title="更多参考"></a>更多参考</h2><ul><li>官方文档 <a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_Open_Tag.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_Open_Tag.html</a></li><li>其他讨论 <a href="https://developers.weixin.qq.com/community/develop/article/doc/0006c218d103a089e79a8720a56813" target="_blank" rel="noopener">https://developers.weixin.qq.com/community/develop/article/doc/0006c218d103a089e79a8720a56813</a><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"weixin-js-sdk"</span>: <span class="string">"^1.6.0"</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>直接在页面上使用</strong></p><blockquote><p>在需要调用JS接口的页面引入如下JS文件：<code>http://res.wx.qq.com/open/js/jweixin-1.6.0.js</code> （支持<code>https</code>）</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">  appId: <span class="string">''</span>,</span><br><span class="line">  debug: <span class="literal">true</span>,</span><br><span class="line">  timestamp: <span class="string">''</span>,</span><br><span class="line">  nonceStr: <span class="string">''</span>,</span><br><span class="line">  signature: <span class="string">''</span>,</span><br><span class="line">  jsApiList: [],</span><br><span class="line">  openTagList: [<span class="string">'wx-open-launch-app'</span>,<span class="string">'wx-open-launch-weapp'</span>] <span class="comment">// 获取开放标签权限</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>需要注意的点</strong></p><ul><li><code>wx.config</code> 内列出使用到的 <code>openTagList</code></li><li>符合开放平台列出的要求 <code>https://developers.weixin.qq.com/doc/oplatform/Mobile_App/WeChat_H5_Launch_APP.html</code></li><li>app 需要根据接入微信 sdk <code>https://developers.weixin.qq.com/doc/oplatform/Mobile_App/Access_Guide/iOS.html</code></li></ul><blockquote><p>在微信开发者工具内打开你的网页测试如果显示</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">errMsg</span>: <span class="string">"config:ok”&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>说明你已经接入JS-SDK成功了</p></blockquote><h2 id="在vue中使用例子-1"><a href="#在vue中使用例子-1" class="headerlink" title="在vue中使用例子"></a>在vue中使用例子</h2><h2 id="第1步-在main-js中设置-1"><a href="#第1步-在main-js中设置-1" class="headerlink" title="第1步 在main.js中设置"></a>第1步 在main.js中设置</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 忽略微信自定义标签</span></span><br><span class="line">Vue.config.ignoredElements = [<span class="string">'wx-open-launch-weapp'</span>,<span class="string">'wx-open-launch-app'</span>]</span><br></pre></td></tr></table></figure><h2 id="第2步-获取微信版本-1"><a href="#第2步-获取微信版本-1" class="headerlink" title="第2步 获取微信版本"></a>第2步 获取微信版本</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断微信环境内</span></span><br><span class="line">isWechat() &#123;</span><br><span class="line">  <span class="keyword">let</span> ua = <span class="built_in">window</span>.navigator.userAgent.toLowerCase()</span><br><span class="line">  <span class="comment">// console.log(ua)</span></span><br><span class="line">  <span class="keyword">if</span> (ua.match(<span class="regexp">/MicroMessenger/i</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取微信版本</span></span><br><span class="line"><span class="comment">// return eg. 7.0.16.1600</span></span><br><span class="line">getWeixinVersion() &#123;</span><br><span class="line">  <span class="keyword">return</span> navigator.userAgent.match(<span class="regexp">/MicroMessenger\/([\d\.]+)/i</span>)[<span class="number">1</span>]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">created()&#123;</span><br><span class="line">  <span class="comment">// 微信版本号大于 7.0.12 开放标签才可进行</span></span><br><span class="line">  <span class="keyword">const</span> wxVersion = <span class="keyword">this</span>.isWechat() &amp;&amp; <span class="keyword">this</span>.getWeixinVersion() || <span class="string">''</span></span><br><span class="line">  <span class="keyword">if</span>(wxVersion)&#123;</span><br><span class="line">    <span class="keyword">let</span> v = wxVersion.split(<span class="string">'.'</span>)</span><br><span class="line">    <span class="keyword">if</span>(v[<span class="number">0</span>]&gt;=<span class="number">7</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(v[<span class="number">1</span>]&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[<span class="number">2</span>]&gt;=<span class="number">12</span>)&#123;</span><br><span class="line">          <span class="keyword">this</span>.enableLaunchWeapp = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="第3步-在页面上展示-1"><a href="#第3步-在页面上展示-1" class="headerlink" title="第3步 在页面上展示"></a>第3步 在页面上展示</h2><blockquote><p>如果微信版本低于7.0.12 开放标签是无法使用的，需要降级处理</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"enableLaunchWeapp"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">wx-open-launch-weapp</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"launch-btn"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">username</span>=<span class="string">"gh_edc489d117fa3d"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">path</span>=<span class="string">"/pages/home/index.html"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/wxtag-template"</span>&gt;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line">        .goodsname &#123;</span><br><span class="line">          font-size: 16px;</span><br><span class="line">          color: #333333;</span><br><span class="line">          font-weight: 600;</span><br><span class="line">          line-height: 24px;</span><br><span class="line">          margin-bottom: 5px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="javascript">      &lt;h1 <span class="class"><span class="keyword">class</span></span>=<span class="string">"goodsname"</span>&gt;&#123;&#123; goodsInfo.goodsName &#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">wx-open-launch-weapp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123; goodsInfo.goodsName &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>需要注意</strong></p><ul><li>在<code>vue</code>中需要加上 <code>&lt;script type=&quot;text/wxtag-template”&gt;&lt;/script&gt;</code>包裹元素，否则按钮不能展示</li><li><code>username</code>为小程序原始id，需要在小程序后台设置那里获取</li><li><code>path</code>是打开小程序的指定页面，需要加上<code>.html</code> 如<code>/pages/home/index.html</code></li><li><code>style</code>中样式写法需要注意，<code>goods-name</code> 好像不支持，需要这样写<code>goodsname</code>，只支持px格式</li></ul><h2 id="第4步-监听开发标签回调事件-1"><a href="#第4步-监听开发标签回调事件-1" class="headerlink" title="第4步 监听开发标签回调事件"></a>第4步 监听开发标签回调事件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">  <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'launch-btn'</span>)</span><br><span class="line">  btn.addEventListener(<span class="string">'launch'</span>, e =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'success'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  btn.addEventListener(<span class="string">'error'</span>,  e =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fail'</span>, e.detail);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更多参考-1"><a href="#更多参考-1" class="headerlink" title="更多参考"></a>更多参考</h2><ul><li>官方文档 <a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_Open_Tag.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_Open_Tag.html</a></li><li>其他讨论 <a href="https://developers.weixin.qq.com/community/develop/article/doc/0006c218d103a089e79a8720a56813" target="_blank" rel="noopener">https://developers.weixin.qq.com/community/develop/article/doc/0006c218d103a089e79a8720a56813</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;接入要求&quot;&gt;&lt;a href=&quot;#接入要求&quot; class=&quot;headerlink&quot; title=&quot;接入要求&quot;&gt;&lt;/a&gt;接入要求&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;主体要求: 仅开放给已认证的服务号&lt;/li&gt;
&lt;li&gt;系统要求：微信版本要求为：&lt;code&gt;7.0.12&lt;/co
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="小程序" scheme="http://blog.poetries.top/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小程序直播总结</title>
    <link href="http://blog.poetries.top/2020/06/14/weapp-live-summary/"/>
    <id>http://blog.poetries.top/2020/06/14/weapp-live-summary/</id>
    <published>2020-06-14T07:20:12.000Z</published>
    <updated>2020-07-24T04:13:35.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、小程序直播功能目前有哪些实现方案"><a href="#一、小程序直播功能目前有哪些实现方案" class="headerlink" title="一、小程序直播功能目前有哪些实现方案"></a>一、小程序直播功能目前有哪些实现方案</h2><ul><li>内嵌腾讯直播H5：腾讯直播已改名NOW直播，小程序接入工具文档无法找到</li><li>小程序原生实现：小程序对直播和<code>websocket</code>都进行了比较好的封装，通过<code>live-pusher</code> <code>live-player</code>组件和<code>websocket API</code>即可实现直播互动功能</li><li>接入小程序直播插件实现：小程序直播，是微信提供给小程序开发者的直播组件。</li></ul><h2 id="二、小程序原生实现直播功能流程"><a href="#二、小程序原生实现直播功能流程" class="headerlink" title="二、小程序原生实现直播功能流程"></a>二、小程序原生实现直播功能流程</h2><blockquote><p>微信小程序从<code>1.7</code>开始，为开发者提供了两个新接口，<code>&lt;live-pusher&gt;</code>和<code>&lt;live-player&gt;</code>，可以在小程序上实现单向的直播功能。通过与技术的结合，比如<code>WebRTC</code>，开发者们还可以进一步在小程序直播的基础上实现连麦功能</p></blockquote><blockquote><p>首先由于微信对小程序直播功能类目有限制，限定了特定类目的小程序使用</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2020/06/8.webp" alt></p><p><strong>另外需要注意的两点：</strong></p><ul><li>个人号无法申请使用直播功能；</li><li>社交类目开通直播功能需要相关视频许可和文网文资质许可；</li><li>所以小程序开通直播的业务，要根据产品的目的和场景去申请对应的类目。</li></ul><blockquote><p>在小程序管理后台，「开发」-「接口设置」中自助开通对应的权限，如下图所示：</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2020/06/9.png" alt></p><p><img src="http://blog.poetries.top/img-repo/2020/06/7.webp" alt></p><blockquote><p>微信小程序原生实现直播功能流程如上图所示，录制端小程序通过<code>[live-pusher]</code>组件对手机和麦克风的数据进行采集和编码推流到服务器，服务器端对数据进行加工处理并分发给多个客户端，播放端小程序通过<code>[live-player]</code>组件从云端拉流并进行实时无差异的解码和渲染，从而实现直播小程序完整互动功能</p></blockquote><p><strong>1. 推流 API 调用流程图</strong></p><p><img src="http://blog.poetries.top/img-repo/2020/06/1.jpg" alt></p><p><strong>2. 拉流 API 调用流程图</strong></p><p><img src="http://blog.poetries.top/img-repo/2020/06/2.jpg" alt></p><h2 id="三、小程序直播实现过程"><a href="#三、小程序直播实现过程" class="headerlink" title="三、小程序直播实现过程"></a>三、小程序直播实现过程</h2><blockquote><p>微信小程序中的推拉流功能，需要用到微信提供的 <code>live-player</code> <code>live-pusher</code> 标签</p></blockquote><h3 id="3-1-live-player"><a href="#3-1-live-player" class="headerlink" title="3.1 live-player"></a>3.1 live-player</h3><blockquote><p><code>live-player</code> 是微信提供的支持实时音视频播放的组件，<a href="https://developers.weixin.qq.com/miniprogram/dev/component/live-player.html" target="_blank" rel="noopener">官方介绍详见组件介绍</a>。</p></blockquote><p>创建 live-player 的演示源码如下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;live-player</span><br><span class="line">    autoplay</span><br><span class="line">    wx:<span class="keyword">if</span>=<span class="string">"&#123;&#123;item.playUrl&#125;&#125;"</span></span><br><span class="line">    id=<span class="string">"&#123;&#123;item.streamID&#125;&#125;"</span></span><br><span class="line">    mode=<span class="string">"RTC"</span></span><br><span class="line">    object-fit=<span class="string">"fillCrop"</span></span><br><span class="line">    min-cache=<span class="string">"0.1"</span></span><br><span class="line">    max-cache=<span class="string">"0.3"</span></span><br><span class="line">    src=<span class="string">"&#123;&#123;item.playUrl&#125;&#125;"</span></span><br><span class="line">    debug=<span class="string">"&#123;&#123;pushConfig.showLog&#125;&#125;"</span></span><br><span class="line">    bindstatechange=<span class="string">"onPlayStateChange"</span></span><br><span class="line">    bindnetstatus=<span class="string">"onPlayNetStateChange"</span></span><br><span class="line">    binderror=<span class="string">"error"</span>&gt;</span><br><span class="line">    &lt;cover-view <span class="class"><span class="keyword">class</span></span>=<span class="string">'character'</span> style=<span class="string">'padding: 0 5px;'</span>&gt;&#123;&#123;item.streamID&#125;&#125;&lt;<span class="regexp">/cover-view&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>live-player&gt;</span><br></pre></td></tr></table></figure><p><strong>请注意</strong></p><ul><li><code>live</code> 模式主要用于直播类场景，比如赛事直播、在线教育、远程培训等等。该模式下，小程序内部的模块会优先保证观看体验的流畅，通过调整 <code>min-cache</code> 和 <code>max-cache</code> 属性，您可以调节观众(播放)端所感受到的时间延迟的大小，文档下面会详细介绍这两个参数</li><li><code>RTC</code> 则主要用于双向视频通话或多人视频通话场景，比如金融开会、在线客服、车险定损、培训会议 等等。在此模式下，对 <code>min-cache</code> 和 <code>max-cache</code> 的设置不会起作用，因为小程序内部会自动将延迟控制在一个很低的水平(<code>500ms</code>左右)。</li></ul><h3 id="3-2-live-pusher"><a href="#3-2-live-pusher" class="headerlink" title="3.2 live-pusher"></a>3.2 live-pusher</h3><blockquote><p>live-pusher 是微信提供的支持实时音视频录制的组件，<a href="https://developers.weixin.qq.com/miniprogram/dev/component/live-pusher.html" target="_blank" rel="noopener">官方介绍详见：组件介绍</a></p></blockquote><blockquote><p>创建 <code>live-pusher</code> 的演示源码如下</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;live-pusher</span><br><span class="line">    wx:<span class="keyword">if</span>=<span class="string">"&#123;&#123;pushUrl&#125;&#125;"</span></span><br><span class="line">    id=<span class="string">"video-livePusher"</span></span><br><span class="line">    mode=<span class="string">"RTC"</span></span><br><span class="line">    url=<span class="string">"&#123;&#123;pushUrl&#125;&#125;"</span></span><br><span class="line">    min-bitrate=<span class="string">"&#123;&#123;pushConfig.minBitrate&#125;&#125;"</span></span><br><span class="line">    max-bitrate=<span class="string">"&#123;&#123;pushConfig.maxBitrate&#125;&#125;"</span></span><br><span class="line">    aspect=<span class="string">"&#123;&#123;pushConfig.aspect&#125;&#125;"</span></span><br><span class="line">    beauty=<span class="string">"&#123;&#123;pushConfig.isBeauty&#125;&#125;"</span></span><br><span class="line">    muted=<span class="string">"&#123;&#123;pushConfig.isMute&#125;&#125;"</span></span><br><span class="line">    background-mute=<span class="string">"true"</span></span><br><span class="line">    debug=<span class="string">"&#123;&#123;pushConfig.showLog&#125;&#125;"</span></span><br><span class="line">    bindstatechange=<span class="string">"onPushStateChange"</span></span><br><span class="line">    bindnetstatus=<span class="string">"onPushNetStateChange"</span>&gt;</span><br><span class="line">    &lt;cover-view <span class="class"><span class="keyword">class</span></span>=<span class="string">'character'</span> style=<span class="string">'padding: 0 5px;'</span>&gt;&#123;&#123;isPublishing ? <span class="string">"我("</span> + publishStreamID + <span class="string">")"</span>: <span class="string">""</span>&#125;&#125;&lt;<span class="regexp">/cover-view&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>live-pusher&gt;</span><br></pre></td></tr></table></figure><p><strong>请注意：</strong></p><ul><li>SD、HD 和 FHD 主要用于直播类场景，比如赛事直播、在线教育、远程培训等等。SD、HD 和 FHD 分别对应三种默认的清晰度。该模式下，小程序会更加注重清晰度和观看的流畅性，不会过分强调低延迟，也不会为了延迟牺牲画质和流畅性</li><li>RTC 则主要用于双向视频通话或多人视频通话场景，比如金融开会、在线客服、车险定损、培训会议 等等。该模式下，小程序会更加注重降低点到点的时延，也会优先保证声音的质量，在必要的时候会对画面清晰度和画面的流畅性进行一定的缩水</li></ul><h3 id="3-3-服务端的选择"><a href="#3-3-服务端的选择" class="headerlink" title="3.3 服务端的选择"></a>3.3 服务端的选择</h3><blockquote><p>由于自己搭<code>rtmp</code>（例如<code>Nginx rtmp</code>）成本较高，技术实现难度大，考虑云服务商提供的视频直播服务产品，生成推流地址和播放地址，目前市面上主流的云直播产品有：腾讯云、阿里云、七牛云等。</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2020/06/10.png" alt></p><blockquote><p>各平台均提供内容接入与分发和分布式实时视频处理技术，每个平台提供的功能大同小异但各有千秋，平均费用大概 20-30元/100G，100G流量可以满足100人同时在线直播4小时</p></blockquote><p><strong>接下来选择腾讯云直播进行接入体验</strong></p><ol><li>申请腾讯云账号，开通云直播权限，它会赠送20gb流量给你 超出需要自己花钱。开通流程请参考下面的文档：<a href="https://cloud.tencent.com/document/product/454/12517" target="_blank" rel="noopener">https://cloud.tencent.com/document/product/454/12517</a></li><li>域名管理，在这里面会看到两个域名 一个是推流域名 一个是播放域名，域名可以用自己的 （建议配置自己的域名，2019/2/26上线查看时发现赠送的播放域名已失效）。具体看下面的文档 <a href="https://cloud.tencent.com/document/product/267/20381" target="_blank" rel="noopener">https://cloud.tencent.com/document/product/267/20381</a></li></ol><p><img src="http://blog.poetries.top/img-repo/2020/06/11.png" alt></p><blockquote><p>由于腾讯云不再赠送播放域名，所以需要租用或者使用自己的域名生成播放地址，自己的播放域名不能直接访问，需要完成CNAME配置</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2020/06/12.png" alt></p><ol start="3"><li>最后，小程序直播组件API接入</li></ol><blockquote><p>第一步：<code>&lt;live-pusher&gt;</code>推流（数据包实时上传）示例代码：</p></blockquote><p>使用<code>&lt;live-pusher&gt;</code>发布流，这里使用的参数 <code>min-bitrate=&quot;200&quot;</code> 最小码率 <code>max-bitrate=&quot;400&quot;</code> 最大码率 <code>mode=&quot;RTC&quot;</code> RTC模式，加入房间之后我们需要调用 <code>publish</code>返回一个 <code>rtmp</code> 推流地址</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;live-pusher</span><br><span class="line">  autopush</span><br><span class="line">  min-bitrate=<span class="string">"200"</span></span><br><span class="line">  max-bitrate=<span class="string">"400"</span></span><br><span class="line">  mode=<span class="string">"RTC"</span></span><br><span class="line">  url=<span class="string">"&#123;&#123;publishPath&#125;&#125;"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/live-pusher&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>先使用 <code>wx.createLivePusherContext</code> 创建 <code>LivePusherContext</code>，再使用 setData 设置好 publishPath 之后发布</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    publishPath: <span class="literal">undefined</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  publish() &#123;</span><br><span class="line">  <span class="comment">// joinRoom 之后调用</span></span><br><span class="line">  <span class="comment">// 创建 LivePusherContext</span></span><br><span class="line">  <span class="keyword">const</span> pushContext = wx.createLivePusherContext()</span><br><span class="line">  <span class="keyword">const</span> path = session.publish()</span><br><span class="line">  <span class="keyword">this</span>.setData(</span><br><span class="line">    &#123; <span class="attr">publishPath</span>: path &#125;,</span><br><span class="line">    () =&gt; &#123;</span><br><span class="line">      pushContext.start(&#123;</span><br><span class="line">          success: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'推流成功'</span>)</span><br><span class="line">          &#125;,</span><br><span class="line">          fail: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'推流开始失败'</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>第二步：<code>&lt;live-player&gt;</code>播放（数据包实时下载）示例代码：</p></blockquote><p>使用<code>&lt;live-player&gt;</code>订阅流，加入房间之后我们可以调用 <code>subscribe</code> 返回一个 <code>rtmp</code> 拉流地址。 下面我们使用了 <code>wx:for</code> 遍历 <code>data.subscribeList</code> 渲染一个订阅的列表</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;live-player</span><br><span class="line">  autoplay</span><br><span class="line">  wx:key=<span class="string">"&#123;&#123;item.key&#125;&#125;"</span></span><br><span class="line">  wx:<span class="keyword">for</span>=<span class="string">"&#123;&#123;subscribeList&#125;&#125;"</span></span><br><span class="line">  min-cache=<span class="string">"0.2"</span></span><br><span class="line">  max-cache=<span class="string">"0.8"</span></span><br><span class="line">  src=<span class="string">"&#123;&#123;item.url&#125;&#125;"</span></span><br><span class="line">  mode=<span class="string">"RTC"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/live-player&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-直播回放功能"><a href="#3-4-直播回放功能" class="headerlink" title="3.4 直播回放功能"></a>3.4 直播回放功能</h3><blockquote><p>参考 <a href="https://cloud.tencent.com/document/product/454/8681#1.-.E7.9B.B4.E6.92.AD.E5.BD.95.E5.88.B6.E7.9A.84.E5.8E.9F.E7.90.86.E6.98.AF.E4.BB.80.E4.B9.88.EF.BC.9F" target="_blank" rel="noopener">腾讯云</a>接入实现，一般是后台来实现</p></blockquote><h2 id="四、即时通信-IM"><a href="#四、即时通信-IM" class="headerlink" title="四、即时通信 IM"></a>四、即时通信 IM</h2><blockquote><p>在直播中加入Im功能，参考<a href="https://cloud.tencent.com/document/product/269" target="_blank" rel="noopener">腾讯云IM</a>接入</p></blockquote><ul><li><a href="https://github.com/tencentyun/TIMSDK/tree/master/WXMini" target="_blank" rel="noopener">https://github.com/tencentyun/TIMSDK/tree/master/WXMini</a></li><li><a href="https://cloud.tencent.com/document/product/269/37448" target="_blank" rel="noopener">https://cloud.tencent.com/document/product/269/37448</a></li><li><a href="https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#createTextMessage" target="_blank" rel="noopener">IM sdk文档</a></li></ul><h2 id="五、完整示例"><a href="#五、完整示例" class="headerlink" title="五、完整示例"></a>五、完整示例</h2><blockquote><p>实现效果</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2020/06/13.png" alt></p><blockquote><p>部分代码参考 <a href="https://github.com/poetries/weapp-live" target="_blank" rel="noopener">https://github.com/poetries/weapp-live</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、小程序直播功能目前有哪些实现方案&quot;&gt;&lt;a href=&quot;#一、小程序直播功能目前有哪些实现方案&quot; class=&quot;headerlink&quot; title=&quot;一、小程序直播功能目前有哪些实现方案&quot;&gt;&lt;/a&gt;一、小程序直播功能目前有哪些实现方案&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="小程序" scheme="http://blog.poetries.top/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="直播" scheme="http://blog.poetries.top/tags/%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>H5之微信公众号分享</title>
    <link href="http://blog.poetries.top/2020/05/24/wx-share/"/>
    <id>http://blog.poetries.top/2020/05/24/wx-share/</id>
    <published>2020-05-24T05:21:43.000Z</published>
    <updated>2020-07-24T04:13:35.061Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用微信的分享功能，需要使用微信<code>JS-SDK</code>来完成。且只能点击微信右上角的<code>...</code>调起分享面板，不能直接由页面行为唤起！本教程使用js-sdk最新版</p></blockquote><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html" target="_blank" rel="noopener">微信JS-SDK</a>是微信公众平台面向网页开发者提供的基于微信内的网页开发工具包。通过使用微信<code>JS-SDK</code>，网页开发者可借助微信高效地使用拍照、选图、语音、位置等手机系统的能力，同时可以直接使用微信分享、扫一扫、卡券、支付等微信特有的能力</p><h2 id="一、JSSDK使用步骤"><a href="#一、JSSDK使用步骤" class="headerlink" title="一、JSSDK使用步骤"></a>一、JSSDK使用步骤</h2><p><strong>1. 步骤一：绑定域名</strong></p><blockquote><p>登录微信公众平台 –&gt; 公众号设置 –&gt; 功能设置 –&gt; 填写“JS接口安全域名”</p></blockquote><p><strong>2. 步骤二：引入JS文件</strong></p><ul><li>在需要调用JS接口的页面引入如下JS文件，（支持https）：<a href="http://res.wx.qq.com/open/js/jweixin-1.6.0.js" target="_blank" rel="noopener">http://res.wx.qq.com/open/js/jweixin-1.6.0.js</a></li><li>如需进一步提升服务稳定性，当上述资源不可访问时，可改访问：<a href="http://res2.wx.qq.com/open/js/jweixin-1.6.0.js" target="_blank" rel="noopener">http://res2.wx.qq.com/open/js/jweixin-1.6.0.js</a> （支持https）。</li><li>备注：支持使用 AMD/CMD 标准模块加载方法加载</li></ul><p><strong>3. 步骤三：通过config接口注入权限验证配置</strong></p><blockquote><p>所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">  debug: <span class="literal">true</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class="line">  appId: <span class="string">''</span>, <span class="comment">// 必填，公众号的唯一标识</span></span><br><span class="line">  timestamp: , <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">  nonceStr: <span class="string">''</span>, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">  signature: <span class="string">''</span>,<span class="comment">// 必填，签名</span></span><br><span class="line">  jsApiList: [] <span class="comment">// 必填，需要使用的JS接口列表</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>config</code>是一个客户端的异步操作</li><li>在<code>JS-SDK</code>后调用，也应该尽可能早的调用</li><li>同一个<code>url</code>仅需调用一次</li><li>对于变化<code>url</code>的<code>SPA</code>的<code>web app</code>可在每次<code>url</code>变化时进行调用</li><li>低于<code>Android6.2</code>版本的微信客户端，不支持<code>pushState</code>的H5新特性，使用pushState来实现web app的页面会导致签名失败</li></ul><p><strong>4. 步骤四：通过ready接口处理成功验证</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>由于config是一个异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中</p></blockquote><p><strong>注</strong>：无论<code>config</code>成功或失败，<code>ready</code>中的内容都会被执行！</p><p><strong>5. 步骤五：通过error接口处理失败验证</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.error(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>6. 通用参数：</strong></p><blockquote><p>所有接口通过<code>wx</code>对象(也可使用<code>jWeixin</code>对象)来调用，参数是一个对象，除了每个接口本身需要传的参数之外，还有以下通用函数参数：</p></blockquote><ul><li><code>success</code> 接口调用成功时执行的回调函数。</li><li><code>fail</code> 接口调用失败时执行的回调函数。</li><li><code>complete</code> 接口调用完成时执行的回调函数，无论成功或失败都会执行。</li><li><code>cancel</code> 用户点击取消时的回调函数，仅部分有用户取消操作的api才会用到。</li><li><code>trigger</code> 监听Menu中的按钮点击时触发的方法，该方法仅支持Menu中的相关接口。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 回调参数：</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    xxx: xxx,</span><br><span class="line">    errMsg: <span class="string">''</span> <span class="comment">// 接口调用成功/失败信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、微信分享"><a href="#二、微信分享" class="headerlink" title="二、微信分享"></a>二、微信分享</h2><blockquote><p>用户调用微信的分享功能，可以自定义分享的title和描述，以及小图标和链接。可以分享到群、好友、朋友圈、QQ、QQ空间等</p></blockquote><p><strong>分享设计规范</strong></p><ul><li>分享标题：14字以内，建议使用朋友般亲切的口吻</li><li>分享图标：尺寸<code>120*120</code>，大小不超过<code>10K</code>，不支持<code>GIF</code>格式。必须采用<code>https</code>协议。</li><li>分享描述：<code>20</code>字以内，对标题的简要解读。</li><li>分享链接：外链页面所在服务器至少能支持每秒<code>1500</code>次的访问压力，且每次访问的响应时间<code>200ms</code>以内。必须采用<code>https</code>协议。</li><li>分享行为：<strong>页面上无分享按钮</strong>，页面上无诱导分享行为，包含但不限于分享后才能看到特定的信息，分享后才能进行下一步流程，分享后可以获得奖励等</li><li>分享文案：分享时“文案”和“图片”可以正常显示，分享后链接可以访问。</li><li>分享标题和描述不能出现敏感词汇，否则会导致部分不可预知的问题。比如分享者可以看到分享图标，被分享者看不到图标等。</li></ul><blockquote><p>敏感词举例：红包、现金、到账等</p></blockquote><p><strong>注：</strong> 分享的图标链接和分享链接尽量保持为同一域名下的资源。否则可能会出现分享不成功或分享图标不显示的情况。</p><blockquote><p>由于不能由页面直接唤起微信的分享面板，所以就需要一个弹窗浮层来引导用户用户去点击<code>...</code>按钮唤起分享面板。注意这个弹窗浮层不能出现诱导分享的内容。</p></blockquote><p><strong>分享或广告文案禁止内容：</strong></p><ul><li>特殊字符：不允许使用特殊字符与符号 ，例如：<code>“：）” “-。-”</code>等； 不允许使用 <code>emoji</code> 表情</li><li>诱导或引导操作： 不允许出现诱导或引导用户操作的描述。包含但不限于以下文案：“请点击查看详情”、 “赶快戳开看一看”、“点一下下面你就知道是什么”、“点击下方了解公众号”</li><li>微信产品功能词汇：未经微信官方授权，禁止使用以下产品功能词汇及其谐音词汇。包含但不限于以下内容：“朋友圈” 、“点赞” 、“评论” 、“公众号”、 “微信”、 “红包”</li><li><code>URL</code>：不允许直接放URL链接内容</li><li>电话号码：不允许出现电话号码</li><li>破折号：不允许出现破折号，破折号在移动端显示容易产生歧义</li><li>空行&amp;空格：不允许使用空行或空格</li><li>不规范折行：不允许出现单个词语或文字折行</li><li>股票代码：不允许出现公司股票代码</li><li>非简体中文文字&amp;方言&amp;小语种：不允许使用非简体中文文字（单字、词语、成语）。暂不支持使用方言和小语种作为文案。</li><li>产品销量数据：不允许使用任何维度的产品销量数据。</li></ul><h2 id="三、分享接口"><a href="#三、分享接口" class="headerlink" title="三、分享接口"></a>三、分享接口</h2><p><strong>3.1 自定义“分享给朋友”及“分享到QQ”按钮的分享内容（1.4.0）</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;   <span class="comment">//需在用户可能点击分享按钮前就先调用</span></span><br><span class="line">  wx.updateAppMessageShareData(&#123; </span><br><span class="line">    title: <span class="string">''</span>, <span class="comment">// 分享标题</span></span><br><span class="line">    desc: <span class="string">''</span>, <span class="comment">// 分享描述</span></span><br><span class="line">    link: <span class="string">''</span>, <span class="comment">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class="line">    imgUrl: <span class="string">''</span>, <span class="comment">// 分享图标</span></span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 设置成功</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>3.2 自定义“分享到朋友圈”及“分享到QQ空间”按钮的分享内容（1.4.0）</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;      <span class="comment">//需在用户可能点击分享按钮前就先调用</span></span><br><span class="line">  wx.updateTimelineShareData(&#123; </span><br><span class="line">    title: <span class="string">''</span>, <span class="comment">// 分享标题</span></span><br><span class="line">    link: <span class="string">''</span>, <span class="comment">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class="line">    imgUrl: <span class="string">''</span>, <span class="comment">// 分享图标</span></span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 设置成功</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="四、分享开发调试时注意事项"><a href="#四、分享开发调试时注意事项" class="headerlink" title="四、分享开发调试时注意事项"></a>四、分享开发调试时注意事项</h2><ul><li>分享出去的外链的域名必须和公众号后台配置的JS安全域名一致，否则会导致分享的失败</li><li>享出去的外链，会自动给加上微信标识，导致二次分享失败</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如打开页面：</span><br><span class="line"></span><br><span class="line">https://www.xxx.com/m/#/activity/invite/friends</span><br><span class="line">分享出去链接：</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.xxx.com/m/?from=groupmessage&amp;isappinstalled=0#/activity/invite/friends" target="_blank" rel="noopener">https://www.xxx.com/m/?from=groupmessage&amp;isappinstalled=0#/activity/invite/friends</a> 微信自动在分享后边加上了<code>query</code>字符串：</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from=groupmessage   分享到群</span><br><span class="line">from=timeline  分享到朋友圈</span><br><span class="line">from=singlemessage  分享到好友</span><br><span class="line">isappinstalled=0    0或1，表示是否安装了app</span><br></pre></td></tr></table></figure><p><strong>注：安卓手机分享到朋友圈的链接</strong>，只会带<code>from=timeline</code></p><blockquote><p>由于微信的签名生成时，需要传一个<code>url</code>参数，而这个<code>url</code>则是通过</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">location.href.split(<span class="string">'#'</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><blockquote><p>获取的<code>url</code>，取的是<code>url</code>的<code>#</code>前边的部分来生成签名，第一次分享成功，生成签名的<code>url</code>不带<code>query</code>字段。通过一次分享出去的链接，带上了<code>query</code>后，生成的签名就无效了，导致二次分享失败。</p></blockquote><p><strong>解决办法：</strong></p><ol><li>替换路径</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> href = <span class="built_in">window</span>.location.href;</span><br><span class="line"><span class="keyword">if</span>(href.indexOf(<span class="string">'groupmessage'</span>) &gt; <span class="number">-1</span> || href.indexOf(<span class="string">'singlemessage'</span>) &gt; <span class="number">-1</span> || href.indexOf(<span class="string">'timeline'</span>) &gt; <span class="number">-1</span>)&#123;</span><br><span class="line">    href = href.replace(<span class="regexp">/\?from=(groupmessage|singlemessage|timeline)(\S*)#/</span>, <span class="string">'#'</span>);</span><br><span class="line">    <span class="built_in">window</span>.location.href = href;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>不过这样，会导致页面请求两次，细心的用户可能会感知到。或者用户网络不稳定时，可能他会感觉到两次页面的刷新</p></blockquote><ol start="2"><li>生成签名的时候，动态的获取url，传给生成签名的接口</li></ol><blockquote><p>每次打开页面时，都获取到url的#前边部分传给签名生成接口，保证每次的签名都是有效的</p></blockquote><h2 id="五、实战"><a href="#五、实战" class="headerlink" title="五、实战"></a>五、实战</h2><blockquote><p>hash路由形式分享链接到朋友圈，需要特殊处理url</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求后台接口 获取微信配置信息</span></span><br><span class="line">*getWxSignature(&#123; payload, callback &#125;, &#123; call, put, select &#125;) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">yield</span> call(rGetWxSign, payload);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(res.code !==<span class="number">0</span>) &#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过config接口注入权限验证配置</span></span><br><span class="line">  wx.config(&#123;</span><br><span class="line">    debug: <span class="literal">false</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class="line">    appId: res.data.appId, <span class="comment">// 必填，公众号的唯一标识</span></span><br><span class="line">    timestamp: res.data.timestamp, <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">    nonceStr: res.data.nonceStr, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">    signature: res.data.signature, <span class="comment">// 必填，签名，见附录1</span></span><br><span class="line">    jsApiList: [</span><br><span class="line">      <span class="string">'updateTimelineShareData'</span>, </span><br><span class="line">      <span class="string">'updateAppMessageShareData'</span></span><br><span class="line">    ] <span class="comment">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取微信签名</span></span><br><span class="line">getWxSignature() &#123;</span><br><span class="line">  <span class="keyword">let</span> url = location.href</span><br><span class="line">  <span class="comment">// 如果页面url是hash路由形式 需要处理一下参数</span></span><br><span class="line">  <span class="keyword">let</span> i = url.indexOf(<span class="string">'#'</span>)</span><br><span class="line">  <span class="keyword">if</span> (i !== <span class="number">-1</span>) &#123;</span><br><span class="line">    url = url.substring(<span class="number">0</span>, i)</span><br><span class="line">  &#125;</span><br><span class="line">  dispatch(&#123; </span><br><span class="line">    type: <span class="string">`<span class="subst">$&#123;namespace&#125;</span>/getWxSignature`</span>, </span><br><span class="line">    payload: &#123;url&#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 页面加载完成就执行初始化监听</span></span><br><span class="line">handleWxShare = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;<span class="attr">pagedata</span>: &#123;mainData=&#123;&#125;,projectInfo=&#123;&#125;&#125;&#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">const</span> &#123;pagequery&#125; = <span class="keyword">this</span>.state</span><br><span class="line"></span><br><span class="line">    wx.ready(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'wx.ready:'</span>,projectInfo)</span><br><span class="line">      <span class="comment">// config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。</span></span><br><span class="line">      <span class="keyword">let</span> linkUrl = location.href</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 监听右上角分享到朋友圈事件</span></span><br><span class="line">      <span class="comment">// 自定义“分享到朋友圈”及“分享到QQ空间”按钮的分享内容（1.4.0）</span></span><br><span class="line">      wx.updateTimelineShareData(&#123;</span><br><span class="line">        title: mainData.title, <span class="comment">// 分享标题</span></span><br><span class="line">        desc: (projectInfo.project || &#123;&#125;).projectName || <span class="string">''</span>, <span class="comment">// 分享描述</span></span><br><span class="line">        link: linkUrl, <span class="comment">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class="line">        imgUrl: mainData.sharePicUrl, <span class="comment">// 分享图标</span></span><br><span class="line">        success: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 用户确认分享后执行的回调函数</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'分享成功'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        cancel: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 用户取消分享后执行的回调函数</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'取消分享'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">       <span class="comment">// 监听右上角发送给朋友事件</span></span><br><span class="line">       <span class="comment">// 自定义“分享给朋友”及“分享到QQ”按钮的分享内容</span></span><br><span class="line">       wx.updateAppMessageShareData(&#123;</span><br><span class="line">        title: mainData.title, <span class="comment">// 分享标题</span></span><br><span class="line">        desc: (projectInfo.project || &#123;&#125;).projectName || <span class="string">''</span>, <span class="comment">// 分享描述</span></span><br><span class="line">        link: linkUrl, <span class="comment">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class="line">        imgUrl: mainData.sharePicUrl, <span class="comment">// 分享图标</span></span><br><span class="line">        success: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 用户确认分享后执行的回调函数</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'分享成功'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        cancel: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 用户取消分享后执行的回调函数</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'取消分享'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    wx.error(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">      <span class="comment">// config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。</span></span><br><span class="line">      <span class="built_in">console</span>.log(res,<span class="string">'wx error'</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">    <span class="comment">// 微信分享到朋友圈、发送朋友分享的链接带上微信加上的参数 导致分享不了 </span></span><br><span class="line">    <span class="keyword">let</span> href = <span class="built_in">window</span>.location.href</span><br><span class="line">    <span class="comment">// from=groupmessage   分享到群</span></span><br><span class="line">    <span class="comment">// from=timeline  分享到朋友圈</span></span><br><span class="line">    <span class="comment">// from=singlemessage  分享到好友</span></span><br><span class="line">    <span class="keyword">if</span>(~href.indexOf(<span class="string">'from=timeline'</span>) || ~href.indexOf(<span class="string">'from=singlemessage'</span>) || ~href.indexOf(<span class="string">'from=groupmessage'</span>)) &#123;</span><br><span class="line">      <span class="comment">// 带有hash路由的链接分享到朋友圈会被微信带上?from=timeline 导致二次分享的链接打不开 需要重新处理</span></span><br><span class="line">      <span class="comment">// 如果是history模式下的路由 不需要另外处理</span></span><br><span class="line">      <span class="comment">// https://zmjtest.kaisasso.com/wxapp/?from=timeline#/dsb/article?id=286&amp;pid=20&amp;uid=110</span></span><br><span class="line">      <span class="built_in">window</span>.location.href = <span class="string">`<span class="subst">$&#123;location.origin&#125;</span><span class="subst">$&#123;location.pathname&#125;</span><span class="subst">$&#123;location.hash&#125;</span>`</span> </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;使用微信的分享功能，需要使用微信&lt;code&gt;JS-SDK&lt;/code&gt;来完成。且只能点击微信右上角的&lt;code&gt;...&lt;/code&gt;调起分享面板，不能直接由页面行为唤起！本教程使用js-sdk最新版&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a 
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="公众号分享" scheme="http://blog.poetries.top/tags/%E5%85%AC%E4%BC%97%E5%8F%B7%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>前端之调试</title>
    <link href="http://blog.poetries.top/2020/03/26/fe-debug/"/>
    <id>http://blog.poetries.top/2020/03/26/fe-debug/</id>
    <published>2020-03-26T01:35:08.000Z</published>
    <updated>2020-07-24T04:13:35.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Chrome-devtool调试"><a href="#一、Chrome-devtool调试" class="headerlink" title="一、Chrome devtool调试"></a>一、Chrome devtool调试</h1><p>Chrome 开发者工具有很多重要的面板，比如与性能相关的有网络面板、<code>Performance</code> 面板、内存面板等，与调试页面相关的有 <code>Elements</code> 面板、<code>Sources</code> 面板、<code>Console</code> 面板等。</p><p>你可以在浏览器窗口的右上方选择 <code>Chrome</code> 菜单，然后选择“更多工具–&gt; 开发者工具”来打开<code>Chrome</code> 开发者工具。打开的页面如下图所示</p><p><img src="http://blog.poetries.top/img-repo/2020/03/7.png" alt></p><p>从图中可以看出，它一共包含了 10 个功能面板，包括了 </p><ul><li>Elements</li><li>Console</li><li>Sources</li><li>NetWork</li><li>Performance</li><li>Memory</li><li>Application</li><li>Security</li><li>Audits</li><li>Layers</li></ul><p><strong>10 个面板的大致功能</strong></p><p><img src="http://blog.poetries.top/img-repo/2020/03/8.png" alt></p><p>简单来说，<code>Chrome</code> 开发者工具为我们提供了通过界面访问或者编辑 <code>DOM</code> 和 <code>CSSOM</code> 的能力，还提供了强大的调试功能和查看性能指标的能力。</p><p>OK，接下来我们就要重点看下<code>Network</code> 面板、<code>console</code>面板、<code>source</code>调试面板</p><h2 id="1-1-console面板"><a href="#1-1-console面板" class="headerlink" title="1.1 console面板"></a>1.1 console面板</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"打印字符串"</span>);<span class="comment">//在控制台打印自定义字符串</span></span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">"我是个错误"</span>);<span class="comment">//在控制台打印自定义错误信息</span></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">"我是个信息"</span>);<span class="comment">//在控制台打印自定义信息</span></span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">"我是个警告"</span>);<span class="comment">//在控制台打印自定义警告信息</span></span><br><span class="line"><span class="built_in">console</span>.debug(<span class="string">"我是个调试"</span>);<span class="comment">//在控制台打印自定义调试信息</span></span><br></pre></td></tr></table></figure><p><strong>格式化输出</strong></p><blockquote><p>除此以外，<code>console</code>还支持自定义样式和类似c语言<code>printf</code>形式</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"%s年"</span>,<span class="number">2016</span>);<span class="comment">//%s表示字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"%d年%d月"</span>,<span class="number">2016</span>,<span class="number">11</span>);<span class="comment">//%d表示整数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"%f"</span>,<span class="number">3.1415926</span>);<span class="comment">//%f小数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"%o"</span>,<span class="built_in">console</span>);<span class="comment">//%o表示对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"%c自定义样式"</span>,<span class="string">"font-size:30px;color:#00f"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"%c我是%c自定义样式"</span>,<span class="string">"font-size:20px;color:green"</span>,<span class="string">"font-size:10px;color:red"</span>);</span><br></pre></td></tr></table></figure><h2 id="1-2-网络面板"><a href="#1-2-网络面板" class="headerlink" title="1.2 网络面板"></a>1.2 网络面板</h2><blockquote><p>网络面板由控制器、过滤器、抓图信息、时间线、详细列表和下载信息概要这 6 个区域构成（如下图所示）</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2020/03/9.png" alt></p><ol><li>控制器</li></ol><p>其中，控制器有 4 个比较重要的功能，我们按照下文中的这张图来简单介绍下</p><p><img src="http://blog.poetries.top/img-repo/2020/03/10.png" alt></p><ul><li>红色圆点的按钮，表示“开始 / 暂停抓包”，这个功能很常见，很容易理解</li><li>“全局搜索”按钮，这个功能就非常重要了，可以在所有下载资源中搜索相关内容，还可以快速定位到某几个你想要的文件上</li><li>Disable cache，即“禁止从 Cache 中加载资源”的功能，它在调试 Web 应用的时候非常有用，因为开启了 Cache 会影响到网络性能测试的结果</li><li>Online 按钮，是“模拟 2G/3G”功能，它可以限制带宽，模拟弱网情况下页面的展现情况，然后你就可以根据实际展示情况来动态调整策略，以便让 Web 应用更加适用于这些弱网</li></ul><ol start="2"><li>过滤器</li></ol><p>网络面板中的过滤器，主要就是起过滤功能。因为有时候一个页面有太多内容在详细列表区域中展示了，而你可能只想查看 JavaScript 文件或者 CSS 文件，这时候就可以通过过滤器模块来筛选你想要的文件类型。</p><ol start="3"><li>抓图信息</li></ol><p>抓图信息区域，可以用来分析用户等待页面加载时间内所看到的内容，分析用户实际的体验情况。比如，如果页面加载 1 秒多之后屏幕截图还是白屏状态，这时候就需要分析是网络还是代码的问题了。（勾选面板上的“Capture screenshots”即可启用屏幕截图。）</p><ol start="4"><li>时间线</li></ol><p>时间线，主要用来展示 <code>HTTP</code>、<code>HTTPS</code>、<code>WebSocket</code> 加载的状态和时间的一个关系，用于直观感受页面的加载过程。如果是多条竖线堆叠在一起，那说明这些资源被同时被加载。至于具体到每个文件的加载信息，还需要用到下面要讲的详细列表</p><ol start="5"><li>详细列表</li></ol><p>这个区域是最重要的，它详细记录了每个资源从发起请求到完成请求这中间所有过程的状态，以及最终请求完成的数据信息。通过该列表，你就能很容易地去诊断一些网络问题。</p><blockquote><p>详细列表是我们本篇文章介绍的重点</p></blockquote><ol start="6"><li>下载信息概要</li></ol><p>下载信息概要中，你要重点关注下 <code>DOMContentLoaded</code> 和 <code>Load</code> 两个事件，以及这两个事件的完成时间。</p><ul><li><code>DOMContentLoaded</code>，这个事件发生后，说明页面已经构建好 <code>DOM</code> 了，这意味着构建 <code>DOM</code> 所需要的 HTML 文件、<code>JavaScript</code> 文件、<code>CSS</code> 文件都已经下载完成了</li><li><code>Load</code>，说明浏览器已经加载了所有的资源（图像、样式表等）</li></ul><blockquote><p>通过下载信息概要面板，你可以查看触发这两个事件所花费的时间</p></blockquote><h3 id="网络面板中的详细列表"><a href="#网络面板中的详细列表" class="headerlink" title="网络面板中的详细列表"></a>网络面板中的详细列表</h3><p>下面我们就来重点介绍网络面板中的详细列表，这里面包含了大量有用的信息</p><ol><li>列表的属性</li></ol><p>列表的属性比较多，比如 Name、Status、Type、Initiator 等等，这个不难理解。当然，你还可以通过点击右键的下拉菜单来添加其他属性，这里我就不再赘述了，你可以自己上手实操一下。</p><p>另外，你也可以按照列表的属性来给列表排序，默认情况下，列表是按请求发起的时间来排序的，最早发起请求的资源在顶部。当然也可以按照返回状态码、请求类型、请求时长、内容大小等基础属性排序，只需点击相应属性即可。</p><p><img src="http://blog.poetries.top/img-repo/2020/03/11.png" alt></p><ol start="2"><li>详细信息</li></ol><p>如果你选中详细列表中的一项，右边就会出现该项的详细信息，如下所示：</p><p><img src="http://blog.poetries.top/img-repo/2020/03/12.png" alt></p><p>你可以在此查看请求列表中任意一项的请求行和请求头信息，还可以查看响应行、响应头和响应体。然后你可以根据这些查看的信息来判断你的业务逻辑是否正确，或者有时候也可以用来逆向推导别人网站的业务逻辑。</p><ol start="3"><li>单个资源的时间线</li></ol><p>了解了每个资源的详细请求信息之后，我们再来分析单个资源请求时间线，这就涉及具体的 HTTP 请求流程了</p><p>在发起一个 HTTP 请求之后，浏览器首先查找缓存，如果缓存没有命中，那么继续发起 DNS 请求获取 IP 地址，然后利用 IP 地址和服务器端建立 TCP 连接，再发送 HTTP 请求，等待服务器响应；不过，如果服务器响应头中包含了重定向的信息，那么整个流程就需要重新再走一遍。这就是在浏览器中一个 HTTP 请求的基础流程。</p><blockquote><p>那详细列表中是如何表示出这个流程的呢？这就要重点看下时间线面板了</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2020/03/14.png" alt></p><p><strong>那面板中这各项到底是什么含义呢？</strong></p><blockquote><p>第一个是 Queuing，也就是排队的意思，当浏览器发起一个请求的时候，会有很多原因导致该请求不能被立即执行，而是需要排队等待。导致请求处于排队状态的原因有很多</p></blockquote><ul><li>首先，页面中的资源是有优先级的，比如 CSS、HTML、JavaScript 等都是页面中的核心文件，所以优先级最高；而图片、视频、音频这类资源就不是核心资源，优先级就比较低。通常当后者遇到前者时，就需要“让路”，进入待排队状态。</li><li>其次，我们前面也提到过，浏览器会为每个域名最多维护 6 个 TCP 连接，如果发起一个 HTTP 请求时，这 6 个 TCP 连接都处于忙碌状态，那么这个请求就会处于排队状态。</li><li>最后，网络进程在为数据分配磁盘空间时，新的 HTTP 请求也需要短暂地等待磁盘分配结束</li></ul><ol><li>等待排队完成之后，就要进入发起连接的状态了。不过在发起连接之前，还有一些原因可能导致连接过程被推迟，这个推迟就表现在面板中的Stalled上，它表示停滞的意思</li><li>接下来，就到了Initial connection/SSL 阶段了，也就是和服务器建立连接的阶段，这包括了建立 TCP 连接所花费的时间；不过如果你使用了 HTTPS 协议，那么还需要一个额外的 SSL 握手时间，这个过程主要是用来协商一些加密信息的</li><li>和服务器建立好连接之后，网络进程会准备请求数据，并将其发送给网络，这就是Request sent 阶段。通常这个阶段非常快，因为只需要把浏览器缓冲区的数据发送出去就结束了，并不需要判断服务器是否接收到了，所以这个时间通常不到 1 毫秒。</li><li>数据发送出去了，接下来就是等待接收服务器第一个字节的数据，这个阶段称为 Waiting (TTFB)，通常也称为“第一字节时间”。 <code>TTFB</code> 是反映服务端响应速度的重要指标，对服务器来说，<code>TTFB</code> 时间越短，就说明服务器响应越快</li><li>接收到第一个字节之后，进入陆续接收完整数据的阶段，也就是<code>Content Download</code> 阶段，这意味着从第一字节时间到接收到全部响应数据所用的时间</li></ol><p><strong>优化时间线上耗时项</strong></p><blockquote><p>了解了时间线面板上的各项含义之后，我们就可以根据这个请求的时间线来实现相关的优化操作了。</p></blockquote><ol><li>排队（Queuing）时间过久</li></ol><p>排队时间过久，大概率是由浏览器为每个域名最多维护 6 个连接导致的。那么基于这个原因，你就可以让 1 个站点下面的资源放在多个域名下面，比如放到 3 个域名下面，这样就可以同时支持 18 个连接了，这种方案称为域名分片技术。除了域名分片技术外，我个人还建议你把站点升级到 HTTP2，因为 HTTP2 已经没有每个域名最多维护 6 个 TCP 连接的限制了。</p><ol start="2"><li>第一字节时间（TTFB）时间过久</li></ol><p>这可能的原因有如下：</p><ul><li>服务器生成页面数据的时间过久。对于动态网页来说，服务器收到用户打开一个页面的请求时，首先要从数据库中读取该页面需要的数据，然后把这些数据传入到模板中，模板渲染后，再返回给用户。服务器在处理这个数据的过程中，可能某个环节会出问题。</li><li>网络的原因。比如使用了低带宽的服务器，或者本来用的是电信的服务器，可联通的网络用户要来访问你的服务器，这样也会拖慢网速。</li><li>发送请求头时带上了多余的用户信息。比如一些不必要的 Cookie 信息，服务器接收到这些 Cookie 信息之后可能需要对每一项都做处理，这样就加大了服务器的处理时长。</li></ul><blockquote><p>对于这三种问题，你要有针对性地出一些解决方案。面对第一种服务器的问题，你可以想办法去提高服务器的处理速度，比如通过增加各种缓存的技术；针对第二种网络问题，你可以使用 CDN 来缓存一些静态文件；至于第三种，你在发送请求时就去尽可能地减少一些不必要的 Cookie 数据信息</p></blockquote><ol start="3"><li>Content Download 时间过久</li></ol><p>如果单个请求的 <code>Content Download</code> 花费了大量时间，有可能是字节数太多的原因导致的。这时候你就需要减少文件大小，比如压缩、去掉源码中不必要的注释等方法</p><h2 id="1-3-source面板"><a href="#1-3-source面板" class="headerlink" title="1.3 source面板"></a>1.3 source面板</h2><p><img src="http://blog.poetries.top/img-repo/2020/03/40.png" alt></p><blockquote><p>我们可以在这里断点调试JS</p></blockquote><p><strong>调试JS代码</strong></p><ul><li>点击JS代码块前面的数字外来设置断点，如果当前代码是经过压缩的话，可以点击下方的花括号{}来增强可读性，所有的断点都会列出右侧的断点区。</li></ul><h3 id="1-3-1-断点调试"><a href="#1-3-1-断点调试" class="headerlink" title="1.3.1 断点调试"></a>1.3.1 断点调试</h3><h4 id="1-3-1-1-debug介绍"><a href="#1-3-1-1-debug介绍" class="headerlink" title="1.3.1.1 debug介绍"></a>1.3.1.1 debug介绍</h4><p>下图红色区域从左至右依次是：</p><ul><li>（等号）pause script execution –&gt;暂停脚本执行</li><li>（半弧箭头）step 快捷键：F9 –&gt;单步执行 注意：遇到子函数会进去继续单步执行</li><li>（下箭头）step into 快捷键：F11 全称：step into next function call –&gt;单步执行，遇到子函数就进去继续单步执行</li><li>（上箭头）step over 快捷键：F10 全称：step over next function call –&gt;单步执行，遇到子函数并不进去，将子函数执行完并将其作为一个单步</li><li>（右箭头）step out 快捷键：Shift + F11 全称：step out of current function –&gt;直接跳出当前的函数，返回父级函数</li><li>（右粗箭头，点击一下多一个斜线，再次点击就取消了）deactivate breakpoints or activate breakpoints –&gt;禁用断点/启用断点</li><li>（圆形等号）pause on execution –&gt;暂停执行</li></ul><p><img src="http://blog.poetries.top/img-repo/2020/03/15.png" alt></p><h4 id="1-3-1-2-行断点"><a href="#1-3-1-2-行断点" class="headerlink" title="1.3.1.2 行断点"></a>1.3.1.2 行断点</h4><p><strong>1. 代码行断点</strong></p><ul><li>点击 <code>Sources</code> 标签。</li><li>打开包含您想要中断的代码行的文件。</li><li>转至代码行。</li><li>代码行的左侧是行号列。 点击行号列。 行号列顶部将显示一个蓝色图标。</li></ul><p><img src="http://blog.poetries.top/img-repo/2020/03/16.png" alt></p><p><strong>2. 条件代码行断点</strong></p><blockquote><p>在代码中调用debugger 可在该行暂停。 此操作相当于使用代码行断点，只是此断点是在代码中设置，而不是在 DevTools 界面中设置。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'b'</span>);</span><br><span class="line"><span class="keyword">debugger</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'c'</span>);</span><br></pre></td></tr></table></figure><p><strong>3. 管理代码行断点</strong></p><ul><li>勾选条目旁的复选框可以停用相应的断点。</li><li>右键点击条目可以移除相应的断点。</li><li>点击代码可以跳转到断点对应位置</li></ul><p><img src="http://blog.poetries.top/img-repo/2020/03/17.png" alt></p><blockquote><p>右键点击 Breakpoints 窗格中的任意位置可以取消激活所有断点、停用所有断点，或移除所有断点。 停用所有断点相当于取消选中每个断点。 取消激活所有断点可让 DevTools 忽略所有代码行断点，但同时会继续保持其启用状态，以使这些断点的状态与取消激活之前相同。</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2020/03/18.png" alt></p><h4 id="1-3-1-3-DOM-更改断点"><a href="#1-3-1-3-DOM-更改断点" class="headerlink" title="1.3.1.3 DOM 更改断点"></a>1.3.1.3 DOM 更改断点</h4><p><strong>设置 DOM 更改断点：</strong></p><ul><li>点击 Elements 标签。</li><li>转至要设置断点的元素。</li><li>右键点击此元素。</li><li>将鼠标指针悬停在 Break on 上，然后选择 Subtree modifications、Attribute modifications 或 Node removal</li></ul><blockquote><ul><li>Subtree modifications：在移除或添加当前所选节点的子级，或更改子级内容时触发这类断点。 在子级节点属性发生变化或对当前所选节点进行任何更改时不会触发这类断点。</li><li>Attributes modifications：在当前所选节点上添加或移除属性，或属性值发生变化时触发这类断点。</li><li>Node Removal：在移除当前选定的节点时会触发</li></ul></blockquote><p><img src="http://blog.poetries.top/img-repo/2020/03/19.png" alt></p><blockquote><p>图为DOM断点在source面板的窗格</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2020/03/20.png" alt></p><h4 id="1-3-1-4-XHR-Fetch-断点"><a href="#1-3-1-4-XHR-Fetch-断点" class="headerlink" title="1.3.1.4 XHR/Fetch 断点"></a>1.3.1.4 XHR/Fetch 断点</h4><ul><li>点击 <code>Sources</code> 标签。</li><li><code>XHR Breakpoints</code> 窗格。</li><li>点击 <code>Add breakpoint</code>。</li><li>输入要对其设置断点的字符串。 <code>DevTools</code>会在 XHR 的请求网址的任意位置显示此字符串时暂停。</li><li>按 Enter 键以确认。</li></ul><p><img src="http://blog.poetries.top/img-repo/2020/03/21.png" alt></p><h4 id="1-3-1-5-事件侦听器断点"><a href="#1-3-1-5-事件侦听器断点" class="headerlink" title="1.3.1.5 事件侦听器断点"></a>1.3.1.5 事件侦听器断点</h4><ul><li>点击 <code>Sources</code> 标签。</li><li>展开 <code>Event Listener Breakpoints</code> 窗格。 <code>DevTools</code> 会显示 <code>Animation</code> 等事件类别列表。</li><li>勾选这些类别之一以在触发该类别的任何事件时暂停，或者展开类别并勾选特定事件</li></ul><p><img src="http://blog.poetries.top/img-repo/2020/03/22.png" alt></p><h4 id="1-3-1-6-异常断点"><a href="#1-3-1-6-异常断点" class="headerlink" title="1.3.1.6 异常断点"></a>1.3.1.6 异常断点</h4><blockquote><p>引发已捕获或未捕获异常的代码行暂停，可以使用异常断点。</p></blockquote><ul><li>点击 Sources 标签。</li><li>点击 Pause on exceptions 引发异常时暂停。 启用后，此按钮变为蓝色</li></ul><p><img src="http://blog.poetries.top/img-repo/2020/03/23.png" alt></p><h3 id="1-3-2-Filesystem"><a href="#1-3-2-Filesystem" class="headerlink" title="1.3.2 Filesystem"></a>1.3.2 Filesystem</h3><blockquote><p>在 Chrome DevTools上调试 css 或 JavaScript时，修改的属性值在重新刷新页面时，所有的修改都会被重置。如果你想把修改的值保存下来并且同步到本地，可以使用Source的Filesystem，来与本地目录进行映射，前提是必须拥有，如果本地没有代码，那么更改不会被保存同步</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2020/03/24.png" alt></p><h3 id="1-3-3-Overrides"><a href="#1-3-3-Overrides" class="headerlink" title="1.3.3 Overrides"></a>1.3.3 Overrides</h3><blockquote><p>与Filesystem的区别，Filesystem必须在本地有源代码，Overrides则不需要。</p></blockquote><p>写在 Chrome DevTools上调试 css 或 JavaScript时，修改的属性值在重新刷新页面时，所有的修改都会被重置。如果你想把修改的值保存下来，刷新页面的时候不会被重置，可以使用Overrides</p><h3 id="1-3-4-Snippets-随时编写代码"><a href="#1-3-4-Snippets-随时编写代码" class="headerlink" title="1.3.4 Snippets 随时编写代码"></a>1.3.4 Snippets 随时编写代码</h3><ul><li><code>Chrome</code>在<code>souces</code>页面提供<code>snippets</code>一栏，这里我们可以随时编写<code>JS</code>代码，运行结果会打印到控制台。代码是全局保存的，我们在任何页面，包括新建标签页，都可以查看或运行这些代码。</li><li>我们不再需要为了运行一小段<code>JS</code>代码而新建一个<code>HTML</code>页面。<code>snippets</code>的方便之处在于，你只需要打开<code>chrome</code>就可以编写一份任意页面都可以运行的<code>JS</code>代码</li></ul><h1 id="二、vConsole调试"><a href="#二、vConsole调试" class="headerlink" title="二、vConsole调试"></a>二、vConsole调试</h1><blockquote><p>vConsole是腾讯出的一个轻量、可拓展、针对手机网页的前端开发者调试面板</p></blockquote><h2 id="2-1-特性"><a href="#2-1-特性" class="headerlink" title="2.1 特性"></a>2.1 特性</h2><ul><li>查看 console 日志</li><li>查看网络请求</li><li>查看页面 element 结构</li><li>查看 Cookies 和 localStorage</li><li>手动执行 JS 命令行</li><li>自定义插件</li></ul><p><strong>使用场景</strong></p><ul><li>移动端调试</li><li>小程序端调试</li></ul><h2 id="2-2-使用方式"><a href="#2-2-使用方式" class="headerlink" title="2.2 使用方式"></a>2.2 使用方式</h2><h3 id="2-2-1-初始化配置"><a href="#2-2-1-初始化配置" class="headerlink" title="2.2.1 初始化配置"></a>2.2.1 初始化配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vconsole</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//import vconsole</span></span><br><span class="line"><span class="keyword">import</span> VConsole <span class="keyword">from</span> <span class="string">'vconsole/dist/vconsole.min.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> VConsole(option) <span class="comment">// 初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// option 是一个选填的 object 对象，具体配置定义请参阅 公共属性及方法</span></span><br></pre></td></tr></table></figure><blockquote><p>或者找到这个模块下面的 <code>dist/vconsole.min.js</code> ，然后复制到自己的项目中</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/vconsole.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--建议在 `&lt;head&gt;` 中引入哦~ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 初始化</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vConsole = <span class="keyword">new</span> VConsole();</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'VConsole is cool'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在手动 new 实例化之前，<code>vConsole</code> 不会被插入到网页中</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2020/03/25.png" alt><br><img src="http://blog.poetries.top/img-repo/2020/03/26.png" alt></p><p><strong>日志类型</strong></p><blockquote><p>支持 5 种不同类型的日志，会以不同的颜色输出到前端面板</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'foo'</span>);   <span class="comment">// 白底黑字</span></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'bar'</span>);  <span class="comment">// 白底紫字</span></span><br><span class="line"><span class="built_in">console</span>.debug(<span class="string">'oh'</span>);  <span class="comment">// 白底黄字</span></span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">'foo'</span>);  <span class="comment">// 黄底黄字</span></span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">'bar'</span>); <span class="comment">// 红底红字</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-Object-Array-结构化展示"><a href="#2-2-2-Object-Array-结构化展示" class="headerlink" title="2.2.2 Object/Array 结构化展示"></a>2.2.2 Object/Array 结构化展示</h3><blockquote><p>支持打印 <code>Object</code> 或 <code>Array</code> 变量，会以结构化 JSON 形式输出（并折叠）：</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.foo = <span class="string">'bar'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Object</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  foo: "bar"</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3-支持传入多个参数"><a href="#2-2-3-支持传入多个参数" class="headerlink" title="2.2.3 支持传入多个参数"></a>2.2.3 支持传入多个参数</h3><blockquote><p>支持传入多个参数，会以空格隔开：</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> uid = <span class="number">233</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'UserID:'</span>, uid); <span class="comment">// 打印出 UserID: 233</span></span><br></pre></td></tr></table></figure><h3 id="2-2-4-特殊格式"><a href="#2-2-4-特殊格式" class="headerlink" title="2.2.4 特殊格式"></a>2.2.4 特殊格式</h3><blockquote><p>支持使用 <code>[system]</code> 作为第一个参数，来将 log 输出到 System 面板：</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 'foo' 会输出到 System 面板</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'[system]'</span>, <span class="string">'foo'</span>);</span><br></pre></td></tr></table></figure><h2 id="2-3-内置插件"><a href="#2-3-内置插件" class="headerlink" title="2.3 内置插件"></a>2.3 内置插件</h2><blockquote><p>所有 <code>XMLHttpRequest</code> 请求都会被显示到 <code>Network tab</code> 中</p></blockquote><blockquote><p>若不希望一个请求显示在面板中，可添加属性 <code>_noVConsole = true</code> 到 XHR 对象中</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr._noVConsole = <span class="literal">true</span>; <span class="comment">// 不会显示到 tab 中</span></span><br><span class="line">xhr.open(<span class="string">"GET"</span>, <span class="string">'http://example.com/'</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><blockquote><p>更多详情 <a href="https://github.com/Tencent/vConsole/blob/dev/doc/tutorial_CN.md" target="_blank" rel="noopener">https://github.com/Tencent/vConsole/blob/dev/doc/tutorial_CN.md</a></p></blockquote><h1 id="三、webview调试"><a href="#三、webview调试" class="headerlink" title="三、webview调试"></a>三、webview调试</h1><h2 id="3-1-webview-介绍"><a href="#3-1-webview-介绍" class="headerlink" title="3.1 webview 介绍"></a>3.1 webview 介绍</h2><blockquote><p>webview本身是一个view，以webkit作为核心的，用来显示网页，包含了浏览器的基本功能</p></blockquote><ul><li>是 app 中的一个组件（ app 可以有 webview ，也可以没有）</li><li>用于加载 h5 页面，即一个小型的浏览器内核</li></ul><p><img src="http://blog.poetries.top/img-repo/2020/03/27.png" alt><br><img src="http://blog.poetries.top/img-repo/2020/03/28.png" alt></p><h2 id="3-2-原理"><a href="#3-2-原理" class="headerlink" title="3.2 原理"></a>3.2 原理</h2><h3 id="3-2-1-file-协议"><a href="#3-2-1-file-协议" class="headerlink" title="3.2.1 file 协议"></a>3.2.1 file 协议</h3><blockquote><p><code>file</code> 协议：本地文件，快</p></blockquote><ul><li>其实在一开始接触 <code>html</code>开发，就已经使用了 <code>file</code> 协议</li><li>只不过你当时没有“协议”“标准”等这些概念</li></ul><p><img src="http://blog.poetries.top/img-repo/2020/03/29.png" alt></p><h3 id="3-2-2-具体实现"><a href="#3-2-2-具体实现" class="headerlink" title="3.2.2 具体实现"></a>3.2.2 具体实现</h3><ul><li>不是所有场景都适合使用 hybrid</li><li>使用 NA ：体验要求极致，变化不频繁（无头条的首页）</li><li>使用 hybrid ：体验要求高，变化频繁（如头条的新闻详情页）</li><li>使用 h5：体验无要求，不常用（如举报、反馈等页面）</li></ul><p><strong>实现</strong></p><ul><li>前端做好静态页面（html js css），将文件交给客户端</li><li>客户端拿到前端静态页面，以文件形式存储在 app 中</li><li>客户端在一个 webview 中</li><li>使用 file 协议加载静态页面</li></ul><p><img src="http://blog.poetries.top/img-repo/2020/03/30.png" alt></p><h2 id="3-3-webview的基本使用"><a href="#3-3-webview的基本使用" class="headerlink" title="3.3 webview的基本使用"></a>3.3 webview的基本使用</h2><ol><li>webview显示外部网页</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webview.loadUrl(&apos;https://baidu.com&apos;)</span><br></pre></td></tr></table></figure><ol start="2"><li>webview加载本地资源</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webview.loadUrl(&apos;file:///android_asset/test.html&apos;)</span><br></pre></td></tr></table></figure><ol start="3"><li>webview显示html语句</li></ol><blockquote><p>可以显示富文本的格式</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var testHTML = &lt;html&gt;&lt;body&gt;</span><br><span class="line">  &lt;p&gt;test&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">webview.loadUrl(testHTML,&apos;text/html&apos;,null)</span><br></pre></td></tr></table></figure><h2 id="3-4-webview中如何调试"><a href="#3-4-webview中如何调试" class="headerlink" title="3.4 webview中如何调试"></a>3.4 webview中如何调试</h2><ul><li>在PC端，我们调试网页一般直接打开chrome或者firefox的开发者工具就OK了，chrome也有手机模式，可以粗略地预览下移动网页，但是这都太粗糙了，PC上看到的，和移动设备上看到的页面，可能根本不是一回事，并且放入webview之后，也可能大变样，并且还会经历数不清的设备兼容性问题，我们需要能够在PC端，直接调试移动设备上的网页，甚至直接调试app中的webview</li><li>使用Chrome Inspect调试混合应用可以帮助我们排查问题。例如定位元素，快速修改CSS样式并实时查看效果。其实微信开发也是一种混合开发模式，微信可以看做一个原生的Android App搭配了一个JS运行环境（WebView），然后大家就可以愉快地使用Web前端技术（Html/Css/Js）开发微信网页、小程序了</li></ul><h3 id="3-4-1-安卓中webview调试"><a href="#3-4-1-安卓中webview调试" class="headerlink" title="3.4.1 安卓中webview调试"></a>3.4.1 安卓中webview调试</h3><h4 id="3-4-1-1-基础调试"><a href="#3-4-1-1-基础调试" class="headerlink" title="3.4.1.1 基础调试"></a>3.4.1.1 基础调试</h4><blockquote><p>无论是调试<code>Web</code>页面还是调试<code>Hybrid</code>混合应用，只要是调试<code>Android</code>的<code>webview</code>，都需要使用<code>Chrome://inspect</code>进行调试。</p></blockquote><p><strong>Google提供的调试Android上WebView的步骤</strong></p><ol><li>开启手机上的USB调试功能</li><li>打开Chrome浏览器，地址栏输入：<code>Chrome://inspect</code>，回车</li><li><code>Chrome</code>会自动检测手机上打开的<code>App</code>，并列出可调试的<code>WebView</code>页面</li><li>点击<code>Inspect</code>。出现空白页面的话(国内开发者经常会出现<code>404 Not Found</code>错误)</li></ol><p><img src="http://blog.poetries.top/img-repo/2020/03/45.png" alt></p><p><img src="http://blog.poetries.top/img-repo/2020/03/46.png" alt></p><blockquote><p>问题就出现在这里，对于国内的程序猿来说，由于无法访问 <code>https://chrome-devtools-frontend.appspot.com</code>，只能出现空白页面：</p></blockquote><p>Chrome为什么要去访问那个网址呢？而不是提供本地的解决方案？可能是是版本问题，对于海量版本，都打包到Chrome安装程序里，势必会大大增加安装包的体积。例如上面的 @640一串字符，就是其中的一个版本号，当你换一个手机或模拟器，版本号可能就不一样了。因为不同型号的手机生产商可能会打包不同版本的chrome浏览器内</p><p><strong>解决方法有两种：</strong></p><ol><li>最直接的方法：翻墙。翻墙最大的问题免费的不稳定</li><li>使用离线开发者调试工具包</li></ol><blockquote><p>由于是离线包，当你点击Inspect时就不用再去Google下载了，而是直接从本地加载。从而达到了不FQ使用Inspect调试的目的</p></blockquote><h4 id="3-4-1-2-Chrome-Inspect不显示Webview页面的问题总结"><a href="#3-4-1-2-Chrome-Inspect不显示Webview页面的问题总结" class="headerlink" title="3.4.1.2  Chrome Inspect不显示Webview页面的问题总结"></a>3.4.1.2  Chrome Inspect不显示Webview页面的问题总结</h4><blockquote><p>首先，确保手机打开了USB调试。如果还是检测不到WebView页面，主要有以下几种情况</p></blockquote><ul><li>反应慢，稍等一会</li><li>关闭然后重新打开USB调试开关，刺激一下chrome，我的魅族手机有时需要这样操作一下。</li><li>华为手机，打开USB调试和仅充电模式下允许ADB调试。如下图所示</li></ul><p><img src="http://blog.poetries.top/img-repo/2020/03/42.png" alt></p><blockquote><p>如果还不行，请安装华为手机助手，插上手机后会提示安装的。不安装的话，可能会出现不稳定的情况。</p></blockquote><p>如果手机型号识别了，但是没有识别WebView。可能是要调试的APP没有打开WebView的调试模式。会出现有的App能Inspect，有的不能</p><h4 id="3-4-1-3-Cordova-Ionic开发的Android-APP启用Chrome-Inspect调试的方法"><a href="#3-4-1-3-Cordova-Ionic开发的Android-APP启用Chrome-Inspect调试的方法" class="headerlink" title="3.4.1.3 Cordova/Ionic开发的Android APP启用Chrome Inspect调试的方法"></a>3.4.1.3 Cordova/Ionic开发的Android APP启用Chrome Inspect调试的方法</h4><blockquote><p><code>Cordova/Ionic</code>开发的<code>Android APP</code>，需要启用WebView的调试模式，才可以在Chrome浏览器中输入<code>chrome://Inspect</code>，然后使用大家熟悉的开发者工具进行调试。不启用的话，就看不到App中的WebView页面，也没有Inspect链接</p></blockquote><ul><li>确保Android版本4.4以上</li><li>打开scr下的主活动文件，如MainActivity.java，导入名称空间</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Build;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.content.pm.ApplicationInfo;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebView;</span><br></pre></td></tr></table></figure><p><img src="http://blog.poetries.top/img-repo/2020/03/44.png" alt></p><blockquote><p>找到<code>onCreate()</code> 方法，添加如下代码</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> != (getApplicationInfo().flags = ApplicationInfo.FLAG_DEBUGGABLE))&#123;</span><br><span class="line">        Log.i(<span class="string">"Your app"</span>, <span class="string">"Enabling web debugging"</span>);</span><br><span class="line">        WebView.setWebContentsDebuggingEnabled(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-1-4-演示"><a href="#3-4-1-4-演示" class="headerlink" title="3.4.1.4 演示"></a>3.4.1.4 演示</h4><blockquote><p>下面我们以微信app为例子，调试app内的webview</p></blockquote><p>按步骤依次操作</p><ol><li>开启手机上的USB调试功能</li><li>打开Chrome浏览器，地址栏输入：<code>Chrome://inspect</code>，回车</li><li><code>Chrome</code>会自动检测手机上打开的<code>App</code>，并列出可调试的<code>WebView</code>页面</li><li>在手机上给自己微信发送该地址打开 <code>http://debugx5.qq.com</code> 打开调试</li></ol><blockquote><p>如果不打开TBS开关，Inspect时会检测不到任何微信的H5页面</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2020/03/49.png" alt><br><img src="http://blog.poetries.top/img-repo/2020/03/50.png" alt><br><img src="http://blog.poetries.top/img-repo/2020/03/47.png" alt><br><img src="http://blog.poetries.top/img-repo/2020/03/48.png" alt></p><h3 id="3-4-2-IOS中webview调试"><a href="#3-4-2-IOS中webview调试" class="headerlink" title="3.4.2 IOS中webview调试"></a>3.4.2 IOS中webview调试</h3><blockquote><p><code>IOS</code>中<code>webview</code>以及<code>IOS</code>中<code>safari</code>如何在<code>Mac</code>中采用<code>safari</code>调试</p></blockquote><p><strong>环境</strong></p><ul><li><code>iphone</code></li><li><code>mac</code>电脑</li></ul><ol><li>在iphone中设置safari，开启web检查</li></ol><p><img src="http://blog.poetries.top/img-repo/2020/03/31.png" alt></p><ol start="2"><li><code>USB</code>线连上<code>Mac</code>，然后打开Mac中的safari，点开开发者工具，就可以看到你的移动设备，然后可以调试其中的网页和webview</li></ol><p><img src="http://blog.poetries.top/img-repo/2020/03/32.png" alt></p><blockquote><p>就这样简单两步，就可对<code>ios</code>设备进行真机调试</p></blockquote><h1 id="四、nodejs调试"><a href="#四、nodejs调试" class="headerlink" title="四、nodejs调试"></a>四、nodejs调试</h1><p>为了方便讲解，我们新建了一个项目</p><p><a href="https://github.com/tomoat/koa2-generator" target="_blank" rel="noopener">https://github.com/tomoat/koa2-generator</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">koa2 -e koa2-demo</span><br></pre></td></tr></table></figure><h2 id="4-1-打日记形式"><a href="#4-1-打日记形式" class="headerlink" title="4.1 打日记形式"></a>4.1 打日记形式</h2><blockquote><p>回顾下，我们平时的调试方式</p></blockquote><ul><li>在某个需要输入的地方输入 <code>console.log()</code> <code>console.dir()</code>，打印调试结果</li><li>引入 <code>asserts</code> 模块，对调试区域进行 <code>debug</code></li></ul><blockquote><p>这两种调试方式，都需要我们显式将各种 <code>debug</code> 信息嵌入到我们的业务逻辑代码中。这种方式平时使用也是可以的，但是在复杂项目中，不是太方便</p></blockquote><h2 id="4-2-调试方式"><a href="#4-2-调试方式" class="headerlink" title="4.2 调试方式"></a>4.2 调试方式</h2><h3 id="4-2-1-chrome-devtools调试"><a href="#4-2-1-chrome-devtools调试" class="headerlink" title="4.2.1 chrome devtools调试"></a>4.2.1 chrome devtools调试</h3><p><strong>–inspect 方式调试</strong></p><ul><li>使用Inspector调试Node.js的优势<ul><li>可查看当前上下文的变量</li><li>可以观察当前函数调用堆栈</li><li>不会侵入代码</li><li>可以在暂停状态下执行一些指定代码</li></ul></li></ul><blockquote><p>新版本的<code>Chrome</code>浏览器和新版本的<code>Node.js</code>支持通过一个新的调试协议能互相直接通讯了，就不再需要<code>node-inspector</code>了</p></blockquote><ul><li><code>nodejs 6.3+</code></li><li><code>Chrome 55+</code></li></ul><blockquote><p>以上面的例子为例，运行<code>node --inspect bin/www</code> Node进程通过<code>WebSockets</code>监听调试客户端信息</p></blockquote><ul><li><code>--inspect</code>参数是启动调试模式必需的。打开浏览器访问<code>http://127.0.0.1:3000</code></li></ul><p><strong>inspector原理</strong></p><blockquote><p><code>--inspect</code>激活调试后</p></blockquote><ul><li>启动<code>websocket</code>服务，监听命令</li><li><code>HTTP</code>服务,元信息</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ node --inspect bin/www</span><br><span class="line"></span><br><span class="line"># facbf3d7-96a3-4a55-b628-67bfe9790d6a是userId 每个程序都不一样</span><br><span class="line"></span><br><span class="line">Debugger listening on ws://127.0.0.1:9229/facbf3d7-96a3-4a55-b628-67bfe9790d6a</span><br><span class="line">For help see https://nodejs.org/en/docs/inspector</span><br><span class="line">listen 3000 port: http://localhost:3000</span><br></pre></td></tr></table></figure><blockquote><p>打开<a href="http://127.0.0.1:9229/json可以看到http服务的一些元信息" target="_blank" rel="noopener">http://127.0.0.1:9229/json可以看到http服务的一些元信息</a></p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[ &#123;</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"node.js instance"</span>,</span><br><span class="line">  <span class="attr">"devtoolsFrontendUrl"</span>: <span class="string">"chrome-devtools://devtools/bundled/inspector.html?experiments=true&amp;v8only=true&amp;ws=127.0.0.1:9229/facbf3d7-96a3-4a55-b628-67bfe9790d6a"</span>,</span><br><span class="line">  <span class="attr">"faviconUrl"</span>: <span class="string">"https://nodejs.org/static/favicon.ico"</span>,</span><br><span class="line">  <span class="attr">"id"</span>: <span class="string">"facbf3d7-96a3-4a55-b628-67bfe9790d6a"</span>,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"bin/www"</span>,</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"node"</span>,</span><br><span class="line">  <span class="attr">"url"</span>: <span class="string">"file:///Users/poetry/workspace/work/jiazhaoye/share/koa2-demo/bin/www"</span>,</span><br><span class="line">  <span class="attr">"webSocketDebuggerUrl"</span>: <span class="string">"ws://127.0.0.1:9229/facbf3d7-96a3-4a55-b628-67bfe9790d6a"</span></span><br><span class="line">&#125; ]</span><br></pre></td></tr></table></figure><blockquote><p>inspect命令参数详情 <a href="https://nodejs.org/zh-cn/docs/guides/debugging-getting-started" target="_blank" rel="noopener">https://nodejs.org/zh-cn/docs/guides/debugging-getting-started</a></p></blockquote><p><strong>调试面板打开方式</strong></p><ol><li>访问<code>chrome://inspect</code></li></ol><p><img src="http://blog.poetries.top/img-repo/2020/03/debug.png" alt></p><ol start="2"><li>chrome开发者工具，点击node图标也可以进入开发者模式</li></ol><p><img src="http://blog.poetries.top/img-repo/2020/03/debug2.png" alt></p><ol start="3"><li>访问<code>127.0.0.1:9229/json</code>元信息中的 <code>devtoolsFrontendUrl</code>地址即可</li></ol><p>调试工具有四个面板，其实就是开发者工具的定制版，省去了很多没用到的功能  </p><p><img src="http://blog.poetries.top/img-repo/2020/03/debug3.png" alt></p><ul><li><code>Console</code>：控制台</li><li><code>Memory</code>：内存</li><li><code>Profiler</code>：性能</li><li><code>Sources</code>：源码</li></ul><p>这里主要介绍sources中设置断点的形式</p><p><img src="http://blog.poetries.top/img-repo/2020/03/debug4.png" alt></p><blockquote><p>可以看到右侧面板的一些变量的状态，我们也可以在<code>watch</code>的那栏添加需要监听的变量</p></blockquote><p><strong>调试没有–inspect激活的node程序</strong></p><ol><li>首先正常启动程序</li><li>查找上面脚本的进程号</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps ax | grep bin/www</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到，node程序进程号是53999</span></span><br><span class="line">90581 s002  R+     0:00.00 grep --color=auto bin/www</span><br><span class="line">53999 s003  S+     0:02.62 node --inspect bin/www</span><br></pre></td></tr></table></figure><blockquote><p>接着执行 <code>node -e &#39;process._debugProcess(53999)&#39;</code> ，上面命令会建立进程 53999 与调试工具的连接，然后就可以打开调试工具了</p></blockquote><h3 id="4-2-2-VSCode配置启动入口"><a href="#4-2-2-VSCode配置启动入口" class="headerlink" title="4.2.2 VSCode配置启动入口"></a>4.2.2 VSCode配置启动入口</h3><blockquote><p>之前的方式在实际开发中不太方便，那有没有更好的方式呢，答案是肯定的。我们可以通过<code>vscode</code>、<code>webstom</code>在代码中调试</p></blockquote><ol><li>打开项目，点击旁边的调试按钮</li><li>配置<code>vscode</code> <code>launch.json</code>文件</li><li>打断点</li><li>启动项目</li><li>打开 <code>http://localhost:3000/poetries</code></li></ol><p><img src="http://blog.poetries.top/img-repo/2020/03/debug5.png" alt></p><blockquote><p>把项目跑起来，我们就可以调试代码了，非常方便</p></blockquote><p>进入断点，调试界面如下</p><p><img src="http://blog.poetries.top/img-repo/2020/03/debug6.png" alt></p><ul><li>在界面的左边，可以查看当前上下文环境，也可以设置变量监听</li><li>将鼠标防止在断点前的变量或者参数上，也可以查看该变量当前的数值，体验与<code>Chrome</code>开发者工具的调试一致</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、Chrome-devtool调试&quot;&gt;&lt;a href=&quot;#一、Chrome-devtool调试&quot; class=&quot;headerlink&quot; title=&quot;一、Chrome devtool调试&quot;&gt;&lt;/a&gt;一、Chrome devtool调试&lt;/h1&gt;&lt;p&gt;Chrome
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="前端调试" scheme="http://blog.poetries.top/tags/%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>关键路径渲染优化</title>
    <link href="http://blog.poetries.top/2020/01/28/render-path-optimize/"/>
    <id>http://blog.poetries.top/2020/01/28/render-path-optimize/</id>
    <published>2020-01-28T03:24:08.000Z</published>
    <updated>2020-07-24T04:13:35.053Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>浏览器从获取 HTML到最终在屏幕上显示内容需要完成以下步骤：</p></blockquote><ul><li>处理 HTML 标记并构建 DOM 树。</li><li>处理 CSS 标记并构建 CSSOM 树。</li><li>将 DOM 与 CSSOM 合并成一个 render tree。</li><li>根据渲染树来布局，以计算每个节点的几何信息。</li><li>将各个节点绘制到屏幕上。</li></ul><p>经过以上整个流程我们才能看见屏幕上出现渲染的内容，<strong>优化关键渲染路径就是指最大限度缩短执行上述第 1 步至第 5步耗费的总时间</strong>，让用户最快的看到首次渲染的内容</p><blockquote><p>CSSOM 的构建会阻塞 HTML 的渲染，也会阻塞 JS 的执行，JS 的下载与执行（内联及外部样式表）也会阻塞 HTML 的渲染</p></blockquote><h3 id="优化方法"><a href="#优化方法" class="headerlink" title="优化方法"></a>优化方法</h3><blockquote><p>为尽快完成首次渲染，我们需要最大限度减小以下三种可变因素</p></blockquote><ul><li>关键资源的数量：可能阻止网页首次渲染的资源</li><li>关键路径长度：获取所有关键资源所需的往返次数或总时间。</li><li>关键字节的数量：实现网页首次渲染所需的总字节数，它是所有关键资源传送文件大小的总和。我们包含单个 HTML 页面的第一个示例包含一项关键资源（HTML 文档）；关键路径长度也与 1 次网络往返相等（假设文件较小），而总关键字节数正好是 HTML 文档本身的传送大小</li></ul><p><strong>优化关键渲染路径的常规步骤如下</strong></p><ul><li>对关键路径进行分析和特性描述：资源数、字节数、长度</li><li>最大限度减少关键资源的数量：删除它们，延迟它们的下载，将它们标记为异步等</li><li>优化关键字节数以缩短下载时间（往返次数）</li><li>优化其余关键资源的加载顺序：您需要尽早下载所有关键资产，以缩短关键路径长度</li></ul><p><strong>关键 CSS</strong></p><blockquote><p>样式表会阻塞渲染，在加载完毕之前是不会显示的，为了让用户以最快的速度看到页面上的内容，可以将页面的某一部分的样式抽离出来，单独放在一个样式表中或者内联在页面中，这样的样式称为关键样式，这部分样式会优先它可以是页面的骨架屏或者是用户刚加载进页面时看到的首屏的内容。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;style&gt; /* inlined critical CSS */ &lt;/style&gt;</span><br><span class="line">  &lt;script&gt; loadCSS(&apos;non-critical.css&apos;); &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  ...body goes here</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>预加载 —— preload &amp; prefetch</strong></p><blockquote><p>使用 preload meta 来提升资源加载的优先级</p></blockquote><ul><li><code>preload</code> 会提升资源的优先级因为它标明这个资源是本页肯定会用到 —— 本页优先</li><li><code>prefetch</code> 会降低这个资源的优先级因为它标明这个资源是下一页可能用到的 —— 为下一页提前加载</li><li><code>preload</code> 最大的作用就是将下载与执行分离，并且将下载的优先级提到了一个很高的地步，再由我们去控制资源执行的位置</li></ul><p><strong>加速样式表下载</strong></p><blockquote><p>样式表是阻塞页面呈现的（注意是呈现，不是解析），正常通过 <code>link</code> 加载的外部样式表要等下载，构建 <code>CSSOM</code> 树才会让页面呈现完成，但是 <code>preload</code> 能够让样式表的下载和呈现分离</p></blockquote><p>试想，当你在页面的 head 中写了如下的两个样式表</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link href=&quot;critial.css&quot; rel=&quot;stylesheet&quot; /&gt;</span><br><span class="line">&lt;link href=&quot;non-critial.css&quot; rel=&quot;stylesheet&quot; /&gt;</span><br></pre></td></tr></table></figure><ul><li>第一个是关键 <code>CSS</code>，第二个不是关键 CSS，当页面解析了这两个 <code>link</code> 标签后开始下载，但是即使 <code>critical.css</code> 下载解析完毕也不会呈现页面，因为页面还要下载和解析 <code>non-critical.css</code>。</li><li>这时候，就要将 <code>non-critial.css</code> 作为预加载，当样式表作为被 <code>preload</code> 后，他就不会再阻塞页面的呈现，也就是所谓的异步下载，修改后的代码如下：</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"critial.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">href</span>=<span class="string">"non-critial.css"</span> <span class="attr">as</span>=<span class="string">"style"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"non-critial.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如此一来，页面在解析完 <code>critical.css</code> 之后就会呈现（暂不考虑脚本），而 <code>non-critial</code> 也在下载，但是并不阻塞页面，指导它下载和解析完毕后才会应用到页面上</p></blockquote><blockquote><p>现在并不是所有的浏览器都支持 <code>preload</code>，我们可以用 <code>loadCSS</code> 这个库来做 <code>polyfill</code>，其实现的思路也是遍历所有带 <code>preload</code>和 as 的标签，然后修改标签的 <code>media</code> 为不匹配任何条件并开始下载，在下载完毕后再还原该 link 原来的 media 标签将它应用</p></blockquote><p><strong>加速脚本下载</strong></p><blockquote><p><code>preload</code> 将脚本的加载及执行分离，加了 <code>preload</code> 的 <code>&lt;link&gt;</code> 标签的作用是将脚本提到高优先级尽快完成下载，但并未执行。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;preload&quot; href=&quot;//cdn.staticfile.org/jquery/3.2.1/jquery.min.js&quot; as=&quot;script&quot; /&gt;</span><br></pre></td></tr></table></figure><blockquote><p>还需要在你想要他执行的地方引入一个正常的 <code>&lt;script&gt;</code> 标签执行这个脚本</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.staticfile.org/jquery/3.2.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>否则 chrome 大约会在 3s 后报一个 warning 来提醒你这个资源被浪费了完全没有被使用到</p></blockquote><p><strong>preload 的功能听起来很像被 defer 的脚本，但是</strong></p><ul><li><code>defer</code> 无法控制脚本执行的时机，是在 <code>DOMContentLoaded</code> 执行前触发</li><li><code>defer</code> 会阻塞 <code>DOMContentLoaded</code> 事件</li><li><code>defer</code> 会阻塞 <code>onload</code> 事件，<code>preload</code> 不会阻塞 <code>onload</code> 事件</li><li><code>defer</code> 的脚本下载的优先级是 <code>low</code>，<code>preload</code> 的脚本优先级是 <code>high</code></li></ul><p><strong>加速字体下载</strong></p><blockquote><p>自定义的字体在加载之前会处于 FOIT（Flash of Invisible Text）现象，虽然我们可以使用类似 webFont 一类的库来控制字体的闪现和添加钩子函数，但最佳解决方法还是让字体的加载达到最快的速度。</p></blockquote><p>使用 <code>preload</code> 也可以来加速字体的下载，在 <code>head</code> 中声明 <code>preload</code>，比先下载样式表再从中读到 <code>@font-face</code> 的 src 再去加载要快得多</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;preload&quot; as=&quot;font&quot; href=&quot;https://at.alicdn.com/t/font_zck90zmlh7hf47vi.woff&quot;&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>preload</code> 字体不带 <code>crossorigin</code> 也将会二次获取！ 确保你对 <code>preload</code> 的字体添加 <code>crossorigin</code> 属性，否则他会被下载两次，这个请求使用匿名的跨域模式。这个建议也适用于字体文件在相同域名下，也适用于其他域名的获取(比如说默认的异步获取)。</p></blockquote><blockquote><p><code>preload</code> 如果不带 <code>crossorigin meta</code> ，默认情况下 （即未指定 <code>crossorigin</code> 属性时）, CORS 根本不会使用，这样 http 的 <code>request header</code> 中就不会有 origin，默认不去跨域，但是 <code>@font-face</code> 中去加载字体是默认跨域请求的，所以会造成两次的 <code>request header</code>不同，无法命中缓存，造成重复请求。</p></blockquote><p>解决方法就是带上 <code>crossorigin</code>，</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">as</span>=<span class="string">"font"</span> <span class="attr">href</span>=<span class="string">"//at.alicdn.com/t/font_327081_19o9k2m6va4np14i.woff"</span> <span class="attr">crossorigin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">as</span>=<span class="string">"font"</span> <span class="attr">href</span>=<span class="string">"//at.alicdn.com/t/font_327081_19o9k2m6va4np14i.woff"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">as</span>=<span class="string">"font"</span> <span class="attr">href</span>=<span class="string">"//at.alicdn.com/t/font_327081_19o9k2m6va4np14i.woff"</span> <span class="attr">crossorigin</span>=<span class="string">"fi3ework"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>空关键字和无效关键字都会被当做 <code>anonymous</code></p></blockquote><p><strong>其他资源</strong></p><ul><li><code>preload</code> 不仅可以将这些在 <code>head</code> 中的资源加速，还可以提前加载一些隐藏在 CSS 和 JS 中的资源，比如刚才隐藏在 CSS 中的字体资源，或者 JS 中请求的资源。</li><li><code>preload</code> 的标签可以动态生成，这意味着在任何时候你都可以在页面中提前加载但不执行一个脚本，然后通过动态脚本来立刻执行它</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> preload = <span class="built_in">document</span>.createElement(<span class="string">"link"</span>);</span><br><span class="line">link.href = <span class="string">"myscript.js"</span>;</span><br><span class="line">link.rel = <span class="string">"preload"</span>;</span><br><span class="line">link.as = <span class="string">"script"</span>;</span><br><span class="line"><span class="built_in">document</span>.head.appendChild(link);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">script.src = <span class="string">"myscript.js"</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(script);</span><br></pre></td></tr></table></figure><p><strong>DNS 预解析 —— dns-prefetch</strong></p><blockquote><p><code>dns-prefetch</code> 的使用方法更加简单</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//host_name_to_prefetch.com&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>link 标签的 rel 设定为 <code>dns-prefetch</code>，<code>href</code> 设定为需要预加载的主机域名即可。</li><li>在讲 <code>dns-prefetch</code> 之前，先复习一遍 <code>DNS</code> 的作用及可以优化的点才能了解 <code>dns-prefetch</code> 带来的好处</li></ul><blockquote><p>网络通讯大部分是基于<code>TCP/IP</code>的，而<code>TCP/IP</code>是基于IP地址的，所以计算机在网络上进行通讯时只能识别如“202.96.134.133”之类的IP地址，而不能认识域名。我们无法记住10个以上IP地址的网站，所以我们访问网站时，更多的是在浏览器地址栏中输入域名，就能看到所需要的页面，这是因为有一个叫“DNS服务器”的计算机自动把我们的域名“翻译”成了相应的IP地址，然后调出IP地址所对应的网页</p></blockquote><p><code>dns-prefetch</code> 主要用来在用户点击一个链接之前解析对应的域名，这会自动去调用用户浏览器的解析机制。浏览器会在用户浏览网页时多线程完成预加载，当用户真正点击的时候就节省了用户等待域名解析的时间</p><p><strong>DNS 预解析 + TCP + TLS —— preconnect</strong></p><p><strong>提前加载整个页面 —— prerender</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;浏览器从获取 HTML到最终在屏幕上显示内容需要完成以下步骤：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;处理 HTML 标记并构建 DOM 树。&lt;/li&gt;
&lt;li&gt;处理 CSS 标记并构建 CSSOM 树。&lt;/li&gt;
&lt;li&gt;将 DO
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="性能优化" scheme="http://blog.poetries.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins自动部署前端项目</title>
    <link href="http://blog.poetries.top/2020/01/15/jenkins-deploy-fe/"/>
    <id>http://blog.poetries.top/2020/01/15/jenkins-deploy-fe/</id>
    <published>2020-01-15T12:10:43.000Z</published>
    <updated>2020-07-24T04:13:35.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><h3 id="1-1-传统网站部署的流程"><a href="#1-1-传统网站部署的流程" class="headerlink" title="1.1 传统网站部署的流程"></a>1.1 传统网站部署的流程</h3><blockquote><p>传统的网站部署，大家在运维过程中，网站部署是运维的工作之一，网站部署的流程大致分为：需求分析—原型设计—开发代码—提交测试—内网部署—确认上线—备份数据—外网更新-最终测试，如果发现外网部署的代码有异常，需要及时回滚。（如下图所示）</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2020/01/1.png" alt></p><h3 id="1-2-目前主流网站部署的流程"><a href="#1-2-目前主流网站部署的流程" class="headerlink" title="1.2 目前主流网站部署的流程"></a>1.2 目前主流网站部署的流程</h3><blockquote><p>目前主流网站部署方法，通过Jenkins工具平台实现全自动部署+测试，是一个可扩展的持续集成引擎，是一个开源软件项目，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。Jenkins非常易于安装和配置，简单易用</p></blockquote><p><strong>简单来说方便如下人员：</strong></p><ul><li>开发人员：写好代码，不需要自己进行源码编译、打包等工作，直接将代码分支存放在SVN、GIT仓库即可。</li><li>运维人员：减轻人工干预的错误率，同时解放运维人员繁杂的上传代码、手动备份、更新。</li><li>测试人员：可以通过<code>jenkins</code>进行简单的代码及网站测试。</li></ul><p><img src="http://blog.poetries.top/img-repo/2020/01/2.png" alt></p><h3 id="1-3-Jenkins持续集成简介"><a href="#1-3-Jenkins持续集成简介" class="headerlink" title="1.3 Jenkins持续集成简介"></a>1.3 Jenkins持续集成简介</h3><ul><li>持续集成(Continuous Integration)是一种软件开发实践，对于提高软件开发效率并保障软件开发质量提供了理论基础。Jenkins 是一个开源软件项目，旨在提供一个开放易用的软件平台，使持续集成变成可能。本文正是从持续集成的基本概念入手，通过具体实例，介绍了如何基于 Jenkins 快速搭建持续集成环境</li><li>Jenkins是一个可扩展的持续集成引擎，是一个开源软件项目，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。Jenkins非常易于安装和配置，简单易用</li></ul><h3 id="1-4-持续集成意义"><a href="#1-4-持续集成意义" class="headerlink" title="1.4 持续集成意义"></a>1.4 持续集成意义</h3><ul><li>持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量</li><li>持续集成保障了每个时间点上团队成员提交的代码是能成功集成的。换言之，任何时间点都能第一时间发现软件的集成问题，使任意时间发布可部署的软件成为了可能</li><li>持续集成还能利于软件本身的发展趋势，这点在需求不明确或是频繁性变更的情景中尤其重要，持续集成的质量能帮助团队进行有效决策，同时建立团队对开发产品的信心</li></ul><h3 id="1-5-持续集成组件"><a href="#1-5-持续集成组件" class="headerlink" title="1.5 持续集成组件"></a>1.5 持续集成组件</h3><ul><li>一个自动构建过程，包括自动编译、分发、部署和测试；</li><li>一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库，例如SVN、GIT代码库；</li><li>一个jenkins持续集成服务器(123.57.11.203服务器就是一个配置简单和使用方便的持续集成服务器)</li></ul><h2 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h2><h3 id="2-1-Jenkins安装部署"><a href="#2-1-Jenkins安装部署" class="headerlink" title="2.1 Jenkins安装部署"></a>2.1 Jenkins安装部署</h3><ul><li>地址<a href="http://mirrors.jenkins-ci.org/下载适合的Jenkins版本" target="_blank" rel="noopener">http://mirrors.jenkins-ci.org/下载适合的Jenkins版本</a></li></ul><blockquote><p>由于<code>Jenkins</code>属于一个<code>JAVA</code> 代码，需要java容器才能运行jenkins，所以需要安装JDK+Tomcat</p></blockquote><p><strong>这里我们以RPM方式部署jenkins</strong></p><blockquote><p>下载对应的<code>RPM</code>包 <a href="https://pkg.jenkins.io/redhat-stable/" target="_blank" rel="noopener">https://pkg.jenkins.io/redhat-stable/</a></p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -ih jenkins-2.7.4-1.1.noarch.rpm</span><br></pre></td></tr></table></figure><p><strong>jenkins 常用命令</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service jenkins start/stop/restart</span><br><span class="line"></span><br><span class="line">chkconfig jenkins on</span><br></pre></td></tr></table></figure><p><strong>jenkins的目录结构</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/lib/jenkins/jenkins.war     #WAR包 </span><br><span class="line"></span><br><span class="line">/etc/sysconfig/jenkins       　　 #配置文件</span><br><span class="line"></span><br><span class="line">/var/lib/jenkins/        　　　　   #默认的JENKINS_HOME目录</span><br><span class="line"></span><br><span class="line">/var/log/jenkins/jenkins.log      #Jenkins日志文件</span><br></pre></td></tr></table></figure><p><strong>启动jenkins</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service jenkins start</span><br></pre></td></tr></table></figure><p><strong>修改jenkins端口</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/jenkins</span><br><span class="line"></span><br><span class="line">JENKINS_PORT=&quot;8888&quot;</span><br></pre></td></tr></table></figure><p><strong>防火墙开启8888端口</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost modules]# vim /etc/sysconfig/iptables</span><br><span class="line"># Firewall configuration written by system-config-firewall</span><br><span class="line"># Manual customization of this file is not recommended.</span><br><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line">-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -j ACCEPT</span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT</span><br><span class="line"></span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 8888 -j ACCEPT # here</span><br><span class="line"></span><br><span class="line">-A INPUT -j REJECT --reject-with icmp-host-prohibited</span><br><span class="line">-A FORWARD -j REJECT --reject-with icmp-host-prohibited</span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure><p>再次启动jenkins：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost modules]# service jenkins start</span><br></pre></td></tr></table></figure><blockquote><p>打开地址 127.0.0.1:8888</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2020/01/3.png" alt></p><p>出现此提示说明，启动成功！因为是第一次安装，所以得输入默认密码，默认密码在红框标注的位置。</p><p>查看默认密码将密码粘贴到文本框中：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost secrets]# cat /var/lib/jenkins/secrets/initialAdminPassword</span><br><span class="line"></span><br><span class="line">97c675381d524414ba11e61c4f4b7ef0</span><br></pre></td></tr></table></figure><p><strong>安装插件</strong></p><p><img src="http://blog.poetries.top/img-repo/2020/01/4.png" alt></p><p><img src="http://blog.poetries.top/img-repo/2020/01/5.png" alt></p><h3 id="2-2-基础环境配置"><a href="#2-2-基础环境配置" class="headerlink" title="2.2 基础环境配置"></a>2.2 基础环境配置</h3><h4 id="2-2-1-插件安装"><a href="#2-2-1-插件安装" class="headerlink" title="2.2.1 插件安装"></a>2.2.1 插件安装</h4><p><img src="http://blog.poetries.top/img-repo/2020/01/6.png" alt></p><blockquote><p>安装Publish Over SSH用于执行构建后的操作</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2020/01/7.png" alt></p><blockquote><p>安装nodejs环境</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2020/01/8.png" alt></p><h4 id="2-2-2-配置信息"><a href="#2-2-2-配置信息" class="headerlink" title="2.2.2 配置信息"></a>2.2.2 配置信息</h4><p><strong>配置git命令</strong></p><blockquote><p>whereis git</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2020/01/9.png" alt></p><p><strong>配置node信息</strong></p><p><img src="http://blog.poetries.top/img-repo/2020/01/10.png" alt></p><p><strong>配置git账户及ssh用户信息</strong></p><p><img src="http://blog.poetries.top/img-repo/2020/01/11.png" alt><br><img src="http://blog.poetries.top/img-repo/2020/01/12.png" alt><br><img src="http://blog.poetries.top/img-repo/2020/01/13.png" alt></p><h3 id="2-3-创建项目"><a href="#2-3-创建项目" class="headerlink" title="2.3 创建项目"></a>2.3 创建项目</h3><p><img src="http://blog.poetries.top/img-repo/2020/01/14.png" alt><br><img src="http://blog.poetries.top/img-repo/2020/01/15.png" alt><br><img src="http://blog.poetries.top/img-repo/2020/01/16.png" alt><br><img src="http://blog.poetries.top/img-repo/2020/01/17.png" alt><br><img src="http://blog.poetries.top/img-repo/2020/01/18.png" alt><br><img src="http://blog.poetries.top/img-repo/2020/01/19.png" alt><br><img src="http://blog.poetries.top/img-repo/2020/01/20.png" alt></p><h3 id="2-4-git提交自动触发构建"><a href="#2-4-git提交自动触发构建" class="headerlink" title="2.4 git提交自动触发构建"></a>2.4 git提交自动触发构建</h3><blockquote><p>根据下面填写地址，以<code>bitbucket git</code>仓库配置为例子</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2020/01/17.png" alt><br><img src="http://blog.poetries.top/img-repo/2020/01/21.png" alt><br><img src="http://blog.poetries.top/img-repo/2020/01/22.png" alt></p><blockquote><p>这样提交git代码触发<code>git hooks</code>操作去请求 <code>http://192.168.1.43:8991/job/test/build?token=cxk</code>启动<code>jenkins</code>任务，以达成自动部署任务</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;h3 id=&quot;1-1-传统网站部署的流程&quot;&gt;&lt;a href=&quot;#1-1-传统网站部署的流程&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="CI" scheme="http://blog.poetries.top/categories/CI/"/>
    
    
      <category term="Jenkins" scheme="http://blog.poetries.top/tags/Jenkins/"/>
    
      <category term="CI" scheme="http://blog.poetries.top/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>学会使用Curl调试接口</title>
    <link href="http://blog.poetries.top/2019/12/12/linux-curl/"/>
    <id>http://blog.poetries.top/2019/12/12/linux-curl/</id>
    <published>2019-12-12T03:32:41.000Z</published>
    <updated>2020-07-24T04:13:35.049Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在我们平时开发接口完成后，需要上线联调接口，而接口往往和业务逻辑精密联系，想要调试接口，就需要将业务测一遍，那么有没有更好的办法使得调试更简单？</p></blockquote><p><strong>常用的接口分为两类</strong></p><ul><li>第一类：自己开发服务于自己系统的接口，该类接口调试可以在本地使用<code>postman</code>工具调试；</li><li>第二类：不是自己开发，调用别人能力接口服务于自己的系统，该类接口我们就可以使用<code>curl</code>命令调试。</li></ul><h1 id="一、Curl常用参数"><a href="#一、Curl常用参数" class="headerlink" title="一、Curl常用参数"></a>一、Curl常用参数</h1><ul><li><code>-X/--request [GET|POST|PUT|DELETE|…]</code> 使用指定的<code>http method</code>发出 <code>http request</code></li><li><code>-H/--header</code> 设定<code>request</code>里的<code>header</code></li><li><code>-i/--include</code> 显示<code>response</code>的<code>header</code></li><li><code>-d/--data</code> 设定 <code>http parameters</code></li><li><code>-v/--verbose</code> 輸出比较多的信息</li><li><code>-u/--user</code> 使用者账号</li><li><code>-b/--cookie</code> <code>cookie</code> 文件路径 使用<code>cookie</code></li></ul><blockquote><p>同一个功能常会有两个完全相同的参数, 一个是比较短的参数, 另一个是比较长的参数</p></blockquote><blockquote><p>参数<code>-X</code> 和 <code>--request</code> 两个功能是一样的 <code>curl -X POST http://www.example.com</code>  or  <code>curl --request POST http://www.example.com/</code>  是完全相同的.</p></blockquote><h1 id="二、curl发送请求参数使用"><a href="#二、curl发送请求参数使用" class="headerlink" title="二、curl发送请求参数使用"></a>二、curl发送请求参数使用</h1><ul><li><code>curl</code>发送请求参数使用</li></ul><h2 id="2-1-设置header"><a href="#2-1-设置header" class="headerlink" title="2.1 设置header"></a>2.1 设置header</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -i -H &quot;Content-Type: application/json&quot; http://www.baidu.com</span><br></pre></td></tr></table></figure><h2 id="2-2-设置HTTP-parameter"><a href="#2-2-设置HTTP-parameter" class="headerlink" title="2.2 设置HTTP parameter"></a>2.2 设置HTTP parameter</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -X POST -d &quot;param1:value1&amp;param2=value2&quot; 或者 -d &quot;param1=value1&quot; -d &quot;param2=value2&quot;</span><br></pre></td></tr></table></figure><h2 id="2-3-session认证"><a href="#2-3-session认证" class="headerlink" title="2.3 session认证"></a>2.3 session认证</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -X GET &apos;http://www.baidu.com/&apos; --header &apos;sessionid:sessionid值&apos;</span><br></pre></td></tr></table></figure><h2 id="2-4-使用cookie"><a href="#2-4-使用cookie" class="headerlink" title="2.4 使用cookie"></a>2.4 使用cookie</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -i --header &quot;Content-Type:application/json&quot; -X GET -b ~/cookie.txt http://www.baidu.com</span><br></pre></td></tr></table></figure><blockquote><p>测试接口上传文件:我们用 <code>-F &quot;file=@__FILE_PATH__&quot;</code> 的方式，传输文件即可, 如果想看到详细的请求信息，可以加上 <code>-v</code> 参数 <code>curl -i -X POST -F &#39;file=@/User/uploadFile.txt&#39; -H &quot;token:abc123</code>“ -v</p></blockquote><h2 id="2-5-HTTP基本认证"><a href="#2-5-HTTP基本认证" class="headerlink" title="2.5 HTTP基本认证"></a>2.5 HTTP基本认证</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -i -u username:password http://www.baidu.com/api/foo&apos;</span><br></pre></td></tr></table></figure><h2 id="2-6-post请求"><a href="#2-6-post请求" class="headerlink" title="2.6 post请求"></a>2.6 post请求</h2><blockquote><p>由于我们平时遇到接口请求都是<code>post</code>请求，所以接下来我们以<code>post</code>请求为例，分别探讨http协议和https协议两种情况下如何通过curl命令来调试接口；</p></blockquote><p><strong>http协议</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -v -X POST http://localhost:3000/api/posts --data &apos;&#123;&quot;title&quot;:&quot;controller&quot;, &quot;content&quot;: &quot;what is controller&quot;&#125;&apos; -H &apos;Content-Type:application/json; charset=UTF-8&apos;</span><br></pre></td></tr></table></figure><ul><li><code>-v</code> 显示版本信息</li><li><code>--header</code>等同于 <code>-H</code> 指定请求头（可校验调用方是否有权限，通过判断请求头信息，如果有规定的请求头信息，则允许调用，否则拒绝调用</li><li><code>--data</code> 请求参数(请求报文)</li><li><code>-X</code>：指定请求方式</li></ul><p><strong>通过 curl 发出的 HTTP 请求的内容就会是下面这样的</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST /api/posts HTTP/1.1</span><br><span class="line">Host: localhost:3000</span><br><span class="line">Content-Type: application/json; charset=UTF-8</span><br><span class="line"></span><br><span class="line">&#123;&quot;title&quot;: &quot;controller&quot;, &quot;content&quot;: &quot;what is controller&quot;&#125;</span><br></pre></td></tr></table></figure><p><strong>https协议</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -v -k -X POST http://localhost:3000/api/posts</span><br><span class="line">–cert &apos;/app/milo/tomcat/milogenius/webapps/client.crt&apos;</span><br><span class="line">–key &apos;/app/milo/tomcat/milogenius/webapps/client.key&apos;</span><br><span class="line">–pass &apos;milogenius&apos;</span><br></pre></td></tr></table></figure><ul><li><code>-k</code> :允许不使用证书到<code>SSL</code>站点;</li><li><code>-cert</code>: 客户端证书文件;</li><li><code>-key</code>: 私钥文件名 (<code>SSL</code>);</li><li><code>-pass</code>: 私钥密码 (<code>SSL</code>);</li></ul><h2 id="2-7-扩展知识"><a href="#2-7-扩展知识" class="headerlink" title="2.7 扩展知识"></a>2.7 扩展知识</h2><ul><li><code>curl post</code>请求, 数据可以采用<code>xml</code> 或者<code>json</code>格式, 并且可以发送本地<code>xml</code>和<code>json</code>文件</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -H &apos;Content-Type:application/json&apos; -X POST -d &apos;&#123;&quot;name&quot;:&quot;zhangsan&quot;&#125;&apos; http://www.baidu.com/</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -X POST -H &apos;content-type: application/json&apos;  -d /apps/jsonfile.json http://www.baidu.com/</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -X POST -H &apos;content-type:application/xml&apos;  -d &apos;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;name&gt;zhangsan&lt;/name&gt;&apos; http://www.baidu.com/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在我们平时开发接口完成后，需要上线联调接口，而接口往往和业务逻辑精密联系，想要调试接口，就需要将业务测一遍，那么有没有更好的办法使得调试更简单？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;常用的接口分为两类&lt;/strong&gt;&lt;/p&gt;
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="Linux" scheme="http://blog.poetries.top/tags/Linux/"/>
    
      <category term="Curl" scheme="http://blog.poetries.top/tags/Curl/"/>
    
  </entry>
  
  <entry>
    <title>Python基础小结(二)</title>
    <link href="http://blog.poetries.top/2019/12/11/python-base-2/"/>
    <id>http://blog.poetries.top/2019/12/11/python-base-2/</id>
    <published>2019-12-11T13:40:39.000Z</published>
    <updated>2020-07-24T04:13:35.053Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、初识Python"><a href="#一、初识Python" class="headerlink" title="一、初识Python"></a>一、初识Python</h2><p><img src="http://blog.poetries.top/img-repo/2019/12/136.png" alt="初识Python"></p><h2 id="二、语法基础"><a href="#二、语法基础" class="headerlink" title="二、语法基础"></a>二、语法基础</h2><p><img src="http://blog.poetries.top/img-repo/2019/12/155.png" alt="语法基础"></p><p><img src="http://blog.poetries.top/img-repo/2019/12/156.png" alt="变量"></p><p><img src="http://blog.poetries.top/img-repo/2019/12/157.png" alt="运算符"></p><h3 id="2-1-字符串处理"><a href="#2-1-字符串处理" class="headerlink" title="2.1 字符串处理"></a>2.1 字符串处理</h3><p><img src="http://blog.poetries.top/img-repo/2019/12/158.png" alt="创建字符串"></p><p><img src="http://blog.poetries.top/img-repo/2019/12/159.png" alt="字符串连接"></p><p><img src="http://blog.poetries.top/img-repo/2019/12/160.png" alt="字符串运算"></p><p><img src="http://blog.poetries.top/img-repo/2019/12/161.png" alt="字符串转译"></p><p><img src="http://blog.poetries.top/img-repo/2019/12/162.png" alt="切片"></p><p><img src="http://blog.poetries.top/img-repo/2019/12/163.png" alt="常用函数"></p><h3 id="2-2-列表"><a href="#2-2-列表" class="headerlink" title="2.2 列表"></a>2.2 列表</h3><p><img src="http://blog.poetries.top/img-repo/2019/12/164.png" alt></p><p><img src="http://blog.poetries.top/img-repo/2019/12/165.png" alt></p><h3 id="2-3-元组"><a href="#2-3-元组" class="headerlink" title="2.3 元组"></a>2.3 元组</h3><p><img src="http://blog.poetries.top/img-repo/2019/12/166.png" alt></p><h3 id="2-4-字典"><a href="#2-4-字典" class="headerlink" title="2.4 字典"></a>2.4 字典</h3><p><img src="http://blog.poetries.top/img-repo/2019/12/173.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/12/174.png" alt></p><h3 id="2-5-函数"><a href="#2-5-函数" class="headerlink" title="2.5 函数"></a>2.5 函数</h3><p><img src="http://blog.poetries.top/img-repo/2019/12/167.png" alt></p><p><img src="http://blog.poetries.top/img-repo/2019/12/168.png" alt></p><h3 id="2-6-流程控制"><a href="#2-6-流程控制" class="headerlink" title="2.6 流程控制"></a>2.6 流程控制</h3><p><img src="http://blog.poetries.top/img-repo/2019/12/169.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/12/170.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/12/171.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/12/172.png" alt></p><h2 id="三、类"><a href="#三、类" class="headerlink" title="三、类"></a>三、类</h2><p><img src="http://blog.poetries.top/img-repo/2019/12/175.png" alt></p><h3 id="3-1-创建类"><a href="#3-1-创建类" class="headerlink" title="3.1 创建类"></a>3.1 创建类</h3><p><img src="http://blog.poetries.top/img-repo/2019/12/176.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/12/177.png" alt></p><h3 id="3-2-属性"><a href="#3-2-属性" class="headerlink" title="3.2 属性"></a>3.2 属性</h3><p><img src="http://blog.poetries.top/img-repo/2019/12/178.png" alt></p><h3 id="3-3-方法"><a href="#3-3-方法" class="headerlink" title="3.3 方法"></a>3.3 方法</h3><p><img src="http://blog.poetries.top/img-repo/2019/12/180.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/12/179.png" alt></p><h2 id="四、高级特性"><a href="#四、高级特性" class="headerlink" title="四、高级特性"></a>四、高级特性</h2><p><img src="http://blog.poetries.top/img-repo/2019/12/147.png" alt="函数式编程"></p><p><img src="http://blog.poetries.top/img-repo/2019/12/148.png" alt="切片"></p><p><img src="http://blog.poetries.top/img-repo/2019/12/149.png" alt="迭代"></p><p><img src="http://blog.poetries.top/img-repo/2019/12/150.png" alt="生成器"></p><p><img src="http://blog.poetries.top/img-repo/2019/12/151.png" alt="yield关键字"></p><p><img src="http://blog.poetries.top/img-repo/2019/12/152.png" alt="迭代器Iterator"></p><p><img src="http://blog.poetries.top/img-repo/2019/12/153.png" alt="闭包"></p><p><img src="http://blog.poetries.top/img-repo/2019/12/154.png" alt="装饰器"></p><h2 id="五、自带模块"><a href="#五、自带模块" class="headerlink" title="五、自带模块"></a>五、自带模块</h2><p><img src="http://blog.poetries.top/img-repo/2019/12/140.png" alt="自带模块概览"></p><p><img src="http://blog.poetries.top/img-repo/2019/12/137.png" alt="urllib"></p><p><img src="http://blog.poetries.top/img-repo/2019/12/138.png" alt="正则表达式re"></p><p><img src="http://blog.poetries.top/img-repo/2019/12/141.png" alt="random"></p><p><img src="http://blog.poetries.top/img-repo/2019/12/142.png" alt="Math"></p><h2 id="六、Python并发"><a href="#六、Python并发" class="headerlink" title="六、Python并发"></a>六、Python并发</h2><p><img src="http://blog.poetries.top/img-repo/2019/12/135.png" alt="python并发"></p><h2 id="七、应用领域"><a href="#七、应用领域" class="headerlink" title="七、应用领域"></a>七、应用领域</h2><p><img src="http://blog.poetries.top/img-repo/2019/12/143.png" alt="应用领域"></p><p><img src="http://blog.poetries.top/img-repo/2019/12/144.png" alt="网络爬虫"></p><p><img src="http://blog.poetries.top/img-repo/2019/12/145.png" alt="数据存储、提取"></p><p><img src="http://blog.poetries.top/img-repo/2019/12/146.png" alt="数据预处理、模型分析、可视化"></p><h2 id="八、更多"><a href="#八、更多" class="headerlink" title="八、更多"></a>八、更多</h2><ul><li><a href="https://processon.com/mindmap/5df0e70ce4b0e2c298af0b11" target="_blank" rel="noopener">Python完整思维导图</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、初识Python&quot;&gt;&lt;a href=&quot;#一、初识Python&quot; class=&quot;headerlink&quot; title=&quot;一、初识Python&quot;&gt;&lt;/a&gt;一、初识Python&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://blog.poetries.top/img
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="python" scheme="http://blog.poetries.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础小结(一)</title>
    <link href="http://blog.poetries.top/2019/12/10/python-base-1/"/>
    <id>http://blog.poetries.top/2019/12/10/python-base-1/</id>
    <published>2019-12-10T09:40:39.000Z</published>
    <updated>2020-07-24T04:13:35.053Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近需要用<code>python</code>做数据分析，决定开始学<code>python</code>，总结一些基础笔记</p></blockquote><h2 id="一、导语"><a href="#一、导语" class="headerlink" title="一、导语"></a>一、导语</h2><ul><li><code>python</code>是解析性语言</li><li><code>python</code>能做什么<ul><li>大数据分析</li><li>自动化运维与自动化测试</li><li>web开发：<code>flask</code>、<code>jdango</code></li><li>机器学习 <code>TensorFlow</code></li><li>胶水语言：如混合c++、java编程，能够把其他语法编写的模块连接在一起</li></ul></li></ul><p><strong>Python语言的特点</strong></p><ul><li>语法简洁</li><li>可跨平台</li><li>应用广泛</li><li>支持中文</li><li>强制可读：通过强制缩进体现语句间的逻辑关系提高了程序的可读性</li><li>模式多样：语法层面同时支持面向过程和面向对象两种编程方式</li><li>粘性扩展：通过接口和函数集成其他语言编写的代码</li><li>开源理念</li><li>库类丰富</li></ul><p><strong>Python语言开发环境配置</strong></p><ul><li><code>Python</code>解释器</li><li><code>IDLE</code>开发环境</li><li>交互式启动</li><li>文件式启动</li><li><code>Python</code>语言集成开发环境——<code>PyCharm</code></li></ul><h2 id="二、基本知识"><a href="#二、基本知识" class="headerlink" title="二、基本知识"></a>二、基本知识</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li>注释是辅助性文字，不被执行</li><li>单行注释：以<code>#</code>开头</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#这是注释</span><br></pre></td></tr></table></figure><blockquote><p>多行注释：以<code>&#39;&#39;&#39;</code>(3个单引号)开头和结尾</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;&apos;&apos;</span><br><span class="line">这是注释</span><br><span class="line">这也是注释</span><br><span class="line">这还是注释</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><ul><li>命名是为变量关联标识符的过程，用于确保程序元素的唯一性</li><li>标识符由字母、数字、下划线（和汉字）等字符及其组合构成</li><li>标识符的首字符不能是数字 ，且中间不能出现空格</li><li>标识符对大小写敏感</li></ul><h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><ul><li>保留字（<code>Keyword</code>）也被称为关键字，是被编程语言内部定义并保留使用的标识符</li><li><code>Python</code> 的标准库提供了一个 <code>keyword</code> 模块，可以输出当前版本的所有关键字：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import keyword</span><br><span class="line">&gt;&gt;&gt; ls=keyword.kwlist</span><br><span class="line">&gt;&gt;&gt; ls</span><br><span class="line">&gt;&gt;&gt;len(ls)</span><br><span class="line">33</span><br></pre></td></tr></table></figure><p><strong>Python 3 有33个保留字</strong></p><ul><li><code>True</code></li><li><code>False</code></li><li><code>None</code></li><li><code>and</code></li><li><code>as</code></li><li><code>assert</code></li><li><code>break</code></li><li><code>class</code></li><li><code>continue</code></li><li><code>def</code></li><li><code>del</code></li><li><code>elif</code></li><li><code>else</code></li><li><code>except</code></li><li><code>finally</code></li><li><code>for</code></li><li><code>from</code></li><li><code>global</code></li><li><code>if</code></li><li><code>import</code></li><li><code>in</code></li><li><code>is</code></li><li><code>lambda</code></li><li><code>nonlocal</code></li><li><code>not</code></li><li><code>or</code></li><li><code>pass</code></li><li><code>raise</code></li><li><code>return</code></li><li><code>try</code></li><li><code>while</code></li><li><code>with</code></li><li><code>yield</code></li></ul><h3 id="input-函数"><a href="#input-函数" class="headerlink" title="input()函数"></a>input()函数</h3><ul><li>使用<code>input()</code>函数从控制台获得用户输入</li><li><code>input()</code>函数以字符串类型返回结果</li></ul><h3 id="eval-函数"><a href="#eval-函数" class="headerlink" title="eval()函数"></a>eval()函数</h3><ul><li><code>eval(&lt;字符串&gt;)</code>函数的作用是间输入的字符串变成Python语句并执行</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x=eval(input(&quot;请输入：&quot;))</span><br></pre></td></tr></table></figure><h3 id="print-函数"><a href="#print-函数" class="headerlink" title="print()函数"></a>print()函数</h3><ul><li><code>print()</code>函数可以输出字符信息，也可以用字符的形式输出变量</li><li>输出字符信息时，可以直接将待输出内容传递给<code>print()</code>函数</li><li>输出变量值时，<code>print()</code>函数用槽格式和过<code>format()</code>方法将变量和字符串结合到一起输出</li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>函数可以理解为对一组表达特定功能表达式的封装，将特定功能代码编写在一个函数里，使程序模块化更好，便于阅读和复用</li><li>可通过保留字<code>def</code>自定义函数</li></ul><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p><img src="http://blog.poetries.top/img-repo/2019/12/107.png" alt></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用with操作文件</span></span><br><span class="line"><span class="keyword">with</span> open(os.path.dirname(__file__) + <span class="string">'/blog.text'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(json.dumps(data))</span><br></pre></td></tr></table></figure><p><img src="http://blog.poetries.top/img-repo/2019/12/131.png" alt="路径操作模块"><br><img src="http://blog.poetries.top/img-repo/2019/12/132.png" alt="图片"><br><img src="http://blog.poetries.top/img-repo/2019/12/133.png" alt="Excel"><br><img src="http://blog.poetries.top/img-repo/2019/12/134.png" alt="文本其他"></p><h2 id="三、基本类型"><a href="#三、基本类型" class="headerlink" title="三、基本类型"></a>三、基本类型</h2><p><img src="http://blog.poetries.top/img-repo/2019/12/112.png" alt="python基本数据类型"></p><p><strong>类型判断两个方式</strong></p><ul><li><code>type</code> 判断基本类型 如 <code>type(10) == int</code> 不推荐</li><li><p><code>isinstance(值,类型)</code> 或者 <code>isinstance(值,(int,float,str))</code> 三种中任意一种</p><ul><li>例 <code>isinstance(1,int)</code></li></ul></li><li><p><code>Number</code></p><ul><li><code>int</code></li><li><code>float</code></li><li><code>complex</code> 复数<ul><li>如<code>36j</code></li></ul></li></ul></li><li><code>Bool</code><ul><li><code>bool(&#39;&#39;)/bool([])/bool({})/bool(0)/bool(None)</code></li><li>都是转化为<code>False</code></li></ul></li><li>字符串<code>str</code> （序列）<ul><li>单引号</li><li>双引号</li><li>三引号(可以换行写多个字符串和ES6的反引号类似)</li><li>在字符串前面加一个<code>r</code>，这个字符串就不是一个普通字符串，而是一个原始字符串会原样输出 <code>print(r&#39;\n88fafa&#39;)</code> 此时<code>\n</code>不会转译</li></ul></li><li><code>list</code> 列表 （序列）</li><li><code>tuple</code> 元组 （序列）</li><li>集合<code>set</code>(无序，没有索引，不能切片，元素唯一，不能重复,只有<code>value</code>，没<code>key</code>) <code>{}</code> 如 <code>{1,2,3,4}</code><ul><li><code>1 in {1,2,3}</code></li><li><code>1 not in {1,2,3,4}</code></li><li>两个集合插集<code>{1,2,3} - {4,5}</code></li><li>两个集合求交集 <code>{1,2,3,4} &amp; {2,3}</code></li><li>并集 <code>{1,2,3,4,5,6} | {3,4,7}</code></li><li>定义一个空的集合 <code>set()</code></li></ul></li><li>字典<code>dict</code>（有<code>key</code>无<code>value</code>，不同于集合只有<code>value</code>）<ul><li>很多<code>key-value</code>组成,不能够有相同的键，</li><li><code>key</code>键不可变类型，可以是<code>int/str/tuple</code> </li><li><code>value</code>可以是：<code>int/str/float/list/set/dict</code></li><li>定义一个空的字典 <code>{}</code></li></ul></li></ul><blockquote><p>两个整型相除得到整型 type(1//2) ==&gt;int 整除会保留整数</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 二进制</span><br><span class="line">0b10012</span><br><span class="line"></span><br><span class="line">// 八进制</span><br><span class="line">0o101</span><br><span class="line"></span><br><span class="line">// 16进制</span><br><span class="line">0x10</span><br><span class="line"></span><br><span class="line">// 10进制转二进制</span><br><span class="line">bin(10)</span><br><span class="line"></span><br><span class="line">// 八进制转二进制</span><br><span class="line">bin(o09012)</span><br><span class="line"></span><br><span class="line">// 八进制、二进制转十进制</span><br><span class="line">int(0b1000)</span><br><span class="line"></span><br><span class="line">// 十进制转16进制</span><br><span class="line">hex(88891)</span><br><span class="line"></span><br><span class="line">// 八进制转化</span><br><span class="line">oct(0b100)</span><br></pre></td></tr></table></figure><p><strong>转译字符</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">\n 换行</span><br><span class="line">\t 横向制表符</span><br></pre></td></tr></table></figure><p><strong>内置的字符串处理函数</strong></p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>len(&#39;x&#39;)</code></td><td>返回字符串<code>x</code>的长度，也可返回其他组合数据类型元素个数</td></tr><tr><td><code>str(&#39;x&#39;)</code></td><td>返回任意类型<code>x</code>所对应的字符串形式</td></tr><tr><td><code>chr(x)</code></td><td>返回<code>Unicode</code>编码<code>x</code>对应的单字符</td></tr><tr><td><code>ord(&#39;x&#39;)</code></td><td>返回单字符表示的<code>Unicode</code>编码</td></tr><tr><td><code>hex(x)</code></td><td>返回整数<code>x</code>对应十六进制数的小写形式字符串</td></tr><tr><td><code>oct(x)</code></td><td>返回整数<code>x</code>对应八进制数的小写形式字符串</td></tr></tbody></table><p><strong>内置的字符串处理方法（共43个，常用16个）</strong></p><ul><li>在<code>Python</code>解释器内部，所有数据类型都采用面向对象的方式实现，封装为一个类</li><li>字符串是一个类，具有类似<code>&lt;a&gt;.&lt;b&gt;()</code>形式的字符串处理函数，称为方法</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>str.lower()</code></td><td>返回字符串<code>str</code>的副本，全部字符小写</td></tr><tr><td><code>str.upper()</code></td><td>返回字符串<code>str</code>的副本，全部字符大写</td></tr><tr><td><code>str.islower()</code></td><td>当str所有字符都是小写时，返回<code>Ture</code>，否则返回<code>False</code></td></tr><tr><td><code>str.isprintable()</code></td><td>当str所有字符都是可打印的，返回<code>Ture</code>，否则返回<code>False</code></td></tr><tr><td><code>str.isnumeric()</code></td><td>当str所有字符都是数字时，返回<code>Ture</code>，否则返回<code>False</code></td></tr><tr><td><code>str.isspace()</code></td><td>当str所有字符都是空格，返回<code>Ture</code>，否则返回<code>Flase</code></td></tr><tr><td><code>str.endswith(suffix[,start[,end]])</code></td><td><code>str[start:end]</code>以<code>suffix</code>结尾返回<code>Ture</code>，否则返回<code>Flase</code></td></tr><tr><td><code>str.srartswith(prefix[,start[,end]])</code></td><td><code>str[start:end]</code>以<code>prefix</code>开始返回<code>Ture</code>，否则返回<code>Flase</code></td></tr><tr><td><code>str.split(sep=None,maxsplit=-1)</code></td><td>返回一个列表，由<code>str</code>根据<code>sep</code>被分割的部分构成</td></tr><tr><td><code>str.count(sub[,start[,end]]</code></td><td>返回<code>str[start:end]</code>中<code>sub</code>子串出现的次数</td></tr><tr><td><code>str.replace(old,new[,count])</code></td><td>返回字符串<code>str</code>的副本，所有<code>old</code>子串被替换为<code>new</code>，如果<code>count</code>给出，则前<code>count</code>次<code>old</code>出现被替换</td></tr><tr><td><code>str.center(width[,fillchar])</code></td><td>字符串居中函数</td></tr><tr><td><code>str.strip([chars])</code></td><td>返回字符串<code>str</code>的副本，在其左侧和右侧去掉<code>chars</code>中列出的字符</td></tr><tr><td><code>str.zfill(width)</code></td><td>返回字符串<code>str</code>副本，长度为<code>width</code>。不足部分在其左侧添加<code>0</code></td></tr><tr><td><code>str.format()</code></td><td>返回字符串<code>str</code>的一种排版格式</td></tr><tr><td><code>str.join(iterable)</code></td><td>返回一个新字符串，由组合数据类型<code>iterable</code>变量的每个元素组成，元素间用<code>str</code>分隔</td></tr></tbody></table><h2 id="四、序列-元组、字符串、列表"><a href="#四、序列-元组、字符串、列表" class="headerlink" title="四、序列-元组、字符串、列表"></a>四、序列-元组、字符串、列表</h2><p><strong>序列共性</strong></p><ul><li>切片</li><li>序号</li><li><code>in</code>判断符 <code>2 in [1,2,3]</code> <code>2 not in [1,2,3]</code></li><li><code>len()</code></li><li><code>max(list)</code></li><li><code>min(list)</code></li></ul><p><img src="http://blog.poetries.top/img-repo/2019/12/109.png" alt="序列"></p><p><img src="http://blog.poetries.top/img-repo/2019/12/108.png" alt="序列基本操作"></p><p><strong>可变类型</strong></p><ul><li><code>list</code> 需要动态改变，就用列表</li><li><code>dict</code></li><li><code>set</code></li></ul><p><strong>不可变类型</strong></p><ul><li><code>str</code></li><li><code>tuple</code> 定义之后不可变，安全性较高</li><li><code>int</code></li></ul><p><strong>字符串基本操作</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// +号运算</span><br><span class="line">str1 = &apos;hell&apos;</span><br><span class="line">str2 = &apos;world&apos;</span><br><span class="line">str = str1 + str2</span><br><span class="line"></span><br><span class="line">// 乘法运算 </span><br><span class="line">str1*3 // 重复3次</span><br><span class="line"></span><br><span class="line">// 切片</span><br><span class="line">str1[1:2]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 赋值操作</span><br><span class="line">year,month,day = (2019,10,12)</span><br></pre></td></tr></table></figure><blockquote><p>如果只有一个元素，应该这样表示元组 <code>(1,)</code>,一个元素都没有的元组 <code>type( () )</code></p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/12/126.png" alt="python类型转换"></p><h2 id="五、运算符"><a href="#五、运算符" class="headerlink" title="五、运算符"></a>五、运算符</h2><p><img src="http://blog.poetries.top/img-repo/2019/12/113.png" alt="python运算符"></p><p><strong>列表元组都可以比较</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) &gt; (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="comment">// 两两比较第一个、第二个...数字</span></span><br></pre></td></tr></table></figure><p><strong>字典的成员运算符</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只针对key</span></span><br><span class="line"><span class="string">'a'</span> <span class="keyword">in</span> &#123;<span class="string">'a'</span>: <span class="string">'1'</span>&#125; <span class="comment">// True</span></span><br></pre></td></tr></table></figure><p><strong>身份运算符</strong></p><ul><li><code>is</code> 两个取值相等才会返回True  <code>&#39;1&#39; is &#39;1&#39; // True</code></li><li><code>is not</code> 不等</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 关系运算符比较的是两个值是否相等 如</span></span><br><span class="line"><span class="number">1</span> == <span class="number">1.0</span> <span class="comment">// True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// is比较的是两个变量内存地址是否相等 id(值) 获取内存地址</span></span><br><span class="line"><span class="number">1</span> is <span class="number">1.0</span> <span class="comment">// False</span></span><br></pre></td></tr></table></figure><p><strong>对象的三个特征</strong></p><ul><li><code>id</code>(身份) =&gt; <code>is</code>判断</li><li><code>value</code> =&gt; <code>==</code> 判断</li><li><code>type</code> =&gt; <code>isinstance</code> 判断</li></ul><p><strong>位运算符</strong></p><blockquote><p>把数字当二进制进行运算。把非二进制转化为二进制才计算</p></blockquote><ul><li><code>&amp;</code> 按位与</li><li><code>|</code> 按位或</li><li><code>^</code> 按位异或</li><li><code>~</code>按位取反</li><li><code>&lt;&lt;</code> 左移动</li><li><code>&gt;&gt;</code> 右移动</li></ul><h2 id="六、循环、条件、枚举"><a href="#六、循环、条件、枚举" class="headerlink" title="六、循环、条件、枚举"></a>六、循环、条件、枚举</h2><ul><li><code>if else</code></li><li><code>while</code></li><li><code>for in</code></li></ul><p><strong>range</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// range</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2是步长</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取出1，3，5，7</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(a),<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//切片写法</span></span><br><span class="line">a[<span class="number">0</span>:len(a):<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h2 id="七、枚举"><a href="#七、枚举" class="headerlink" title="七、枚举"></a>七、枚举</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">''' </span></span><br><span class="line"><span class="string">枚举</span></span><br><span class="line"><span class="string">'''</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VIP</span><span class="params">(Enum)</span>:</span></span><br><span class="line">  <span class="comment"># 值可以相同 但是py会把第二个设置别名</span></span><br><span class="line">  yellow = <span class="number">1</span></span><br><span class="line">  green = <span class="number">2</span></span><br><span class="line">  red = <span class="number">3</span></span><br><span class="line">  black = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 枚举不能被修改</span></span><br><span class="line"><span class="comment"># VIP.red = 10</span></span><br><span class="line">print(VIP.yellow)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取枚举值</span></span><br><span class="line">print(VIP.yellow.value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取枚举标签</span></span><br><span class="line">print(VIP.yellow.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据名称获取枚举类</span></span><br><span class="line">print(VIP[<span class="string">'red'</span>]) <span class="comment"># VIP.red</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 枚举遍历 获取每个成员</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> VIP:</span><br><span class="line">  print(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> VIP.__members__.items():</span><br><span class="line">  print(v)</span><br><span class="line"></span><br><span class="line"><span class="string">''' </span></span><br><span class="line"><span class="string">('yellow', &lt;VIP.yellow: 1&gt;)</span></span><br><span class="line"><span class="string">('green', &lt;VIP.green: 2&gt;)</span></span><br><span class="line"><span class="string">('red', &lt;VIP.red: 3&gt;)</span></span><br><span class="line"><span class="string">('black', &lt;VIP.black: 4&gt;)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 成员之间进行比较 不持续大小比较</span></span><br><span class="line">res = VIP.red == VIP.black</span><br><span class="line">print(res) <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 身份比较</span></span><br><span class="line">print(VIP.red <span class="keyword">is</span> VIP.red)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 枚举类型转换</span></span><br><span class="line">print(VIP(<span class="number">1</span>)) <span class="comment"># VIP.yellow</span></span><br></pre></td></tr></table></figure><h2 id="八、闭包、模块、函数、变量作用域"><a href="#八、闭包、模块、函数、变量作用域" class="headerlink" title="八、闭包、模块、函数、变量作用域"></a>八、闭包、模块、函数、变量作用域</h2><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p><img src="http://blog.poetries.top/img-repo/2019/12/110.png" alt="模块"></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在文件中写`__init__.py` 只是标注这是一个包 可以什么都不用写</span></span><br></pre></td></tr></table></figure><p><strong>导入模块重新命名</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import test as t</span><br></pre></td></tr></table></figure><p><strong>函数</strong></p><blockquote><p>函数内部没有<code>return</code> 返回的结果就是<code>None</code></p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数可以返回多个值</span></span><br><span class="line">def test():</span><br><span class="line">  <span class="keyword">return</span> x, y,z</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 接收返回的值</span></span><br><span class="line">x,y,z = test()  <span class="comment">// 其实就是返回了一个元组类型</span></span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">''' </span></span><br><span class="line"><span class="string">闭包 = 函数+环境变量（在函数外部）</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">  num = <span class="number">10</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num * x</span><br><span class="line">  <span class="keyword">return</span> fun</span><br><span class="line"></span><br><span class="line">f = test()</span><br><span class="line">print(f(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">origin = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">go</span><span class="params">(step)</span>:</span></span><br><span class="line">  <span class="keyword">global</span> origin </span><br><span class="line">  new_pos = step + origin </span><br><span class="line">  origin = new_pos</span><br><span class="line">  <span class="keyword">return</span> new_pos</span><br><span class="line"></span><br><span class="line">print(go(<span class="number">1</span>))</span><br><span class="line">print(go(<span class="number">2</span>))</span><br><span class="line">print(go(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h3 id="匿名函数-lambda"><a href="#匿名函数-lambda" class="headerlink" title="匿名函数 lambda"></a>匿名函数 lambda</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">''' </span></span><br><span class="line"><span class="string">函数式编程：匿名函数 lambda</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> x + y </span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匿名函数定义</span></span><br><span class="line">f = <span class="keyword">lambda</span> x,y: x+y</span><br><span class="line"></span><br><span class="line">print(f(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">arr = [&#123;<span class="string">'key'</span>: <span class="string">'poetries'</span>,<span class="string">'value'</span>: <span class="number">100</span>&#125;,&#123;<span class="string">'key'</span>: <span class="string">'jing'</span>,<span class="string">'value'</span>: <span class="number">10</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理键值对</span></span><br><span class="line">res = map(<span class="keyword">lambda</span> item: &#123;<span class="string">'name'</span>: item[<span class="string">'key'</span>],<span class="string">'score'</span>: item[<span class="string">'value'</span>]&#125;, arr)</span><br><span class="line"></span><br><span class="line">print(list(res))</span><br></pre></td></tr></table></figure><h3 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">''' </span></span><br><span class="line"><span class="string">map函数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">arr2 = [<span class="number">10</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">12</span>,<span class="number">14</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表推导式</span></span><br><span class="line">a = [i*i <span class="keyword">for</span> i <span class="keyword">in</span> arr ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(a)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># map函数</span></span><br><span class="line">b = map(<span class="keyword">lambda</span> x: x*x,arr)</span><br><span class="line">print(list(b))</span><br><span class="line"></span><br><span class="line">c = map(<span class="keyword">lambda</span> x,y: x*x + y,arr,arr2) <span class="comment"># 可以传多个list，个数要相同</span></span><br><span class="line">print(list(c))</span><br></pre></td></tr></table></figure><h3 id="reduce函数"><a href="#reduce函数" class="headerlink" title="reduce函数"></a>reduce函数</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">''' </span></span><br><span class="line"><span class="string">reduce函数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连续调用lambda</span></span><br><span class="line">r = reduce(<span class="keyword">lambda</span> x,y:x+y,arr)</span><br><span class="line"></span><br><span class="line">print(r)</span><br></pre></td></tr></table></figure><h3 id="filter函数"><a href="#filter函数" class="headerlink" title="filter函数"></a>filter函数</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">''' </span></span><br><span class="line"><span class="string">filter函数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="literal">False</span>,<span class="string">''</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤空字符串</span></span><br><span class="line">res = filter(<span class="keyword">lambda</span> x: <span class="keyword">not</span> <span class="keyword">not</span> x,arr)</span><br><span class="line"></span><br><span class="line">print(list(res)) <span class="comment"># [1,2,3,4,5,6,7]</span></span><br></pre></td></tr></table></figure><h2 id="九、装饰器"><a href="#九、装饰器" class="headerlink" title="九、装饰器"></a>九、装饰器</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">''' </span></span><br><span class="line"><span class="string">装饰器:特性、注解</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator1</span><span class="params">(func)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(time.time())</span><br><span class="line">    func(name)</span><br><span class="line">  <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator1 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(name)</span>:</span></span><br><span class="line">  print(<span class="string">'this is a func'</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># f1('poetries')</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator2</span><span class="params">(func)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kw)</span>:</span></span><br><span class="line">    print(time.time())</span><br><span class="line">    print(args,<span class="string">'args'</span>)</span><br><span class="line">    print(kw,<span class="string">'kw'</span>)</span><br><span class="line">    func(*args,**kw)</span><br><span class="line">  <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(p1,p2)</span>:</span></span><br><span class="line">  print(<span class="string">'this is a func'</span>,p1,p2)</span><br><span class="line"></span><br><span class="line">f2(<span class="string">'静观流叶'</span>,<span class="string">'1'</span>)</span><br></pre></td></tr></table></figure><h2 id="十、面向对象"><a href="#十、面向对象" class="headerlink" title="十、面向对象"></a>十、面向对象</h2><p><img src="http://blog.poetries.top/img-repo/2019/12/115.png" alt="类"></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">面向对象</span></span><br><span class="line"><span class="string">类=面向对象</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">行为、特征</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">类最基本的作用封装代码</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">'poetries'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Human)</span>:</span></span><br><span class="line">  <span class="comment"># 类变量 静态属性</span></span><br><span class="line">  author = <span class="string">'poetry'</span> </span><br><span class="line">  SUM = <span class="number">10</span></span><br><span class="line">  num = <span class="number">999</span></span><br><span class="line">  score = <span class="number">98</span></span><br><span class="line">  text = <span class="string">'小明今年'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">    <span class="comment"># 构造函数 初始化对象属性</span></span><br><span class="line">    <span class="comment"># 成员可见性 __外部不能访问</span></span><br><span class="line">    self.__name = name </span><br><span class="line">    self.__age = age </span><br><span class="line"></span><br><span class="line">  <span class="comment"># 实例方法 第一个参数默认是self</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getAge</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 实例中可调用类变量</span></span><br><span class="line">    <span class="comment"># print(self.author)</span></span><br><span class="line">    <span class="keyword">return</span> self.__getText() + str(self.__age)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.__name</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setName</span><span class="params">(self,name)</span>:</span></span><br><span class="line">    self.__name = name</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 私有方法，外部不可以访问</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__getText</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.text</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 静态方法</span></span><br><span class="line">  <span class="comment"># 没有self</span></span><br><span class="line">  <span class="comment"># 实例和类都可以调用</span></span><br><span class="line"><span class="meta">  @staticmethod</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 内部可以访问类变量</span></span><br><span class="line">    print(<span class="string">'静态方法'</span>,Student.SUM)</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 类方法 操作和类相关的</span></span><br><span class="line">  <span class="comment"># cls代表student这个类</span></span><br><span class="line">  <span class="comment"># 使用方式 student.testd()</span></span><br><span class="line">  <span class="comment"># 实例和类都可以调用，不要使用实例调用</span></span><br><span class="line">  <span class="comment"># 推荐使用类方法代替静态方法</span></span><br><span class="line"><span class="meta">  @classmethod</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">testd</span><span class="params">(cls)</span>:</span></span><br><span class="line">    print(<span class="string">'classMethod'</span>)</span><br><span class="line">  </span><br><span class="line">stu = Student(<span class="string">'poetries'</span>,<span class="number">22</span>)</span><br><span class="line"></span><br><span class="line">print(stu.getAge())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改内部变量值，通过内部定义一个方法，可以在内部进行判断，起到保护作用</span></span><br><span class="line">stu.setName(<span class="string">'静观流叶'</span>)</span><br><span class="line"></span><br><span class="line">print(stu.getName())</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(Student.author)</span></span><br><span class="line"><span class="comment"># print(Student.__dict__)</span></span><br><span class="line"><span class="comment"># print(Student.test())</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">继承</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span><span class="params">(object)</span>:</span></span><br><span class="line">  num =<span class="number">10</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">    self.__name = name</span><br><span class="line">    self.__age = age </span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承父类Human</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Human)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,school,name,age)</span>:</span></span><br><span class="line">    self.school = school</span><br><span class="line">    <span class="comment"># 子类调用父类构造函数 </span></span><br><span class="line">    <span class="comment"># 方式1</span></span><br><span class="line">    <span class="comment"># Human.__init__(self,name,age)</span></span><br><span class="line">    <span class="comment"># 方式2 推荐super</span></span><br><span class="line">    super(Student,self).__init__(name,age)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getInfo</span><span class="params">(self)</span>:</span> </span><br><span class="line">    <span class="keyword">return</span> self.getName() + self.school</span><br><span class="line"></span><br><span class="line">stu = Student(<span class="string">'中山大学'</span>,<span class="string">'poetry'</span>,<span class="number">22</span>)</span><br><span class="line">print(stu.getInfo())</span><br></pre></td></tr></table></figure><h2 id="十一、正则表达式"><a href="#十一、正则表达式" class="headerlink" title="十一、正则表达式"></a>十一、正则表达式</h2><blockquote><p>是一个特殊的字符序列，一个字符串是否与我们所设定的这样的字符序列相匹配</p></blockquote><p>库re</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//替换非数字的</span></span><br><span class="line"> s = re.sub(<span class="string">'\D'</span>,<span class="string">''</span>,<span class="string">'9fafjla9dfaldfah-dfal+++)@#--9912'</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 例子 传递函数 根据匹配结果替换操作</span></span><br><span class="line">def convert(value):</span><br><span class="line">  match = value.group()</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'!!'</span> + match</span><br><span class="line"></span><br><span class="line">re.sub(<span class="string">'#c'</span>, convert, <span class="string">'pythonc#fda'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// findall 可以加上第三个参数模式re.I忽略大小写</span></span><br><span class="line"><span class="comment">// re.S 改变.的匹配行为，可以匹配换行符`/n`  </span></span><br><span class="line"><span class="comment">// 返回 ['99999']</span></span><br><span class="line">re.findall(<span class="string">'\d+'</span>,<span class="string">'kfdafd99999fa'</span>,re.I | re.S)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配仅仅是对前面那个字符起作用</span></span><br><span class="line"><span class="comment">// n匹配0次或者1次</span></span><br><span class="line">re.findall(<span class="string">'python?'</span>, <span class="string">'pythonnn'</span>)</span><br></pre></td></tr></table></figure><ul><li><code>re.match</code> 没有找到匹配的，将会返回<code>None</code></li><li><code>re.search</code> 直到搜索到</li><li><code>re.sub</code> 替换</li><li><code>re.findall</code> 推荐 返回一个列表</li></ul><h2 id="十二、内建函数"><a href="#十二、内建函数" class="headerlink" title="十二、内建函数"></a>十二、内建函数</h2><p><a href="https://docs.python.org/3/library/functions.html" target="_blank" rel="noopener">https://docs.python.org/3/library/functions.html</a></p><p><img src="http://blog.poetries.top/img-repo/2019/12/114.png" alt="内建函数"></p><h2 id="十三、标准库"><a href="#十三、标准库" class="headerlink" title="十三、标准库"></a>十三、标准库</h2><p>常用模块</p><ul><li>文字处理 re</li><li>日期类型 time、datetime</li><li>随机数、数学类型  math、random</li><li>文件和目录访问 pathlib os.path</li><li>数据压缩 tarfile</li><li>通用操作系统 os、logging、argparse</li><li>多线程 threading、queue</li><li>网络数据处理 base64 json urllib</li><li>结构化标记处理工具 html xml</li><li>调试工具 timeit</li><li>软件包发布 venv</li><li>运行服务的 <strong>main</strong></li></ul><h2 id="十四、异常处理"><a href="#十四、异常处理" class="headerlink" title="十四、异常处理"></a>十四、异常处理</h2><p><img src="http://blog.poetries.top/img-repo/2019/12/127.png" alt="python异常类型"></p><blockquote><p><code>try-except</code>语句</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    &lt;语句块1&gt;</span><br><span class="line">except &lt;异常类型&gt;:</span><br><span class="line">    &lt;语句块2&gt;</span><br></pre></td></tr></table></figure><blockquote><p>try-except语句可以支持多个except语句</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    &lt;语句块1&gt;</span><br><span class="line">except &lt;异常类型1&gt;：</span><br><span class="line">    &lt;语句块2&gt;</span><br><span class="line">...</span><br><span class="line">except &lt;异常类型N&gt;:</span><br><span class="line">    &lt;语句块N+1&gt;</span><br><span class="line">except &lt;异常类型N+!&gt;:</span><br><span class="line">    &lt;语句块N+2&gt;</span><br></pre></td></tr></table></figure><h2 id="十五、JSON操作"><a href="#十五、JSON操作" class="headerlink" title="十五、JSON操作"></a>十五、JSON操作</h2><ul><li><code>json</code>库主要包括两类函数，操作类函数和解析类函数</li><li>操作类函数主要完成外部<code>JSON</code>格式和程序内部数据类型之间的转换功能<br>解析类函数主要用于解析键值对内容</li><li><code>json</code>格式包括对象和数组</li><li>对象用大括号(<code>{}</code>)表示，对应键值对的组合关系（被<code>json</code>库解析为字典）</li><li>数组用中括号(<code>{}</code>)表示，对应键值对的对等关系（被<code>json</code>库解析为列表）</li></ul><p><strong>json库解析</strong></p><ul><li><code>json</code>库包含编码（<code>encoding</code>）和解码（<code>decoding</code>）两个过程<br>编码将<code>Python</code>数据类型变换成JSON格式</li><li>解码是从<code>JSON</code>格式中解析数据对应到<code>Python</code>数据类型的过程<br><code>json</code>库的操作类函数</li></ul><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>json.dumps(obj,sort_keys=Flase,indent=None)</code></td><td>将Python的数据类型转换为<code>JSON</code>格式，编码过程</td></tr><tr><td><code>json.loads(string)</code></td><td>将<code>JSON</code>格式字符串转换为Python的数据类型，解码过程</td></tr><tr><td><code>json.dump(obj,fp，sort_keys=Flase,indent=None)</code></td><td>与<code>dumps()</code>功能一致，输出到文件<code>fp</code></td></tr><tr><td><code>json.load(fp)</code></td><td>与<code>loads()</code>功能一致，从文件<code>fp</code>读入</td></tr></tbody></table><ul><li><code>json.dumps()</code>中的<code>obj</code>可以是<code>Python</code>的列表或字典类型，当输入字典类型时，<code>dumps()</code>函数将其变为<code>JSON</code>格式字符串</li><li>默认生成的字符串是顺序存放的，<code>sort_keys</code>可以对字典元素按照<code>key</code>进行排序控制输出结果</li><li><code>indent</code>参数用于增加数据缩进，使得生成的<code>JSON</code>格式字符串更具可读性</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line">str = <span class="string">"&#123;'name': 'poetries'&#125;"</span></span><br><span class="line">json.loads(str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 序列化</span></span><br><span class="line">json.dumps([&#123;<span class="attr">name</span>: <span class="string">'poetries'</span>])</span><br></pre></td></tr></table></figure><blockquote><p>json数据类型和python对比</p></blockquote><table><thead><tr><th>JSON</th><th>python</th></tr></thead><tbody><tr><td><code>object</code></td><td><code>dict</code></td></tr><tr><td><code>array</code></td><td><code>list</code></td></tr><tr><td><code>string</code></td><td><code>str</code></td></tr><tr><td><code>number</code></td><td><code>int</code></td></tr><tr><td><code>number</code></td><td><code>float</code></td></tr><tr><td><code>true</code></td><td><code>True</code></td></tr><tr><td><code>false</code></td><td><code>False</code></td></tr><tr><td><code>null</code></td><td><code>None</code></td></tr></tbody></table><h2 id="十六、爬虫"><a href="#十六、爬虫" class="headerlink" title="十六、爬虫"></a>十六、爬虫</h2><p><img src="http://blog.poetries.top/img-repo/2019/12/111.png" alt="模块"></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">''' </span></span><br><span class="line"><span class="string">原生爬虫: 分页爬取我的博客文章列表</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> re,json,os</span><br><span class="line"></span><br><span class="line">baseUrl = <span class="string">'http://blog.poetries.top'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spider</span><span class="params">()</span>:</span></span><br><span class="line">  url = baseUrl + <span class="string">'/archives/'</span></span><br><span class="line">  pattern = <span class="string">'&lt;a class="post-title" href="(.*)"&gt;([\w]*?)&lt;/a&gt;'</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,page=<span class="number">1</span>)</span>:</span></span><br><span class="line">    self.page = page </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__fetch_content</span><span class="params">(self)</span>:</span></span><br><span class="line">    url = Spider.url</span><br><span class="line">    <span class="keyword">if</span> self.page != <span class="number">1</span>: </span><br><span class="line">      url = Spider.url + <span class="string">'page/'</span> + str(self.page)</span><br><span class="line"></span><br><span class="line">    r = request.urlopen(url)</span><br><span class="line">    <span class="comment">#bytes</span></span><br><span class="line">    htmls = str(r.read(), encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">return</span> htmls</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_analyse</span><span class="params">(self, htmls)</span>:</span></span><br><span class="line">    res = re.findall(Spider.pattern, htmls)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">    htmls = self.__fetch_content()</span><br><span class="line">    <span class="keyword">return</span> self._analyse(htmls)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页获取所有文章标题</span></span><br><span class="line">result = [] <span class="comment"># 保存多页数据 [[],[],[]]</span></span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">15</span>):</span><br><span class="line">  print(<span class="string">'开始趴取，第(%d/%d)页文章.......'</span>%(page,<span class="number">14</span>))</span><br><span class="line">  spider = Spider(page)</span><br><span class="line">  res = spider.start()</span><br><span class="line">  result.append(res)</span><br><span class="line">  <span class="keyword">if</span> page == <span class="number">14</span>:</span><br><span class="line">    print(<span class="string">'所有页面已趴取完...'</span>)</span><br><span class="line"></span><br><span class="line">data = [] <span class="comment"># 处理后的数据</span></span><br><span class="line"><span class="keyword">if</span> len(result) != <span class="number">0</span>:</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    res = list(map(<span class="keyword">lambda</span> item: &#123;</span><br><span class="line">        <span class="string">'url'</span>: baseUrl + item[<span class="number">0</span>],</span><br><span class="line">        <span class="string">'title'</span>: item[<span class="number">1</span>]</span><br><span class="line">      &#125;,i))</span><br><span class="line">    <span class="comment"># 合并两个数组 [] + []</span></span><br><span class="line">    data += res</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 保存到当前文件夹</span></span><br><span class="line">  <span class="keyword">with</span> open(os.path.dirname(__file__) + <span class="string">'/blog.text'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(json.dumps(data))</span><br><span class="line"></span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure><h2 id="十七、常用库"><a href="#十七、常用库" class="headerlink" title="十七、常用库"></a>十七、常用库</h2><h3 id="datetime库"><a href="#datetime库" class="headerlink" title="datetime库"></a>datetime库</h3><blockquote><p><code>datetime</code>库可以从系统中获得时间，并以用户选择的格式输出</p></blockquote><blockquote><ul><li><code>datetime</code>库以格林威治时间为基础，每天由<code>3600*24</code>秒精准定义</li><li><code>datetime</code>库以类的方式提供多种日期和时间</li></ul></blockquote><ul><li><code>datetime.date</code>：日期表示类，坑人表示年、月、日等。</li><li><code>datetime.time</code>：时间表示类，可表示小时、分钟、秒、毫秒等。</li><li><code>datetime.datetime</code>：日期和时间表示类，功能覆盖date和time类。</li><li><code>datetime.timedelta</code>：与时间间隔有关的类。</li><li><code>datetime.tzinfo</code>：与时区有关的信息表示类。</li></ul><p><strong>datetime库解析</strong></p><ol><li><code>datetime.now()</code>：返回一个<code>datetime</code>类型，表示当前日期和时间，精确到毫秒</li></ol><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">&gt;&gt;&gt;now=datetime.now()</span><br><span class="line">&gt;&gt;&gt;now</span><br><span class="line">datetime.datetime(<span class="number">2018</span>, <span class="number">5</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">49</span>, <span class="number">38</span>, <span class="number">627464</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li><code>datetime.utcnow()</code>：返回一个<code>datetime</code>类型，表示当前日期和时间的<code>UTC</code>（世界标准时间）表示，精确到毫秒</li></ol><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">&gt;&gt;&gt;utcnow=datetime.now()</span><br><span class="line">&gt;&gt;&gt;utcnow</span><br><span class="line">datetime.datetime(<span class="number">2018</span>, <span class="number">5</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">788612</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>直接使用<code>datetime()</code>构造一个日期和时间对象：</li></ol><blockquote><p>datetime(Y,M,D,hour=0,minute=0,second=0,microsecond=0)</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;some=datetime(<span class="number">2018</span>,<span class="number">5</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">&gt;&gt;&gt;some</span><br><span class="line">datetime.datetime(<span class="number">2018</span>, <span class="number">5</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><strong>datetime类的常用属性</strong></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>some.min</code></td><td>固定返回<code>datetime</code>的最小时间对象，<code>datetime(1,1,1,0,0)</code></td></tr><tr><td><code>some.max</code></td><td>固定返回datetime的最大时间对象，<code>datetime(9999,12,31,23,59,59,999999)</code></td></tr><tr><td><code>some.year</code></td><td>返回<code>some</code>包含的年份</td></tr><tr><td><code>some.month</code></td><td>返回<code>some</code>包含的月份</td></tr><tr><td><code>some.day</code></td><td>返回<code>some</code>包含的日期</td></tr><tr><td><code>some.hour</code></td><td>返回<code>some</code>包含的小时</td></tr><tr><td><code>some.minute</code></td><td>返回<code>some</code>包含的分钟</td></tr><tr><td><code>some.second</code></td><td>返回<code>some</code>包含的秒钟</td></tr><tr><td><code>some.microsecond</code></td><td>返回<code>some</code>包含的毫秒</td></tr></tbody></table><p><strong>datetime类的常用时间格式化方法</strong></p><p>|属性|    描述|<br>|<code>some.isofomat()</code>    |采用<code>ISO8601</code>标准显示时间|<br>|<code>some.isoweekday()</code>    |根据日期计算星期|<br>|<code>some.strftime()</code>    |根据格式化字符串<code>format</code>进行格式显示的方法|</p><p><strong>strftime()方法用于输出特定格式时间</strong></p><table><thead><tr><th>格式化字符串</th><th>对象</th><th>取值范围</th></tr></thead><tbody><tr><td><code>%Y</code></td><td>年</td><td><code>0001~9999</code></td></tr><tr><td><code>%m</code></td><td>月</td><td><code>1~12</code></td></tr><tr><td><code>%B</code></td><td>月名</td><td><code>January~December</code></td></tr><tr><td><code>%b</code></td><td>月名缩写</td><td><code>Jan~Dec</code></td></tr><tr><td><code>%d</code></td><td>日期</td><td><code>01~31</code></td></tr><tr><td><code>%A</code></td><td>星期</td><td><code>Monday~Sunday</code></td></tr><tr><td><code>%a</code></td><td>星期缩写</td><td><code>Mon~Sum</code></td></tr><tr><td><code>%H</code></td><td>小时（<code>24h</code>制）</td><td><code>00~23</code></td></tr><tr><td><code>%I</code></td><td>小时（<code>12h</code>制）</td><td><code>01~12</code></td></tr><tr><td><code>%p</code></td><td>上、下午</td><td><code>AM/PM</code></td></tr><tr><td><code>%M</code></td><td>分钟</td><td><code>00~59</code></td></tr><tr><td><code>%S</code></td><td>秒</td><td><code>00~59</code></td></tr></tbody></table><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;some=datetime(<span class="number">2018</span>,<span class="number">5</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">&gt;&gt;&gt;some.strftime(<span class="string">"%Y年%m月%d日，%H时%M分%S秒"</span>)</span><br><span class="line"><span class="string">'2018年05月13日，17时00分00秒'</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;print(<span class="string">'今天是&#123;0:%Y&#125;年&#123;0:%m&#125;月&#123;0:%d&#125;日'</span>.format(some))</span><br><span class="line">今天是<span class="number">2018</span>年<span class="number">05</span>月<span class="number">13</span>日</span><br></pre></td></tr></table></figure><h3 id="random库"><a href="#random库" class="headerlink" title="random库"></a>random库</h3><blockquote><p>random库采用梅森旋转算法生成伪随机数序列，可用于除随机性要求更高的加解密算法外的大多数工程应用</p></blockquote><ul><li><code>Python</code>内置的<code>random</code>库主要用于产生各种分布的伪随机数序列</li><li><code>random</code>库提供<code>9</code>个常用函数</li></ul><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>seed(a=None)</code></td><td>初始化随机数种子，默认值为当前系统时间</td></tr><tr><td><code>random()</code></td><td>生成一个<code>[0.0,1.0]</code>之间的随机小数</td></tr><tr><td><code>randint(a,b)</code></td><td>生成一个<code>[a,b]</code>之间的整数</td></tr><tr><td><code>getrandbits(k)</code></td><td>生成一个<code>k</code>比特长度的随机整数</td></tr><tr><td><code>randrange(start,stop[,step])</code></td><td>生成一个[start,stop]之间以<code>step</code>为步数的随机整数</td></tr><tr><td><code>uniform(a,b)</code></td><td>生成一个<code>[a,b]</code>之间的随机小数</td></tr><tr><td><code>choice(seq)</code></td><td>从序列类型，例如列表中随机返回一个元素</td></tr><tr><td><code>shuffle(seq)</code></td><td>将序列类型中的元素随机排列，返回打乱后的序列</td></tr><tr><td><code>sample(pok,k)</code></td><td>从<code>pop</code>类型中随机选取<code>k</code>个元素，以列表类型返回</td></tr></tbody></table><blockquote><p>生成随机数之前可通过<code>seed()</code>函数指定随机数种子，随机数种子一般是一个整数，只要种子相同，每次生成的随机数序列也相同</p></blockquote><h2 id="十八、技巧"><a href="#十八、技巧" class="headerlink" title="十八、技巧"></a>十八、技巧</h2><p><strong>查看命令信息</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例如</span></span><br><span class="line">help(filter)</span><br></pre></td></tr></table></figure><p><strong>列表中取出符合条件的元素</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 取出大于5的元素</span></span><br><span class="line"></span><br><span class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">arr1 = filter(lambda x: x&gt;<span class="number">5</span>, arr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转化为列表</span></span><br><span class="line">list(arr1)</span><br></pre></td></tr></table></figure><p><strong>列表推导式</strong></p><blockquote><p>代替for和if嵌套循环。最常用的方式</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for循环列子</span></span><br><span class="line">list = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"> <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">    list.append(x*x)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 等价于上面写法</span></span><br><span class="line">[x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> x%<span class="number">2</span> == <span class="number">0</span>]</span><br></pre></td></tr></table></figure><p><strong>字典推导式</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一般写法</span></span><br><span class="line">d = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">'xxx'</span>:</span><br><span class="line">  d[i] = i</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 字典推导写法</span></span><br><span class="line">&#123;<span class="attr">i</span>:i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">'xxx'</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>文件读取</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># f = open('test.txt',encoding='utf-8')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># data = f.readlines()</span></span><br><span class="line"><span class="comment"># for line in data:</span></span><br><span class="line"><span class="comment">#   print(line.strip('\n'))</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># f.close()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推荐用with处理</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">  <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">    print(line.strip(<span class="string">'\n'</span>))</span><br></pre></td></tr></table></figure><p><strong>函数作用域</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">def test():</span><br><span class="line">    global a <span class="comment">// 定义一个全局变量</span></span><br></pre></td></tr></table></figure><p><strong>装饰器</strong></p><blockquote><p>本质是返回一个闭包</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'start'</span>)</span><br><span class="line">        func()</span><br><span class="line">        print(<span class="string">'end'</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line">    </span><br><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'测试'</span>)</span><br></pre></td></tr></table></figure><p><strong>交换两个变量</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x,y = y,x</span><br></pre></td></tr></table></figure><h2 id="十九、Python知识体系"><a href="#十九、Python知识体系" class="headerlink" title="十九、Python知识体系"></a>十九、Python知识体系</h2><p><img src="http://blog.poetries.top/img-repo/2019/12/181.png" alt="Python知识体系"></p><h2 id="二十、更多参考"><a href="#二十、更多参考" class="headerlink" title="二十、更多参考"></a>二十、更多参考</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400" target="_blank" rel="noopener">廖雪峰python3教程</a></li><li><a href="https://jupyter.org/" target="_blank" rel="noopener">Jupyter Notebook</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近需要用&lt;code&gt;python&lt;/code&gt;做数据分析，决定开始学&lt;code&gt;python&lt;/code&gt;，总结一些基础笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、导语&quot;&gt;&lt;a href=&quot;#一、导语&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="python" scheme="http://blog.poetries.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>ES2015/ES2016/ES2017/ES2018/ES2019</title>
    <link href="http://blog.poetries.top/2019/11/17/es6-review-summary/"/>
    <id>http://blog.poetries.top/2019/11/17/es6-review-summary/</id>
    <published>2019-11-17T11:50:43.000Z</published>
    <updated>2020-07-24T04:13:35.029Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://blog.poetries.top/img-repo/2019/11/123.png" alt></p><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><ul><li><code>ES6</code>是<code>ECMA</code>为<code>JavaScript</code>制定的第6个标准版本</li><li>标准委员会最终决定，标准在每年6月正式发布并作为当年的正式版本，接下来的时间里就在此版本的基础上进行改动，直到下一年6月草案就自然变成新一年的版本，这样一来就无需以前的版本号，只要用年份标记即可。<code>ECMAscript 2015</code>是在2015年6月发布ES6的第一个版本。以此类推，<code>ECMAscript</code> 2016是ES6的第二个版本、 ECMAscript 2017是ES6的第三个版本。ES6既是一个历史名词也是一个泛指，含义是5.1版本以后的JavaScript下一代标准，目前涵盖了<code>ES2015</code>、<code>ES2016</code>、<code>ES2017</code>、<code>ES2018</code>、<code>ES2019</code></li></ul><blockquote><p>所以有些文章上提到的ES7(实质上是ES2016)、ES8(实质上是ES2017)、ES9(实质上是ES2018)、ES10(实质上是ES2019)，实质上都是一些不规范的概念。从ES1到ES6，每个标准都是花了好几年甚至十多年才制定下来，你一个ES6到ES7，ES7到ES8，才用了一年，按照这样的定义下去，那不是很快就ES20了。用正确的概念来说ES6目前涵盖了ES2015、ES2016、ES2017、ES2018、ES2019</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/11/124.png" alt></p><h2 id="二、ES2015"><a href="#二、ES2015" class="headerlink" title="二、ES2015"></a>二、ES2015</h2><p><img src="http://blog.poetries.top/img-repo/2019/11/125.png" alt></p><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><ul><li><code>const</code>命令：声明常量</li><li><code>let</code>命令：声明变量</li></ul><blockquote><p>作用</p></blockquote><p><strong>作用域</strong></p><ul><li>全局作用域</li><li>函数作用域：<code>function() {}</code></li><li>块级作用域：<code>{}</code></li></ul><p><strong>作用范围</strong></p><ul><li><code>var</code>命令在全局代码中执行</li><li><code>const</code>命令和<code>let</code>命令只能在代码块中执行</li></ul><p><strong>赋值使用</strong></p><ul><li><code>const</code>命令声明常量后必须立马赋值</li><li><code>let</code>命令声明变量后可立马赋值或使用时赋值</li></ul><blockquote><p>声明方法：<code>var</code>、<code>const</code>、<code>let</code>、<code>function</code>、<code>class</code>、<code>import</code></p></blockquote><p><strong>重点难点</strong></p><ul><li>不允许重复声明</li><li>未定义就使用会报错：<code>const</code>命令和<code>let</code>命令不存在变量提升</li><li>暂时性死区：在代码块内使用let命令声明变量之前，该变量都不可用</li></ul><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><ul><li>字符串解构：<code>const [a, b, c, d, e] = &quot;hello&quot;</code></li><li>数值解构：<code>const { toString: s } = 123</code></li><li>布尔值解构：<code>const { toString: b } = true</code></li></ul><p><strong>对象解构</strong></p><ul><li>形式：<code>const { x, y } = { x: 1, y: 2 }</code></li><li>默认：<code>const { x, y = 2 } = { x: 1 }</code></li><li>改名：<code>const { x, y: z } = { x: 1, y: 2 }</code></li></ul><p><strong>数组解构</strong></p><ul><li>规则：数据结构具有<code>Iterator</code>接口可采用数组形式的解构赋值</li><li>形式：<code>const [x, y] = [1, 2]</code></li><li>默认：<code>const [x, y = 2] = [1]</code></li></ul><p><strong>函数参数解构</strong></p><ul><li>数组解构：<code>function Func([x = 0, y = 1]) {}</code></li><li>对象解构：<code>function Func({ x = 0, y = 1 } = {}) {}</code></li></ul><p><strong>应用场景</strong></p><ul><li>交换变量值：<code>[x, y] = [y, x]</code></li><li>返回函数多个值：<code>const [x, y, z] = Func()</code></li><li>定义函数参数：<code>Func([1, 2])</code></li><li>提取JSON数据：<code>const { name, version } = packageJson</code></li><li>定义函数参数默认值：<code>function Func({ x = 1, y = 2 } = {}) {}</code></li><li>遍历Map结构：<code>for (let [k, v] of Map) {}</code></li><li>输入模块指定属性和方法：<code>const { readFile, writeFile } = require(&quot;fs&quot;)</code></li></ul><p><strong>重点难点</strong></p><ul><li>匹配模式：只要等号两边的模式相同，左边的变量就会被赋予对应的值</li><li>解构赋值规则：只要等号右边的值不是对象或数组，就先将其转为对象</li><li>解构默认值生效条件：属性值严格等于undefined</li><li>解构遵循匹配模式</li><li>解构不成功时变量的值等于<code>undefined</code></li><li><code>undefined</code>和<code>null</code>无法转为对象，因此无法进行解构</li></ul><h3 id="字符串扩展"><a href="#字符串扩展" class="headerlink" title="字符串扩展"></a>字符串扩展</h3><ul><li><code>Unicode</code>表示法：大括号包含表示<code>Unicode</code>字符(<code>\u{0xXX}</code>或<code>\u{0XXX}</code>)</li><li>字符串遍历：可通过for-of遍历字符串</li><li>字符串模板：可单行可多行可插入变量的增强版字符串</li><li>标签模板：函数参数的特殊调用</li><li><code>String.raw()</code>：返回把字符串所有变量替换且对斜杠进行转义的结果</li><li><code>String.fromCodePoint()</code>：返回码点对应字符</li><li><code>codePointAt()</code>：返回字符对应码点(<code>String.fromCodePoint()</code>的逆操作)</li><li><code>normalize()</code>：把字符的不同表示方法统一为同样形式，返回新字符串(Unicode正规化)</li><li><code>repeat()</code>：把字符串重复n次，返回新字符串</li><li><code>matchAll()</code>：返回正则表达式在字符串的所有匹配</li><li><code>includes()</code>：是否存在指定字符串</li><li><code>startsWith()</code>：是否存在字符串头部指定字符串</li><li><code>endsWith()</code>：是否存在字符串尾部指定字符串</li></ul><p><strong>重点难点</strong></p><blockquote><p>以上扩展方法均可作用于由4个字节储存的<code>Unicode</code>字符上</p></blockquote><h3 id="数值扩展"><a href="#数值扩展" class="headerlink" title="数值扩展"></a>数值扩展</h3><ul><li>二进制表示法：0b或0B开头表示二进制(<code>0bXX</code>或<code>0BXX</code>)</li><li>八进制表示法：0o或0O开头表示二进制(<code>0oXX</code>或<code>0OXX</code>)</li><li><code>Number.EPSILON</code>：数值最小精度</li><li><code>Number.MIN_SAFE_INTEGER</code>：最小安全数值(<code>-2^53</code>)</li><li><code>Number.MAX_SAFE_INTEGER</code>：最大安全数值(<code>2^53</code>)</li><li><code>Number.parseInt()</code>：返回转换值的整数部分</li><li><code>Number.parseFloat()</code>：返回转换值的浮点数部分</li><li><code>Number.isFinite()</code>：是否为有限数值</li><li><code>Number.isNaN()</code>：是否为<code>NaN</code></li><li><code>Number.isInteger()</code>：是否为整数</li><li><code>Number.isSafeInteger()</code>：是否在数值安全范围内</li><li><code>Math.trunc()</code>：返回数值整数部分</li><li><code>Math.sign()</code>：返回数值类型(正数1、负数-1、零0)</li><li><code>Math.cbrt()</code>：返回数值立方根</li><li><code>Math.clz32()</code>：返回数值的32位无符号整数形式</li><li><code>Math.imul()</code>：返回两个数值相乘</li><li><code>Math.fround()</code>：返回数值的32位单精度浮点数形式</li><li><code>Math.hypot()</code>：返回所有数值平方和的平方根</li><li><code>Math.expm1()</code>：返回<code>e^n - 1</code></li><li><code>Math.log1p()</code>：返回<code>1 + n</code>的自然对数(<code>Math.log(1 + n)</code>)</li><li><code>Math.log10()</code>：返回以10为底的n的对数</li><li><code>Math.log2()</code>：返回以2为底的n的对数</li><li><code>Math.sinh()</code>：返回n的双曲正弦</li><li><code>Math.cosh()</code>：返回n的双曲余弦</li><li><code>Math.tanh()</code>：返回n的双曲正切</li><li><code>Math.asinh()</code>：返回n的反双曲正弦</li><li><code>Math.acosh()</code>：返回n的反双曲余弦</li><li><code>Math.atanh()</code>：返回n的反双曲正切</li></ul><h3 id="对象扩展"><a href="#对象扩展" class="headerlink" title="对象扩展"></a>对象扩展</h3><ul><li>简洁表示法：直接写入变量和函数作为对象的属性和方法<code>({ prop, method() {} })</code></li><li>属性名表达式：字面量定义对象时使用[]定义键(<code>[prop]</code>，不能与上同时使用)</li><li><strong>方法的name属性：返回方法函数名</strong><ul><li>取值函数(<code>getter</code>)和存值函数(<code>setter</code>)：<code>get/set</code>函数名(属性的描述对象在get和set上)</li><li><code>bind</code>返回的函数：<code>bound</code> 函数名</li><li><code>Function</code>构造函数返回的函数实例：<code>anonymous</code></li></ul></li><li>属性的可枚举性和遍历：描述对象的<code>enumerable</code></li><li><code>super</code>关键字：指向当前对象的原型对象(只能用在对象的简写方法中<code>method() {}</code>)</li><li><code>Object.is()</code>：对比两值是否相等</li><li><code>Object.assign()</code>：合并对象(浅拷贝)，返回原对象</li><li><code>Object.getPrototypeOf()</code>：返回对象的原型对象</li><li><code>Object.setPrototypeOf()</code>：设置对象的原型对象</li><li><code>__proto__</code>：返回或设置对象的原型对象</li></ul><p><strong>属性遍历</strong></p><ul><li>描述：自身、可继承、可枚举、非枚举、<code>Symbol</code></li><li><strong>遍历</strong><ul><li><code>for-in</code>：遍历对象自身可继承可枚举属性</li><li><code>Object.keys()</code>：返回对象自身可枚举属性的键组成的数组</li><li><code>Object.getOwnPropertyNames()</code>：返回对象自身可继承可枚举非枚举属性的键组成的数组</li><li><code>Object.getOwnPropertySymbols()</code>：返回对象<code>Symbol</code>属性的键组成的数组</li><li><code>Reflect.ownKeys()</code>：返回对象自身可继承可枚举非枚举Symbol属性的键组成的数组</li></ul></li><li><strong>规则</strong><ul><li>首先遍历所有数值键，按照数值升序排列</li><li>其次遍历所有字符串键，按照加入时间升序排列</li><li>最后遍历所有<code>Symbol</code>键，按照加入时间升序排列</li></ul></li></ul><h3 id="数组扩展"><a href="#数组扩展" class="headerlink" title="数组扩展"></a>数组扩展</h3><ul><li>扩展运算符(<code>...</code>)：转换数组为用逗号分隔的参数序列(<code>[...arr]</code>，相当于<code>rest/spread</code>参数的逆运算)</li><li><code>Array.from()</code>：转换具有<code>Iterator</code>接口的数据结构为真正数组，返回新数组<ul><li>类数组对象：包含<code>length</code>的对象、<code>Arguments</code>对象、<code>NodeList</code>对象</li><li>可遍历对象：<code>String</code>、<code>Set</code>结构、<code>Map</code>结构、<code>Generator</code>函数</li></ul></li><li><code>Array.of()</code>：转换一组值为真正数组，返回新数组</li><li><code>copyWithin()</code>：把指定位置的成员复制到其他位置，返回原数组</li><li><code>find()</code>：返回第一个符合条件的成员</li><li><code>findIndex()</code>：返回第一个符合条件的成员索引值</li><li><code>fill()</code>：根据指定值填充整个数组，返回原数组</li><li><code>keys()</code>：返回以索引值为遍历器的对象</li><li><code>values()</code>：返回以属性值为遍历器的对象</li><li><code>entries()</code>：返回以索引值和属性值为遍历器的对象</li><li>数组空位：ES6明确将数组空位转为<code>undefined</code>(空位处理规不一，建议避免出现)</li></ul><p><strong>扩展应用</strong></p><ul><li>克隆数组：<code>const arr = [...arr1]</code></li><li>合并数组：<code>const arr = [...arr1, ...arr2]</code></li><li>拼接数组：<code>arr.push(...arr1)</code></li><li>代替<code>apply</code>：<code>Math.max.apply(null, [x, y]) =&gt; Math.max(...[x, y])</code></li><li>转换字符串为数组：<code>[...&quot;hello&quot;]</code></li><li>转换类数组对象为数组：<code>[...Arguments, ...NodeList]</code></li><li>转换可遍历对象为数组：<code>[...String, ...Set, ...Map, ...Generator]</code></li><li>与数组解构赋值结合：<code>const [x, ...rest/spread] = [1, 2, 3]</code></li><li>计算<code>Unicode</code>字符长度：<code>Array.from(&quot;hello&quot;).length =&gt; [...&quot;hello&quot;].length</code></li></ul><p><strong>重点难点</strong></p><ul><li>使用<code>keys()</code>、<code>values()</code>、<code>entries()</code>返回的遍历器对象，可用<code>for-of</code>自动遍历或<code>next()</code>手动遍历</li></ul><h3 id="函数扩展"><a href="#函数扩展" class="headerlink" title="函数扩展"></a>函数扩展</h3><ul><li><strong>参数默认值：为函数参数指定默认值</strong><ul><li>形式：<code>function Func(x = 1, y = 2) {}</code></li><li>参数赋值：惰性求值(函数调用后才求值)</li><li>参数位置：尾参数</li><li>参数作用域：函数作用域</li><li>声明方式：默认声明，不能用<code>const</code>或<code>let</code>再次声明</li><li><code>length</code>：返回没有指定默认值的参数个数</li><li>与解构赋值默认值结合：<code>function Func({ x = 1, y = 2 } = {}) {}</code>  </li><li><strong>应用</strong><ul><li>指定某个参数不得省略，省略即抛出错误：<code>function Func(x = throwMissing()) {}</code></li><li>将参数默认值设为<code>undefined</code>，表明此参数可省略：<code>Func(undefined, 1)</code></li></ul></li></ul></li><li><strong>rest/spread参数(…)：返回函数多余参数</strong><ul><li>形式：以数组的形式存在，之后不能再有其他参数</li><li>作用：代替<code>Arguments</code>对象</li><li><code>length</code>：返回没有指定默认值的参数个数但不包括<code>rest/spread</code>参数</li></ul></li><li><strong>严格模式：在严格条件下运行JS</strong><ul><li>应用：只要函数参数使用默认值、解构赋值、扩展运算符，那么函数内部就不能显式设定为严格模式</li></ul></li><li><strong>name属性</strong>：返回函数的函数名<ul><li>将匿名函数赋值给变量：空字符串(ES5)、变量名(ES6)</li><li>将具名函数赋值给变量：函数名(ES5和ES6)</li><li><code>bind</code>返回的函数：<code>bound</code> 函数名(ES5和ES6)</li><li><code>Function</code>构造函数返回的函数实例：<code>anonymous</code>(ES5和ES6)</li></ul></li><li><strong>箭头函数(=&gt;)：函数简写</strong><ul><li>无参数：<code>() =&gt; {}</code></li><li>单个参数：<code>x =&gt; {}</code></li><li>多个参数：<code>(x, y) =&gt; {}</code></li><li>解构参数：<code>({x, y}) =&gt; {}</code></li><li>嵌套使用：部署管道机制</li><li><code>this</code>指向固定化<ul><li>并非因为内部有绑定<code>this</code>的机制，而是根本没有自己的<code>this</code>，导致内部的<code>this</code>就是外层代码块的<code>this</code></li><li>因为没有<code>this</code>，因此不能用作构造函数</li></ul></li></ul></li><li><strong>尾调用优化：只保留内层函数的调用帧</strong><ul><li><strong>尾调用</strong><ul><li>定义：某个函数的最后一步是调用另一个函数</li><li>形式：<code>function f(x) { return g(x); }</code></li></ul></li><li><strong>尾递归</strong><ul><li>定义：函数尾调用自身</li><li>作用：只要使用尾递归就不会发生栈溢出，相对节省内存</li><li>实现：把所有用到的内部变量改写成函数的参数并使用参数默认值</li></ul></li></ul></li></ul><p><strong>箭头函数误区</strong></p><ul><li>函数体内的<code>this</code>是定义时所在的对象而不是使用时所在的对象</li><li>可让<code>this</code>指向固定化，这种特性很有利于封装回调函数</li><li>不可当作构造函数，因此箭头函数不可使用<code>new</code>命令</li><li>不可使用<code>yield</code>命令，因此箭头函数不能用作<code>Generator</code>函数</li><li>不可使用<code>Arguments</code>对象，此对象在函数体内不存在(可用<code>rest/spread</code>参数代替)</li><li>返回对象时必须在对象外面加上括号</li></ul><h3 id="正则扩展"><a href="#正则扩展" class="headerlink" title="正则扩展"></a>正则扩展</h3><ul><li><strong>变更<code>RegExp</code>构造函数入参</strong>：允许首参数为正则对象，尾参数为正则修饰符(返回的正则表达式会忽略原正则表达式的修饰符)</li><li><strong>正则方法调用变更</strong>：字符串对象的<code>match()</code>、<code>replace()</code>、<code>search()</code>、<code>split()</code>内部调用转为调用<code>RegExp</code>实例对应的<code>RegExp.prototype[Symbol.方法]</code></li><li><strong>u修饰符</strong>：<code>Unicode</code>模式修饰符，正确处理大于<code>\uFFFF</code>的<code>Unicode</code>字符<ul><li>点字符(<code>.</code>)</li><li><code>Unicode</code>表示法</li><li>量词</li><li>预定义模式</li><li><code>i</code>修饰符</li><li>转义</li></ul></li><li><strong>y修饰符</strong>：粘连修饰符，确保匹配必须从剩余的第一个位置开始全局匹配(与g修饰符作用类似)</li><li><strong>unicode</strong>：是否设置<code>u</code>修饰符</li><li><strong>sticky</strong>：是否设置<code>y</code>修饰符</li><li><strong>flags</strong>：正则表达式的修饰符</li></ul><p><strong>重点难点</strong></p><ul><li><code>y</code>修饰符隐含头部匹配标志<code>^</code></li><li>单单一个y修饰符对<code>match()</code>只能返回第一个匹配，必须与g修饰符联用才能返回所有匹配</li></ul><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><ul><li>定义：独一无二的值</li><li>声明：<code>const set = Symbol(str)</code></li><li>入参：字符串(可选)</li></ul><p><strong>方法</strong></p><ul><li><code>Symbol()</code>：创建以参数作为描述的Symbol值(不登记在全局环境)</li><li><code>Symbol.for()</code>：创建以参数作为描述的Symbol值，如存在此参数则返回原有的Symbol值(先搜索后创建，登记在全局环境)</li><li><code>Symbol.keyFor()</code>：返回已登记的<code>Symbol</code>值的描述(只能返回<code>Symbol.for()</code>的<code>key</code>)</li><li><code>Object.getOwnPropertySymbols()</code>：返回对象中所有用作属性名的<code>Symbol</code>值的数组</li></ul><p><strong>内置</strong></p><ul><li><code>Symbol.hasInstance</code>：指向一个内部方法，当其他对象使用<code>instanceof</code>运算符判断是否为此对象的实例时会调用此方法</li><li><code>Symbol.isConcatSpreadable</code>：指向一个布尔值，定义对象用于<code>Array.prototype.concat()</code>时是否可展开</li><li><code>Symbol.species</code>：指向一个构造函数，当实例对象使用自身构造函数时会调用指定的构造函数</li><li><code>Symbol.match</code>：指向一个函数，当实例对象被<code>String.prototype.match()</code>调用时会重新定义<code>match()</code>的行为</li><li><code>Symbol.replace</code>：指向一个函数，当实例对象被<code>String.prototype.replace()</code>调用时会重新定义<code>replace()</code>的行为</li><li><code>Symbol.search</code>：指向一个函数，当实例对象被<code>String.prototype.search()</code>调用时会重新定义<code>search()</code>的行为</li><li><code>Symbol.split</code>：指向一个函数，当实例对象被<code>String.prototype.split()</code>调用时会重新定义<code>split()</code>的行为</li><li><code>Symbol.iterator</code>：指向一个默认遍历器方法，当实例对象执行<code>for-of</code>时会调用指定的默认遍历器</li><li><code>Symbol.toPrimitive</code>：指向一个函数，当实例对象被转为原始类型的值时会返回此对象对应的原始类型值</li><li><code>Symbol.toStringTag</code>：指向一个函数，当实例对象被<code>Object.prototype.toString()</code>调用时其返回值会出现在<code>toString()</code>返回的字符串之中表示对象的类型</li><li><code>Symbol.unscopables</code>：指向一个对象，指定使用<code>with</code>时哪些属性会被<code>with</code>环境排除</li></ul><p><strong>数据类型</strong></p><ul><li><code>Undefined</code></li><li><code>Null</code></li><li><code>String</code></li><li><code>Number</code></li><li><code>Boolean</code></li><li><code>Object</code>(包含<code>Array</code>、<code>Function</code>、<code>Date</code>、<code>RegExp</code>、<code>Error</code>)</li><li><code>Symbol</code></li></ul><p><strong>应用场景</strong></p><ul><li>唯一化对象属性名：属性名属于<code>Symbol</code>类型，就都是独一无二的，可保证不会与其他属性名产生冲突</li><li>消除魔术字符串：在代码中多次出现且与代码形成强耦合的某一个具体的字符串或数值</li><li>遍历属性名：无法通过<code>for-in</code>、<code>for-of</code>、<code>Object.keys()</code>、<code>Object.getOwnPropertyNames()</code>、<code>JSON.stringify()</code>返回，只能通过<code>Object.getOwnPropertySymbols</code>返回<br>启用模块的<code>Singleton</code>模式：调用一个类在任何时候返回同一个实例(<code>window</code>和<code>global</code>)，- 使用<code>Symbol.for()</code>来模拟全局的<code>Singleton</code>模式</li></ul><p><strong>重点难点</strong></p><ul><li><code>Symbol()</code>生成一个原始类型的值不是对象，因此<code>Symbol()</code>前不能使用<code>new</code>命令</li><li><code>Symbol()</code>参数表示对当前<code>Symbol</code>值的描述，相同参数的<code>Symbol()</code>返回值不相等</li><li><code>Symbol</code>值不能与其他类型的值进行运算</li><li><code>Symbol</code>值可通过<code>String()</code>或<code>toString()</code>显式转为字符串</li><li><code>Symbol</code>值作为对象属性名时，此属性是公开属性，但不是私有属性</li><li><code>Symbol</code>值作为对象属性名时，只能用方括号运算符(<code>[]</code>)读取，不能用点运算符(<code>.</code>)读取`</li><li><code>Symbol</code>值作为对象属性名时，不会被常规方法遍历得到，可利用此特性为对象定义非私有但又只用于内部的方法</li></ul><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p><strong>Set</strong></p><ul><li>定义：类似于数组的数据结构，成员值都是唯一且没有重复的值</li><li>声明：<code>const set = new Set(arr)</code></li><li>入参：具有<code>Iterator</code>接口的数据结构</li><li>属性<ul><li><code>constructor</code>：构造函数，返回<code>Set</code></li><li><code>size</code>：返回实例成员总数</li></ul></li><li>方法<ul><li><code>add()</code>：添加值，返回实例</li><li><code>delete()</code>：删除值，返回布尔值</li><li><code>has()</code>：检查值，返回布尔值</li><li><code>clear()</code>：清除所有成员</li><li><code>keys()</code>：返回以属性值为遍历器的对象</li><li><code>values()</code>：返回以属性值为遍历器的对象</li><li><code>entries()</code>：返回以属性值和属性值为遍历器的对象</li><li><code>forEach()</code>：使用回调函数遍历每个成员</li></ul></li></ul><p><strong>应用场景</strong></p><ul><li>去重字符串：<code>[...new Set(str)].join(&quot;&quot;)</code></li><li>去重数组：<code>[...new Set(arr)]或Array.from(new Set(arr))</code></li><li>集合数组<ul><li>声明：<code>const a = new Set(arr1)、const b = new Set(arr2)</code></li><li>并集：<code>new Set([...a, ...b])</code></li><li>交集：<code>new Set([...a].filter(v =&gt; b.has(v)))</code></li><li>差集：<code>new Set([...a].filter(v =&gt; !b.has(v)))</code></li></ul></li><li>映射集合<ul><li>声明：<code>let set = new Set(arr)</code></li><li>映射：<code>set = new Set([...set].map(v =&gt; v * 2))</code>或<code>set = new Set(Array.from(set, v =&gt; v * 2))</code></li></ul></li></ul><p><strong>重点难点</strong></p><ul><li>遍历顺序：插入顺序</li><li>没有键只有值，可认为键和值两值相等</li><li>添加多个<code>NaN</code>时，只会存在一个<code>NaN</code></li><li>添加相同的对象时，会认为是不同的对象</li><li>添加值时不会发生类型转换<code>(5 !== &quot;5&quot;)</code></li><li><code>keys()</code>和<code>values()</code>的行为完全一致，<code>entries()</code>返回的遍历器同时包括键和值且两值相等</li></ul><p><strong>WeakSet</strong></p><ul><li>定义：和<code>Set</code>结构类似，成员值只能是对象</li><li>声明：<code>const set = new WeakSet(arr)</code></li><li>入参：具有`Iterator接口的数据结构</li><li>属性<ul><li><code>constructor</code>：构造函数，返回<code>WeakSet</code></li></ul></li><li>方法<ul><li><code>add()</code>：添加值，返回实例</li><li><code>delete()</code>：删除值，返回布尔值</li><li><code>has()</code>：检查值，返回布尔值</li></ul></li></ul><p><strong>应用场景</strong></p><ul><li>储存<code>DOM</code>节点：<code>DOM</code>节点被移除时自动释放此成员，不用担心这些节点从文档移除时会引发内存泄漏</li><li>临时存放一组对象或存放跟对象绑定的信息：只要这些对象在外部消失，它在<code>WeakSe</code>t结构中的引用就会自动消</li></ul><p><strong>重点难点</strong></p><ul><li>成员都是弱引用，垃圾回收机制不考虑<code>WeakSet</code>结构对此成员的引用</li><li>成员不适合引用，它会随时消失，因此ES6规定<code>WeakSet</code>结构不可遍历</li><li>其他对象不再引用成员时，垃圾回收机制会自动回收此成员所占用的内存，不考虑此成员是否还存在于<code>WeakSet</code>结构中</li></ul><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p><strong>Map</strong></p><ul><li>定义：类似于对象的数据结构，成员键可以是任何类型的值</li><li>声明：<code>const set = new Map(arr)</code></li><li>入参：具有<code>Iterator</code>接口且每个成员都是一个双元素数组的数据结构</li><li>属性<ul><li><code>constructor</code>：构造函数，返回<code>Map</code></li><li><code>size</code>：返回实例成员总数</li></ul></li><li>方法<ul><li><code>get()</code>：返回键值对</li><li><code>set()</code>：添加键值对，返回实例</li><li><code>delete()</code>：删除键值对，返回布尔值</li><li><code>has()</code>：检查键值对，返回布尔值</li><li><code>clear()</code>：清除所有成员</li><li><code>keys()</code>：返回以键为遍历器的对象</li><li><code>values()</code>：返回以值为遍历器的对象</li><li><code>entries()</code>：返回以键和值为遍历器的对象</li><li><code>forEach()</code>：使用回调函数遍历每个成员</li></ul></li></ul><p><strong>重点难点</strong></p><ul><li>遍历顺序：插入顺序</li><li>对同一个键多次赋值，后面的值将覆盖前面的值</li><li>对同一个对象的引用，被视为一个键</li><li>对同样值的两个实例，被视为两个键</li><li>键跟内存地址绑定，只要内存地址不一样就视为两个键</li><li>添加多个以<code>NaN</code>作为键时，只会存在一个以<code>NaN</code>作为键的值</li><li><code>Object</code>结构提供字符串—值的对应，<code>Map</code>结构提供值—值的对应</li></ul><p><strong>WeakMap</strong></p><ul><li>定义：和<code>Map</code>结构类似，成员键只能是对象</li><li>声明：<code>const set = new WeakMap(arr)</code></li><li>入参：具有Iterator接口且每个成员都是一个双元素数组的数据结构</li><li>属性<ul><li><code>constructor</code>：构造函数，返回<code>WeakMap</code></li></ul></li><li>方法<ul><li><code>get()</code>：返回键值对</li><li><code>set()</code>：添加键值对，返回实例</li><li><code>delete()</code>：删除键值对，返回布尔值</li><li><code>has()</code>：检查键值对，返回布尔值</li></ul></li></ul><p><strong>应用场景</strong></p><ul><li>储存DOM节点：DOM节点被移除时自动释放此成员键，不用担心这些节点从文档移除时会引发内存泄漏</li><li>部署私有属性：内部属性是实例的弱引用，删除实例时它们也随之消失，不会造成内存泄漏</li></ul><p><strong>重点难点</strong></p><ul><li>成员键都是弱引用，垃圾回收机制不考虑<code>WeakMap</code>结构对此成员键的引用</li><li>成员键不适合引用，它会随时消失，因此ES6规定<code>WeakMap</code>结构不可遍历</li><li>其他对象不再引用成员键时，垃圾回收机制会自动回收此成员所占用的内存，不考虑此成员是否还存在于<code>WeakMap</code>结构中</li><li>一旦不再需要，成员会自动消失，不用手动删除引用</li><li>弱引用的只是键而不是值，值依然是正常引用</li><li>即使在外部消除了成员键的引用，内部的成员值依然存在</li></ul><h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><ul><li>定义：修改某些操作的默认行为</li><li>声明：<code>const proxy = new Proxy(target, handler)</code></li><li>入参<ul><li><code>target</code>：拦截的目标对象</li><li><code>handler</code>：定制拦截行为</li></ul></li><li><p>方法</p><ul><li><code>Proxy.revocable()</code>：返回可取消的<code>Proxy</code>实例(返回<code>{ proxy, revoke }</code>，通过<code>revoke()</code>取消代理)</li></ul></li><li><p>拦截方式</p><ul><li><code>get()</code>：拦截对象属性读取</li><li><code>set()</code>：拦截对象属性设置，返回布尔值</li><li><code>has()</code>：拦截对象属性检查<code>k in obj</code>，返回布尔值</li><li><code>deleteProperty()</code>：拦截对象属性删除<code>delete obj[k]</code>，返回布尔值</li><li><code>defineProperty()</code>：拦截对象属性定义<code>Object.defineProperty()</code>、<code>Object.defineProperties()</code>，返回布尔值</li><li><code>ownKeys()</code>：拦截对象属性遍历<code>for-in</code>、<code>Object.keys()</code>、<code>Object.getOwnPropertyNames()、Object.getOwnPropertySymbols()</code>，返回数组</li><li><code>getOwnPropertyDescriptor()</code>：拦截对象属性描述读取<code>Object.getOwnPropertyDescriptor()</code>，返回对象</li><li><code>getPrototypeOf()</code>：拦截对象原型读取<code>instanceof</code>、<code>Object.getPrototypeOf()</code>、<code>Object.prototype.__proto__</code>、<code>Object.prototype.isPrototypeOf()</code>、<code>Reflect.getPrototypeOf()</code>，返回对象</li><li><code>setPrototypeOf()</code>：拦截对象原型设置<code>Object.setPrototypeOf()</code>，返回布尔值</li><li><code>isExtensible()</code>：拦截对象是否可扩展读取<code>Object.isExtensible()</code>，返回布尔值</li><li><code>preventExtensions()</code>：拦截对象不可扩展设置<code>Object.preventExtensions()</code>，返回布尔值</li><li><code>apply()</code>：拦截<code>Proxy</code>实例作为函数调用<code>proxy()</code>、<code>proxy.apply()</code>、<code>proxy.call()</code></li><li><code>construct()</code>：拦截<code>Proxy</code>实例作为构造函数调用<code>new proxy()</code></li></ul></li></ul><p><strong>应用场景</strong></p><ul><li><code>Proxy.revocable()</code>：不允许直接访问对象，必须通过代理访问，一旦访问结束就收回代理权不允许再次访问</li><li><code>get()</code>：读取未知属性报错、读取数组负数索引的值、封装链式操作、生成DOM嵌套节点</li><li><code>set()</code>：数据绑定(<code>Vue</code>数据绑定实现原理)、确保属性值设置符合要求、防止内部属性被外部读写</li><li><code>has()</code>：隐藏内部属性不被发现、排除不符合属性条件的对象</li><li><code>deleteProperty()</code>：保护内部属性不被删除</li><li><code>defineProperty()</code>：阻止属性被外部定义</li><li><code>ownKeys()</code>：保护内部属性不被遍历</li></ul><p><strong>重点难点</strong></p><ul><li>要使<code>Proxy</code>起作用，必须针对实例进行操作，而不是针对目标对象进行操作</li><li>没有设置任何拦截时，等同于直接通向原对象</li><li>属性被定义为不可读写/扩展/配置/枚举时，使用拦截方法会报错</li><li>代理下的目标对象，内部<code>this</code>指向<code>Proxy</code>代理</li></ul><h3 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h3><ul><li>定义：保持<code>Object</code>方法的默认行为</li><li>方法<ul><li><code>get()</code>：返回对象属性</li><li><code>set()</code>：设置对象属性，返回布尔值</li><li><code>has()</code>：检查对象属性，返回布尔值</li><li><code>deleteProperty()</code>：删除对象属性，返回布尔值</li><li><code>defineProperty()</code>：定义对象属性，返回布尔值</li><li><code>ownKeys()</code>：遍历对象属性，返回数<code>组(Object.getOwnPropertyNames()+Object.getOwnPropertySymbols())</code></li><li><code>getOwnPropertyDescriptor()</code>：返回对象属性描述，返回对象</li><li><code>getPrototypeOf()</code>：返回对象原型，返回对象</li><li><code>setPrototypeOf()</code>：设置对象原型，返回布尔值</li><li><code>isExtensible()</code>：返回对象是否可扩展，返回布尔值</li><li><code>preventExtensions()</code>：设置对象不可扩展，返回布尔值</li><li><code>apply()</code>：绑定<code>this</code>后执行指定函数</li><li><code>construct()</code>：调用构造函数创建实例</li></ul></li></ul><p><strong>设计目的</strong></p><ul><li><code>Object</code>属于语言内部的方法放到<code>Reflect</code>上</li><li>将某些<code>Object</code>方法报错情况改成返回<code>false</code></li><li>让<code>Object</code>操作变成函数行为</li><li><code>Proxy</code>与<code>Reflect</code>相辅相成</li></ul><p><strong>废弃方法</strong></p><ul><li><code>Object.defineProperty()</code> =&gt; <code>Reflect.defineProperty()</code></li><li><code>Object.getOwnPropertyDescriptor()</code> =&gt; <code>Reflect.getOwnPropertyDescriptor()</code></li></ul><blockquote><p>数据绑定：观察者模式</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> observerQueue = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="keyword">const</span> observe = <span class="function"><span class="params">fn</span> =&gt;</span> observerQueue.add(fn);</span><br><span class="line"><span class="keyword">const</span> observable = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line">    <span class="keyword">set</span>(tgt, key, val, receiver) &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.set(tgt, key, val, receiver);</span><br><span class="line">        observerQueue.forEach(<span class="function"><span class="params">v</span> =&gt;</span> v());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = observable(&#123; <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">name</span>: <span class="string">"Yajun"</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> print = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;person.name&#125;</span> is <span class="subst">$&#123;person.age&#125;</span> years old`</span>);</span><br><span class="line">observe(print);</span><br><span class="line">person.name = <span class="string">"Joway"</span>;</span><br></pre></td></tr></table></figure><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><ul><li>定义：对一类具有共同特征的事物的抽象(构造函数语法糖)</li><li>原理：类本身指向构造函数，所有方法定义在<code>prototype</code>上，可看作构造函数的另一种写法(<code>Class === Class.prototype.constructor</code>)</li><li><strong>方法和关键字</strong><ul><li><code>constructor()</code>：构造函数，<code>new</code>命令生成实例时自动调用</li><li><code>extends</code>：继承父类</li><li><code>super</code>：新建父类的this</li><li><code>static</code>：定义静态属性方法</li><li><code>get</code>：取值函数，拦截属性的取值行为</li><li><code>set</code>：存值函数，拦截属性的存值行为</li></ul></li><li><strong>属性</strong><ul><li><code>__proto__</code>：构造函数的继承(总是指向父类)</li><li><code>__proto__.__proto__</code>：子类的原型的原型，即父类的原型(总是指向父类的<code>__proto__</code>)</li><li><code>prototype.__proto__</code>：属性方法的继承(总是指向父类的<code>prototype</code>)</li></ul></li><li><strong>静态属性</strong>：定义类完成后赋值属性，该属性不会被实例继承，只能通过类来调用</li><li><strong>静态方法</strong>：使用static定义方法，该方法不会被实例继承，只能通过类来调用(方法中的this指向类，而不是实例)</li><li><strong>继承</strong><ul><li>实质<ul><li>ES5实质：先创造子类实例的<code>this</code>，再将父类的属性方法添加到<code>this</code>上(<code>Parent.apply(this)</code>)</li><li><code>ES6</code>实质：先将父类实例的属性方法加到<code>this</code>上(调用<code>super()</code>)，再用子类构造函数修改<code>this</code></li><li><code>super</code><ul><li>作为函数调用：只能在构造函数中调用<code>super()</code>，内部<code>this</code>指向继承的当前子类(<code>super()</code>调用后才可在构造函数中使用<code>this</code>)</li><li>作为对象调用：在普通方法中指向父类的原型对象，在静态方法中指向父类</li></ul></li><li>显示定义：使用<code>constructor() { super(); }</code>定义继承父类，没有书写则显示定义</li><li>子类继承父类：子类使用父类的属性方法时，必须在构造函数中调用<code>super()</code>，否则得不到父类的<code>this</code><ul><li>父类静态属性方法可被子类继承</li><li>类继承父类后，可从<code>super</code>上调用父类静态属性方法</li></ul></li></ul></li></ul></li><li><strong>实例</strong>：类相当于实例的原型，所有在类中定义的属性方法都会被实例继承<ul><li>显式指定属性方法：使用<code>this</code>指定到自身上(使用<code>Class.hasOwnProperty()</code>可检测到)</li><li>隐式指定属性方法：直接声明定义在对象原型上(使用<code>Class.__proto__.hasOwnProperty()</code>可检测到)</li></ul></li><li><strong>表达式</strong><ul><li>类表达式：<code>const Class = class {}</code></li><li><code>name</code>属性：返回紧跟<code>class</code>后的类名</li><li>属性表达式：<code>[prop]</code></li><li><code>Generator</code>方法：<code>* mothod() {}</code></li><li><code>Async</code>方法：<code>async mothod() {}</code></li></ul></li><li><strong>this指向</strong>：解构实例属性或方法时会报错<ul><li>绑定<code>this</code>：<code>this.mothod = this.mothod.bind(this)</code></li><li>箭头函数：<code>this.mothod = () =&gt; this.mothod()</code></li></ul></li><li><strong>属性定义位置</strong><ul><li>定义在构造函数中并使用<code>this</code>指向</li><li>定义在类最顶层</li></ul></li><li><strong><code>new.target</code>：确定构造函数是如何调用</strong></li></ul><p><strong>原生构造函数</strong></p><ul><li><code>String()</code></li><li><code>Number()</code></li><li><code>Boolean()</code></li><li><code>Array()</code></li><li><code>Object()</code></li><li><code>Function()</code></li><li><code>Date()</code></li><li><code>RegExp()</code></li><li><code>Error()</code></li></ul><p><strong>重点难点</strong></p><ul><li>在实例上调用方法，实质是调用原型上的方法</li><li><code>Object.assign()</code>可方便地一次向类添加多个方法<code>(Object.assign(Class.prototype, { ... }))</code></li><li>类内部所有定义的方法是不可枚举的(<code>non-enumerable</code>)</li><li>构造函数默认返回实例对象(<code>this</code>)，可指定返回另一个对象</li><li>取值函数和存值函数设置在属性的<code>Descriptor</code>对象上</li><li>类不存在变量提升</li><li>利用<code>new.target === Class</code>写出不能独立使用必须继承后才能使用的类</li><li>子类继承父类后，<code>this</code>指向子类实例，通过<code>super</code>对某个属性赋值，赋值的属性会变成子类实例的属性</li><li>使用<code>super</code>时，必须显式指定是作为函数还是作为对象使用</li><li><code>extends</code>不仅可继承类还可继承原生的构造函数</li></ul><p><strong>私有属性方法</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="built_in">Symbol</span>(<span class="string">"name"</span>);</span><br><span class="line"><span class="keyword">const</span> print = <span class="built_in">Symbol</span>(<span class="string">"print"</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age) &#123;</span><br><span class="line">        <span class="keyword">this</span>[name] = <span class="string">"Bruce"</span>;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    [print]() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>[name]&#125;</span> is <span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span> years old`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>继承混合类</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CopyProperties</span>(<span class="params">target, source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> <span class="built_in">Reflect</span>.ownKeys(source)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key !== <span class="string">"constructor"</span> &amp;&amp; key !== <span class="string">"prototype"</span> &amp;&amp; key !== <span class="string">"name"</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptor(source, key);</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(target, key, desc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MixClass</span>(<span class="params">...mixins</span>) </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Mix</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>() &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> mixin <span class="keyword">of</span> mixins) &#123;</span><br><span class="line">                CopyProperties(<span class="keyword">this</span>, <span class="keyword">new</span> mixin());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> mixin <span class="keyword">of</span> mixins) &#123;</span><br><span class="line">        CopyProperties(Mix, mixin);</span><br><span class="line">        CopyProperties(Mix.prototype, mixin.prototype);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Mix;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">MixClass</span>(<span class="title">Person</span>, <span class="title">Kid</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><p><strong>命令</strong></p><ul><li><code>export</code>：规定模块对外接口<ul><li>默认导出：<code>export default Person</code>(导入时可指定模块任意名称，无需知晓内部真实名称)</li><li>单独导出：<code>export const name = &quot;Bruce&quot;</code></li><li>按需导出：<code>export { age, name, sex }(推荐)</code></li><li>改名导出：<code>export { name as newName }</code></li></ul></li><li><code>import</code>：导入模块内部功能<ul><li>默认导入：<code>import Person from &quot;person&quot;</code></li><li>整体导入：<code>import * as Person from &quot;person&quot;</code></li><li>按需导入：<code>import { age, name, sex } from &quot;person&quot;</code></li><li>改名导入：<code>import { name as newName } from &quot;person&quot;</code></li><li>自执导入：<code>import &quot;person&quot;</code></li><li>复合导入：<code>import Person, { name } from &quot;person&quot;</code></li></ul></li><li>复合模式：<code>export</code>命令和<code>import</code>命令结合在一起写成一行，变量实质没有被导入 当前模块，相当于对外转发接口，导致当前模块无法直接使用其导入变量<ul><li>默认导入导出：<code>export { default } from &quot;person&quot;</code></li><li>整体导入导出：<code>export * from &quot;person&quot;</code></li><li>按需导入导出：<code>export { age, name, sex } from &quot;person&quot;</code></li><li>改名导入导出：<code>export { name as newName } from &quot;person&quot;</code></li><li>具名改默认导入导出：<code>export { name as default } from &quot;person&quot;</code></li><li>默认改具名导入导出：<code>export { default as name } from &quot;person&quot;</code></li></ul></li><li>继承：默认导出和改名导出结合使用可使模块具备继承性</li><li>设计思想：尽量地静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量</li><li>严格模式：ES6模块自动采用严格模式(不管模块头部是否添加<code>use strict</code>)</li></ul><p><strong>模块方案</strong></p><ul><li><strong>CommonJS</strong>：用于服务器(动态化依赖)</li><li><strong>AMD</strong>：用于浏览器(动态化依赖)</li><li><strong>CMD</strong>：用于浏览器(动态化依赖)</li><li><strong>UMD</strong>：用于浏览器和服务器(动态化依赖)</li><li><strong>ESM</strong>：用于浏览器和服务器(静态化依赖)</li></ul><p><strong>加载方式</strong></p><ul><li><strong>运行时加载</strong><ul><li>定义：整体加载模块生成一个对象，再从对象上获取需要的属性和方法进行加载(全部加载)</li><li>影响：只有运行时才能得到这个对象，导致无法在编译时做静态优化</li></ul></li><li><strong>编译时加载</strong></li><li>定义：直接从模块中获取需要的属性和方法进行加载(按需加载)</li><li>影响：在编译时就完成模块加载，效率比其他方案高，但无法引用模块本身(本身不是对象)，可拓展JS高级语法(宏和类型校验)</li></ul><p><strong>加载实现</strong></p><ul><li><strong>传统加载</strong>：通过<code>&lt;script&gt;</code>进行同步或异步加载脚本<ul><li>同步加载：<code>&lt;script src=&quot;&quot;&gt;&lt;/script&gt;</code></li><li><code>Defer</code>异步加载：<code>&lt;script src=&quot;&quot; defer&gt;&lt;/script&gt;</code>(顺序加载，渲染完再执行)</li><li><code>Async</code>异步加载：<code>&lt;script src=&quot;&quot; async&gt;&lt;/script&gt;</code>(乱序加载，下载完就执行)</li></ul></li><li><strong>模块加载</strong>：<code>&lt;script type=&quot;module&quot; src=&quot;&quot;&gt;&lt;/script&gt;</code>(默认是<code>Defer</code>异步加载)</li></ul><p><strong>CommonJS和ESM的区别</strong></p><ul><li><code>CommonJS</code>输出值的拷贝，<code>ESM</code>输出值的引用<ul><li><code>CommonJS</code>一旦输出一个值，模块内部的变化就影响不到这个值</li><li><code>ESM</code>是动态引用且不会缓存值，模块里的变量绑定其所在的模块，等到脚本真正执行时，再根据这个只读引用到被加载的那个模块里去取值</li></ul></li><li><code>CommonJS</code>是运行时加载，<code>ESM</code>是编译时加载<ul><li><code>CommonJS</code>加载模块是对象(即<code>module.exports</code>)，该对象只有在脚本运行完才会生成</li><li><code>ESM</code>加载模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成</li></ul></li></ul><p><strong>Node加载</strong></p><ul><li>背景：<code>CommonJS</code>和<code>ESM</code>互不兼容，目前解决方案是将两者分开，采用各自的加载方案</li><li>区分：要求<code>ESM</code>采用<code>.mjs</code>后缀文件名<ul><li><code>require()</code>不能加载<code>.mjs</code>文件，只有<code>import</code>命令才可加载<code>.mjs</code>文件</li><li><code>.mjs</code>文件里不能使用<code>require()</code>，必须使用<code>import</code>命令加载文件</li></ul></li><li>驱动：<code>node --experimental-modules file.mjs</code></li><li>限制：<code>Node</code>的<code>import</code>命令目前只支持加载本地模块(<code>file:协</code>议)，不支持加载远程模块</li><li>加载优先级<ul><li>脚本文件省略后缀名：依次尝试加载四个后缀名文件(<code>.mjs</code>、<code>.js</code>、<code>.json</code>、<code>node</code>)</li><li>以上不存在：尝试加载<code>package.json</code>的<code>main</code>字段指定的脚本</li><li>以上不存在：依次尝试加载名称为<code>index</code>四个后缀名文件(<code>.mjs</code>、<code>.js</code>、<code>.json</code>、<code>node</code>)</li><li>以上不存在：报错</li></ul></li><li>不存在的内部变量：<code>arguments</code>、<code>exports</code>、<code>module</code>、<code>require</code>、<code>this</code>、<code>__dirname</code>、<code>__filename</code></li><li><code>CommonJS</code>加载<code>ESM</code><ul><li>不能使用<code>require()</code>，只能使用<code>import()</code></li></ul></li><li><code>ESM</code>加载<code>CommonJS</code><ul><li>自动将<code>module.exports</code>转化成<code>export default</code></li><li><code>CommonJS</code>输出缓存机制在ESM加载方式下依然有效</li><li>采用<code>import</code>命令加载<code>CommonJS</code>模块时，不允许采用按需导入，应使用默认导入或整体导入</li></ul></li></ul><p><strong>循环加载</strong></p><ul><li>定义：脚本<code>A</code>的执行依赖脚本<code>B</code>，而脚本<code>A</code>的执行又依赖脚本B</li><li><strong>加载原理</strong><ul><li><code>CommonJS</code>：<code>require()</code>首次加载脚本就会执行整个脚本，在内存里生成一个对象缓存下来，二次加载脚本时直接从缓存中获取</li><li><code>ESM</code>：<code>import</code>命令加载变量不会被缓存，而是成为一个指向被加载模块的引用</li></ul></li><li><strong>循环加载</strong><ul><li><code>CommonJS</code>：只输出已经执行的部分，还未执行的部分不会输出</li><li><code>ESM</code>：需开发者自己保证真正取值时能够取到值(可把变量写成函数形式，函数具有提升作用)</li></ul></li></ul><p><strong>重点难点</strong></p><ul><li><code>ES6</code>模块中，顶层<code>this</code>指向<code>undefined</code>，不应该在顶层代码使用<code>this</code></li><li>`一个模块就是一个独立的文件，该文件内部的所有变量，外部无法获取</li><li><code>export</code>命令输出的接口与其对应的值是动态绑定关系，即通过该接口可获取模块内部实时的值</li><li><code>import</code>命令大括号里的变量名必须与被导入模块对外接口的名称相同</li><li><code>import</code>命令输入的变量只读(本质是输入接口)，不允许在加载模块的脚本里改写接口</li><li><code>import</code>命令命令具有提升效果，会提升到整个模块的头部，首先执行<br>重复执行同一句import语句，只会执行一次</li><li><code>export default</code>命令只能使用一次</li><li><code>export default</code>命令导出的整体模块，在执行<code>import</code>命令时其后不能跟大括号</li><li><code>export default</code>命令本质是输出一个名为<code>default</code>的变量，后面不能跟变量声明语句</li><li><code>export default</code>命令本质是将后面的值赋给名为<code>default</code>的变量，可直接将值写在其后</li><li><code>export default</code>命令和<code>export {}</code>命令可同时存在，对应复合导入</li><li><code>export</code>命令和<code>import</code>命令可出现在模块任何位置，只要处于模块顶层即可，不能处于块级作用域</li><li><code>import()</code>加载模块成功后，此模块会作为一个对象，当作<code>then()</code>的参数，可使用对象解构赋值来获取输出接口</li><li>同时动态加载多个模块时，可使用<code>Promise.all()</code>和<code>import()</code>相结合来实现</li><li><code>import()</code>和结<code>合async/await</code>来书写同步操作的代码</li></ul><p><strong>单例模式：跨模块常量</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常量跨文件共享</span></span><br><span class="line"><span class="comment">// person.js</span></span><br><span class="line"><span class="keyword">const</span> NAME = <span class="string">"Bruce"</span>;</span><br><span class="line"><span class="keyword">const</span> AGE = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">const</span> SEX = <span class="string">"male"</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; AGE, NAME, SEX &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file1.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; AGE &#125; <span class="keyword">from</span> <span class="string">"person"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(AGE);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file2.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; AGE, NAME, SEX &#125; <span class="keyword">from</span> <span class="string">"person"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(AGE, NAME, SEX);</span><br></pre></td></tr></table></figure><blockquote><p>默认导入互换整体导入</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Person from &quot;person&quot;;</span><br><span class="line">console.log(Person.AGE);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import * as Person from &quot;person&quot;;</span><br><span class="line">console.log(Person.default.AGE);</span><br></pre></td></tr></table></figure><h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><ul><li>定义：为各种不同的数据结构提供统一的访问机制</li><li>原理：创建一个指针指向首个成员，按照次序使用<code>next()</code>指向下一个成员，直接到结束位置(数据结构只要部署<code>Iterator</code>接口就可完成遍历操作)</li><li><strong>作用</strong><ul><li>为各种数据结构提供一个统一的简便的访问接口</li><li>使得数据结构成员能够按某种次序排列</li><li><code>ES6</code>创造了新的遍历命令<code>for-of</code>，<code>Iterator</code>接口主要供<code>for-of</code>消费</li></ul></li><li>形式：<code>for-of</code>(自动去寻找<code>Iterator</code>接口)</li><li>数据结构<ul><li>集合：<code>Array</code>、<code>Object</code>、<code>Set</code>、<code>Map</code></li><li>原生具备接口的数据结构：<code>String</code>、<code>Array</code>、<code>Set</code>、<code>Map</code>、<code>TypedArray</code>、<code>Arguments、NodeList</code></li></ul></li><li>部署：默认部署在<code>Symbol.iterator</code>(具备此属性被认为可遍历的<code>iterable</code>)</li><li>遍历器对象<ul><li><code>next()</code>：下一步操作，返回<code>{ done, value }</code>(必须部署)</li><li><code>return()</code>：<code>for-of</code>提前退出调用，返回<code>{ done: true }</code></li><li><code>throw()</code>：不使用，配合<code>Generator</code>函数使用</li></ul></li></ul><p><strong>ForOf循环</strong></p><ul><li>定义：调用<code>Iterator</code>接口产生遍历器对象(<code>for-of</code>内部调用数据结构的<code>Symbol.iterator()</code>)</li><li>遍历字符串：<code>for-in</code>获取索引，<code>for-of</code>获取值(可识别32位UTF-16字符)</li><li>遍历数组：<code>for-in</code>获取索引，<code>for-of</code>获取值</li><li>遍历对象：<code>for-in</code>获取键，<code>for-of</code>需自行部署</li><li>遍历<code>Set</code>：<code>for-of</code>获取值 =&gt; <code>for (const v of set)</code></li><li>遍历<code>Map</code>：<code>for-of</code>获取键值对 =&gt;  <code>for (const [k, v] of map)</code></li><li>遍历类数组：包含<code>length</code>的对象、<code>Arguments</code>对象、<code>NodeList</code>对象(无<code>Iterator</code>接口的类数组可用<code>Array.from()</code>转换)</li><li>计算生成数据结构：<code>Array</code>、<code>Set</code>、<code>Map</code><ul><li><code>keys()</code>：返回遍历器对象，遍历所有的键</li><li><code>values()</code>：返回遍历器对象，遍历所有的值</li><li><code>entries()</code>：返回遍历器对象，遍历所有的键值对</li></ul></li><li><strong>与for-in区别</strong><ul><li>有着同<code>for-in</code>一样的简洁语法，但没有<code>for-in</code>那些缺点、</li><li>不同于<code>forEach()</code>，它可与<code>break</code>、<code>continue</code>和<code>return</code>配合使用</li><li>提供遍历所有数据结构的统一操作接口</li></ul></li></ul><p><strong>应用场景</strong></p><ul><li>改写具有<code>Iterator</code>接口的数据结构的<code>Symbol.iterator</code></li><li>解构赋值：对<code>Set</code>进行结构</li><li>扩展运算符：将部署Iterator接口的数据结构转为数组</li><li><code>yield*</code>：<code>yield*</code>后跟一个可遍历的数据结构，会调用其遍历器接口</li><li>接受数组作为参数的函数：<code>for-of</code>、<code>Array.from()</code>、<code>new Set()</code>、<code>new WeakSet()</code>、<code>new Map()</code>、<code>new WeakMap()</code>、<code>Promise.all()</code>、<code>Promise.race()</code></li></ul><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><ul><li>定义：包含异步操作结果的对象</li><li>状态<ul><li>进行中：<code>pending</code></li><li>已成功：<code>resolved</code></li><li>已失败：<code>rejected</code></li></ul></li><li>特点<ul><li>对象的状态不受外界影响</li><li>一旦状态改变就不会再变，任何时候都可得到这个结果</li></ul></li><li>声明：<code>new Promise((resolve, reject) =&gt; {})</code></li><li>出参<ul><li><code>resolve</code>：将状态从未完成变为成功，在异步操作成功时调用，并将异步操作的结果作为参数传递出去</li><li><code>reject</code>：将状态从未完成变为失败，在异步操作失败时调用，并将异步操作的错误作为参数传递出去</li></ul></li><li>方法<ul><li><code>then()</code>：分别指定<code>resolved</code>状态和<code>rejected</code>状态的回调函数<ul><li>第一参数：状态变为<code>resolved</code>时调用</li><li>第二参数：状态变为<code>rejected</code>时调用(可选)</li></ul></li><li><code>catch()</code>：指定发生错误时的回调函数</li><li><code>Promise.all()</code>：将多个实例包装成一个新实例，返回全部实例状态变更后的结果数组(齐变更再返回)<ul><li>入参：具有<code>Iterator</code>接口的数据结构</li><li>成功：只有全部实例状态变成<code>resolved</code>，最终状态才会变成<code>resolved</code></li><li>失败：其中一个实例状态变成<code>rejected</code>，最终状态就会变成<code>rejected</code></li></ul></li><li><code>Promise.race()</code>：将多个实例包装成一个新实例，返回全部实例状态优先变更后的结果(先变更先返回)</li><li><code>Promise.resolve()</code>：将对象转为Promise对象(等价于<code>new Promise(resolve =&gt; resolve())</code>)<ul><li><code>Promise</code>实例：原封不动地返回入参</li><li><code>Thenable</code>对象：将此对象转为<code>Promise</code>对象并返回(<code>Thenable</code>为包含<code>then()</code>的对象，执行<code>then()</code>相当于执行此对象的<code>then()</code>)</li><li>不具有<code>then()</code>的对象：将此对象转为<code>Promise</code>对象并返回，状态为<code>resolved</code></li><li>不带参数：返回<code>Promise</code>对象，状态为<code>resolved</code></li></ul></li><li><code>Promise.reject()</code>：将对象转为状态为<code>rejected</code>的<code>Promise</code>对象(等价于<code>new Promise((resolve, reject) =&gt; reject())</code>)</li></ul></li></ul><p><strong>应用场景</strong></p><ul><li>加载图片</li><li><code>AJAX</code>转<code>Promise</code>对象</li></ul><p><strong>重点难点</strong></p><ul><li>只有异步操作的结果可决定当前状态是哪一种，其他操作都无法改变这个状态</li><li>状态改变只有两种可能：从<code>pending</code>变为<code>resolved</code>、从<code>pending</code>变为<code>rejected</code></li><li>一旦新建<code>Promise</code>对象就会立即执行，无法中途取消</li><li>不设置回调函数，内部抛错不会反应到外部</li><li>当处于<code>pending</code>时，无法得知目前进展到哪一个阶段</li><li>实例状态变为<code>resolved</code>或<code>rejected</code>时，会触发<code>then()</code>绑定的回调函数</li><li><code>resolve()</code>和<code>reject()</code>的执行总是晚于本轮循环的同步任务</li><li><code>then()</code>返回新实例，其后可再调用另一个<code>then()</code></li><li><code>then()</code>运行中抛出错误会被<code>catch()</code>捕获</li><li><code>reject()</code>的作用等同于抛出错误</li><li>实例状态已变成<code>resolved</code>时，再抛出错误是无效的，不会被捕获，等于没有抛出</li><li>实例状态的错误具有冒泡性质，会一直向后传递直到被捕获为止，错误总是会被下一个<code>catch()</code>捕获</li><li>不要在<code>then()</code>里定义<code>rejected</code>状态的回调函数(不使用其第二参数)</li><li>建议使用<code>catch()</code>捕获错误，不要使用<code>then()</code>第二个参数捕获</li><li>没有使用<code>catch()</code>捕获错误，实例抛错不会传递到外层代码，即不会有任何反应</li><li>作为参数的实例定义了<code>catch()</code>，一旦被<code>rejected</code>并不会触发<code>Promise.all()</code>的<code>catch()</code></li><li><code>Promise.reject()</code>的参数会原封不动地作为<code>rejected</code>的理由，变成后续方法的参数</li></ul><h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><ul><li>定义：封装多个内部状态的异步编程解决方案</li><li>形式：调用<code>Generator</code>函数(该函数不执行)返回指向内部状态的指针对象(不是运行结果)</li><li>声明：<code>function* Func() {}</code></li><li>方法<ul><li><code>next()</code>：使指针移向下一个状态，返回<code>{ done, value }</code>(入参会被当作上一个<code>yield</code>命令表达式的返回值)</li><li><code>return()</code>：返回指定值且终结遍历<code>Generator</code>函数，返回<code>{ done: true, value: 入参 }</code></li><li><code>throw()</code>：在<code>Generator</code>函数体外抛出错误，在<code>Generator</code>函数体内捕获错误，返回自定义的<code>new Errow()</code></li></ul></li><li><code>yield</code>命令：声明内部状态的值(<code>return</code>声明结束返回的值)<ul><li>遇到<code>yield</code>命令就暂停执行后面的操作，并将其后表达式的值作为返回对象的<code>value</code></li><li>下次调用<code>next()</code>时，再继续往下执行直到遇到下一个<code>yield</code>命令</li><li>没有再遇到<code>yield</code>命令就一直运行到<code>Generator</code>函数结束，直到遇到<code>return</code>语句为止并将其后表达式的值作为返回对象的<code>value</code></li><li><code>Generator</code>函数没有<code>return</code>语句则返回对象的<code>value</code>为<code>undefined</code></li></ul></li><li><code>yield*</code>命令：在一个<code>Generator</code>函数里执行另一个<code>Generator</code>函数(后随具有<code>Iterator</code>接口的数据结构)</li><li>遍历：通过<code>for-of</code>自动调用<code>next()</code></li><li>作为对象属性<ul><li>全写：<code>const obj = { method: function*() {} }</code></li><li>简写：<code>const obj = { * method() {} }</code></li></ul></li><li>上下文：执行产生的上下文环境一旦遇到<code>yield</code>命令就会暂时退出堆栈(但并不消失)，所有变量和对象会冻结在当前状态，等到对它执行<code>next()</code>时，这个上下文环境又会重新加入调用栈，冻结的变量和对象恢复执行</li></ul><p><strong>方法异同</strong></p><ul><li><strong>相同点</strong>：<ul><li><code>next()</code>、<code>throw()</code>、<code>return()</code>本质上是同一件事，作用都是让函数恢复执行且使用不同的语句替换yield命令</li></ul></li><li><strong>不同点</strong><ul><li><code>next()</code>：将<code>yield</code>命令替换成一个值</li><li><code>return()</code>：将<code>yield</code>命令替换成一个<code>return</code>语句</li><li><code>throw()</code>：将<code>yield</code>命令替换成一个<code>throw</code>语句</li></ul></li></ul><p><strong>应用场景</strong></p><ul><li>异步操作同步化表达</li><li>控制流管理</li><li>为对象部署<code>Iterator</code>接口：把<code>Generator</code>函数赋值给对象的<code>Symbol.iterator</code>，从而使该对象具有<code>Iterator</code>接口</li><li>作为具有<code>Iterator</code>接口的数据结构</li></ul><p><strong>重点难点</strong></p><ul><li>每次调用<code>next()</code>，指针就从函数头部或上次停下的位置开始执行，直到遇到下一个<code>yield</code>命令或<code>return</code>语句为止</li><li>函数内部可不用<code>yield</code>命令，但会变成单纯的暂缓执行函数(还是需要<code>next()</code>触发)</li><li><code>yield</code>命令是暂停执行的标记，<code>next()</code>是恢复执行的操作</li><li><code>yield</code>命令用在另一个表达式中必须放在圆括号里</li><li><code>yield</code>命令用作函数参数或放在赋值表达式的右边，可不加圆括号</li><li><code>yield</code>命令本身没有返回值，可认为是返回<code>undefined</code></li><li><code>yield</code>命令表达式为惰性求值，等<code>next()</code>执行到此才求值</li><li>函数调用后生成遍历器对象，此对象的<code>Symbol.iterator</code>是此对象本身</li><li>在函数运行的不同阶段，通过<code>next()</code>从外部向内部注入不同的值，从而调整函数行为</li><li>首个<code>next()</code>用来启动遍历器对象，后续才可传递参数</li><li>想首次调用<code>next()</code>时就能输入值，可在函数外面再包一层</li><li>一旦<code>next()</code>返回对象的<code>done</code>为<code>true</code>，<code>for-of</code>遍历会中止且不包含该返回对象</li><li>函数内部部署<code>try-finally</code>且正在执行<code>try</code>，那么<code>return()</code>会导致立刻进入<code>finally</code>，执行完<code>finally</code>以后整个函数才会结束</li><li>函数内部没有部署<code>try-catch</code>，<code>throw()</code>抛错将被外部<code>try-catch</code>捕获</li><li><code>throw()</code>抛错要被内部捕获，前提是必须至少执行过一次<code>next()</code></li><li><code>throw()</code>被捕获以后，会附带执行下一条<code>yield</code>命令</li><li>函数还未开始执行，这时<code>throw()</code>抛错只可能抛出在函数外部</li></ul><blockquote><p>首次next()可传值</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Wrapper</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> generator = func(...args);</span><br><span class="line">        generator.next();</span><br><span class="line">        <span class="keyword">return</span> generator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> print = Wrapper(<span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`First Input: <span class="subst">$&#123;<span class="keyword">yield</span>&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"done"</span>;</span><br><span class="line">&#125;);</span><br><span class="line">print().next(<span class="string">"hello"</span>);</span><br></pre></td></tr></table></figure><h2 id="ES2016"><a href="#ES2016" class="headerlink" title="ES2016"></a>ES2016</h2><p><img src="http://blog.poetries.top/img-repo/2019/11/126.png" alt></p><h3 id="数值扩展-1"><a href="#数值扩展-1" class="headerlink" title="数值扩展"></a>数值扩展</h3><ul><li>指数运算符(<code>**</code>)：数值求幂(相当于<code>Math.pow()</code>)</li></ul><h3 id="数组扩展-1"><a href="#数组扩展-1" class="headerlink" title="数组扩展"></a>数组扩展</h3><ul><li><code>includes()</code>：是否存在指定成员</li></ul><h2 id="ES2017"><a href="#ES2017" class="headerlink" title="ES2017"></a>ES2017</h2><p><img src="http://blog.poetries.top/img-repo/2019/11/127.png" alt></p><p><strong>声明</strong></p><ul><li>共享内存和原子操作：由全局对象<code>SharedArrayBuffer</code>和<code>Atomics</code>实现，将数据存储在一块共享内存空间中，这些数据可在<code>JS</code>主线程和<code>web-worker</code>线程之间共享</li></ul><h3 id="字符串扩展-1"><a href="#字符串扩展-1" class="headerlink" title="字符串扩展"></a>字符串扩展</h3><ul><li><code>padStart()</code>：把指定字符串填充到字符串头部，返回新字符串</li><li><code>padEnd()</code>：把指定字符串填充到字符串尾部，返回新字符串</li></ul><p><strong>对象扩展</strong></p><ul><li><code>Object.getOwnPropertyDescriptors()</code>：返回对象所有自身属性(非继承属性)的描述对象</li><li><code>Object.values()</code>：返回以值组成的数组</li><li><code>Object.entries()</code>：返回以键和值组成的数组</li></ul><h3 id="函数扩展-1"><a href="#函数扩展-1" class="headerlink" title="函数扩展"></a>函数扩展</h3><ul><li>函数参数尾逗号：允许函数最后一个参数有尾逗号</li></ul><p><strong>Async</strong></p><ul><li>定义：使异步函数以同步函数的形式书写(<code>Generator</code>函数语法糖)</li><li>原理：将<code>Generator</code>函数和自动执行器<code>spawn</code>包装在一个函数里</li><li>形式：将<code>Generator</code>函数的<code>*</code>替换成<code>async</code>，将<code>yield</code>替换成<code>await</code></li><li><strong>声明</strong><ul><li>具名函数：<code>async function Func() {}</code></li><li>函数表达式：<code>const func = async function() {}</code></li><li>箭头函数：<code>const func = async() =&gt; {}</code></li><li>对象方法：<code>const obj = { async func() {} }</code></li><li>类方法：<code>class Cla { async Func() {} }</code></li></ul></li><li><strong>await命令</strong>：等待当前<code>Promise</code>对象状态变更完毕<ul><li>正常情况：后面是<code>Promise</code>对象则返回其结果，否则返回对应的值</li><li>后随<code>Thenable</code>对象：将其等同于<code>Promise</code>对象返回其结果</li></ul></li><li><strong>错误处理</strong>：将<code>await</code>命令<code>Promise</code>对象放到<code>try-catch</code>中(可放多个)</li></ul><p><strong>Async对Generator改进</strong></p><ul><li>内置执行器</li><li>更好的语义</li><li>更广的适用性</li><li>返回值是<code>Promise</code>对象</li></ul><p><strong>应用场景</strong></p><ul><li>按顺序完成异步操作</li></ul><p><strong>重点难点</strong></p><ul><li><code>Async</code>函数返回<code>Promise</code>对象，可使用<code>then()</code>添加回调函数</li><li>内部<code>return</code>返回值会成为后续<code>then()</code>的出参</li><li>内部抛出错误会导致返回的<code>Promise</code>对象变为<code>rejected</code>状态，被<code>catch()</code>接收到</li><li>返回的<code>Promise</code>对象必须等到内部所有<code>await</code>命令<code>Promise</code>对象执行完才会发生状态改变，除非遇到<code>return</code>语句或抛出错误</li><li>任何一个<code>await</code>命令<code>Promise</code>对象变为<code>rejected</code>状态，整个<code>Async</code>函数都会中断执行</li><li>希望即使前一个异步操作失败也不要中断后面的异步操作<ul><li>将<code>await</code>命令<code>Promise</code>对象放到<code>try-catch</code>中</li><li><code>await</code>命令<code>Promise</code>对象跟一个<code>catch()</code></li></ul></li><li><code>await</code>命令<code>Promise</code>对象可能变为<code>rejected</code>状态，最好把其放到<code>try-catch</code>中</li><li>多个<code>await</code>命令<code>Promise</code>对象若不存在继发关系，最好让它们同时触发</li><li><code>await</code>命令只能用在<code>Async</code>函数之中，否则会报错</li><li>数组使用<code>forEach()</code>执行<code>async/await</code>会失效，可使用<code>for-of</code>和P<code>romise.all()</code>代替</li><li>可保留运行堆栈，函数上下文随着<code>Async</code>函数的执行而存在，执行完成就消失</li></ul><h2 id="ES2018"><a href="#ES2018" class="headerlink" title="ES2018"></a>ES2018</h2><p><img src="http://blog.poetries.top/img-repo/2019/11/128.png" alt></p><h3 id="字符串扩展-2"><a href="#字符串扩展-2" class="headerlink" title="字符串扩展"></a>字符串扩展</h3><ul><li>放松对标签模板里字符串转义的限制：遇到不合法的字符串转义返回<code>undefined</code>，并且从<code>raw</code>上可获取原字符串</li></ul><p><strong>对象扩展</strong></p><ul><li>扩展运算符(<code>...</code>)：转换对象为用逗号分隔的参数序列(<code>{ ...obj }</code>，相当于<code>rest/spread</code>参数的逆运算)</li></ul><blockquote><p>扩展应用</p></blockquote><ul><li>克隆对象：<code>const obj = { __proto__: Object.getPrototypeOf(obj1), ...obj1 }</code></li><li>合并对象：<code>const obj = { ...obj1, ...obj2 }</code></li><li>转换字符串为对象：<code>{ ...&quot;hello&quot; }</code></li><li>转换数组为对象：<code>{ ...[1, 2] }</code></li><li>与对象解构赋值结合：<code>const { x, ...rest/spread } = { x: 1, y: 2, z: 3 }</code>(不能复制继承自原型对象的属性)</li><li>修改现有对象部分属性：<code>const obj = { x: 1, ...{ x: 2 } }</code></li></ul><h3 id="正则扩展-1"><a href="#正则扩展-1" class="headerlink" title="正则扩展"></a>正则扩展</h3><ul><li><code>s</code>修饰符：<code>dotAll</code>模式修饰符，使<code>.</code>匹配任意单个字符(<code>dotAll</code>模式)</li><li><code>dotAll</code>：是否设置<code>s</code>修饰符</li><li>后行断言：<code>x</code>只有在<code>y</code>后才匹配</li><li>后行否定断言：<code>x</code>只有不在<code>y</code>后才匹配</li><li><strong><code>Unicode</code>属性转义</strong>：匹配符合<code>Unicode</code>某种属性的所有字符<ul><li>正向匹配：<code>\p{PropRule}</code></li><li>反向匹配：<code>\P{PropRule}</code></li><li>限制：<code>\p{...}</code>和<code>\P{...}</code>只对<code>Unicode</code>字符有效，使用时需加上u修饰符</li></ul></li><li><strong>具名组匹配</strong>：为每组匹配指定名字(<code>?&lt;GroupName&gt;</code>)<ul><li>形式：<code>str.exec().groups.GroupName</code></li><li>解构赋值替换<ul><li>声明：<code>const time = &quot;2017-09-11&quot;、const regexp = /(?&lt;year&gt;\d{4})-(?&lt;month&gt;\d{2})-(?&lt;day&gt;\d{2})/u</code></li><li>匹配：<code>time.replace(regexp, &quot;$&lt;day&gt;/$&lt;month&gt;/$&lt;year&gt;&quot;)</code></li></ul></li></ul></li></ul><h3 id="Promise-1"><a href="#Promise-1" class="headerlink" title="Promise"></a>Promise</h3><ul><li><code>finally()</code>：指定不管最后状态如何都会执行的回调函数</li></ul><h3 id="Async"><a href="#Async" class="headerlink" title="Async"></a>Async</h3><ul><li>异步迭代器(<code>for-await-of</code>)：，循环等待每个<code>Promise</code>对象变为<code>resolved</code>状态才进入下一步</li></ul><h2 id="ES2019"><a href="#ES2019" class="headerlink" title="ES2019"></a>ES2019</h2><p><img src="http://blog.poetries.top/img-repo/2019/11/129.png" alt></p><h3 id="字符串扩展-3"><a href="#字符串扩展-3" class="headerlink" title="字符串扩展"></a>字符串扩展</h3><ul><li>直接输入<code>U+2028</code>和<code>U+2029</code>：字符串可直接输入行分隔符和段分隔符</li><li><code>JSON.stringify()</code>改造：可返回不符合<code>UTF-8</code>标准的字符串</li><li><code>trimStart()</code>：消除字符串头部空格，返回新字符串</li><li><code>trimEnd()</code>：消除字符串尾部空格，返回新字符串</li></ul><h3 id="对象扩展-1"><a href="#对象扩展-1" class="headerlink" title="对象扩展"></a>对象扩展</h3><ul><li><code>Object.fromEntries()</code>：返回以键和值组成的对象(<code>Object.entries()</code>的逆操作)</li></ul><h3 id="数组扩展-2"><a href="#数组扩展-2" class="headerlink" title="数组扩展"></a>数组扩展</h3><ul><li><code>flat()</code>：扁平化数组，返回新数组</li><li><code>flatMap()</code>：映射且扁平化数组，返回新数组(只能展开一层数组)</li></ul><h3 id="函数扩展-2"><a href="#函数扩展-2" class="headerlink" title="函数扩展"></a>函数扩展</h3><ul><li><code>toString()</code>改造：返回函数原始代码(与编码一致)</li><li><code>catch()</code>参数可省略：<code>catch()</code>中的参数可省略</li></ul><h3 id="Symbol-1"><a href="#Symbol-1" class="headerlink" title="Symbol"></a>Symbol</h3><ul><li><code>description</code>：返回<code>Symbol</code>值的描述</li></ul><h2 id="ES提案"><a href="#ES提案" class="headerlink" title="ES提案"></a>ES提案</h2><p><img src="http://blog.poetries.top/img-repo/2019/11/130.png" alt></p><h3 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h3><ul><li><code>globalThis</code>对象：作为顶层对象，指向全局环境下的<code>this</code></li><li><code>do</code>表达式：封装块级作用域的操作，返回内部最后执行表达式的值(<code>do{}</code>)</li><li><code>throw</code>表达式：直接使用<code>throw new Error()</code>，无需<code>()</code>或<code>{}</code>包括</li><li><code>!#</code>命令：指定脚本执行器(写在文件首行)</li></ul><h3 id="数值扩展-2"><a href="#数值扩展-2" class="headerlink" title="数值扩展"></a>数值扩展</h3><ul><li>数值分隔符(<code>_</code>)：使用<code>_</code>作为千分位分隔符(增加数值的可读性)</li><li><code>BigInt()</code>：创建任何位数的整数(新增的数据类型，使用<code>n</code>结尾)</li></ul><h3 id="对象扩展-2"><a href="#对象扩展-2" class="headerlink" title="对象扩展"></a>对象扩展</h3><ul><li>链判断操作符(<code>?.</code>)：是否存在对象属性(不存在返回<code>undefined</code>且不再往下执行)</li><li>空判断操作符(<code>??</code>)：是否值为<code>undefined</code>或<code>null</code>，是则使用默认值</li></ul><h3 id="函数扩展-3"><a href="#函数扩展-3" class="headerlink" title="函数扩展"></a>函数扩展</h3><ul><li>函数部分执行：复用函数功能(<code>?</code>表示单个参数占位符，<code>...</code>表示多个参数占位符)</li><li>管道操作符(<code>|&gt;</code>)：把左边表达式的值传入右边的函数进行求值(<code>f(x) =&gt; x |&gt; f</code>)</li><li>绑定运算符(<code>::</code>)：函数绑定(左边是对象右边是函数，取代<code>bind</code>、<code>apply</code>、<code>call</code>调用)<ul><li><code>bind：bar.bind(foo)</code> =&gt; <code>foo::bar</code></li><li><code>apply</code>：bar.apply(foo, arguments)<code>=&gt;</code>foo::bar(…arguments)`</li></ul></li></ul><h3 id="Proxy-1"><a href="#Proxy-1" class="headerlink" title="Proxy"></a>Proxy</h3><ul><li><code>Promise.try()</code>：不想区分是否同步异步函数，包装函数为实例，使用<code>then()</code>指定下一步流程，使用<code>catch()</code>捕获错误</li></ul><h3 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a>Realm</h3><ul><li>定义：提供沙箱功能，允许隔离代码，防止被隔离的代码拿到全局对象</li><li>声明：<code>new Realm().global</code></li></ul><h3 id="Class-1"><a href="#Class-1" class="headerlink" title="Class"></a>Class</h3><ul><li>静态属性：使用<code>static</code>定义属性，该属性不会被实例继承，只能通过类来调用</li><li>私有属性：使用<code>#</code>定义属性，该属性只能在类内部访问</li><li>私有方法：使用<code>#</code>定义方法，该方法只能在类内部访问</li><li>装饰器：使用<code>@</code>注释或修改类和类方法</li></ul><h3 id="Module-1"><a href="#Module-1" class="headerlink" title="Module"></a>Module</h3><ul><li><strong>import()：动态导入(返回Promise)</strong><ul><li>背景：<code>import</code>命令被JS引擎静态分析，先于模块内的其他语句执行，无法取代<code>require()</code>的动态加载功能，提案建议引入<code>import()</code>来代替<code>require()</code></li><li>位置：可在任何地方使用</li><li>区别：<code>require()</code>是同步加载，<code>import()</code>是异步加载</li><li>场景：按需加载、条件加载、模块路径动态化</li></ul></li><li><strong>import.meta：返回脚本元信息</strong></li></ul><h3 id="Async-1"><a href="#Async-1" class="headerlink" title="Async"></a>Async</h3><ul><li>顶层<code>Await</code>：允许在模块的顶层独立使用<code>await</code>命令(借用<code>await</code>解决模块异步加载的问题)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://blog.poetries.top/img-repo/2019/11/123.png&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://blog.poetries.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>初探Cordova结合Vue</title>
    <link href="http://blog.poetries.top/2019/10/07/cordova-for-vue/"/>
    <id>http://blog.poetries.top/2019/10/07/cordova-for-vue/</id>
    <published>2019-10-07T10:10:24.000Z</published>
    <updated>2020-07-24T04:13:35.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><blockquote><p>我们可以使用<code>cordova</code>来打包现有的<code>vue</code>、<code>react</code>、<code>angular</code>应用为<code>app</code>，可以借助<code>cordova</code>来调用手机设备的原生能力，比如拍照、扫码、定位等</p></blockquote><h3 id="1-1-ionic3"><a href="#1-1-ionic3" class="headerlink" title="1.1 ionic3"></a>1.1 ionic3</h3><blockquote><p><code>ionic3=cordova+angular+ionicUI</code>（Ionic UI组件+ Javascript API+Ionic Native） </p></blockquote><ul><li><strong>优点</strong>：它提供了漂亮的<code>UI</code>组件库、强大的<code>JS APi</code>以及基于调用原生的的<code>Native APi</code>,可以让我们快速开发跨平台的混合<code>APP</code>以及移动<code>web</code>页面。（推荐*）</li><li><strong>缺点</strong>：<code>angular</code> <code>react</code> <code>vue</code>开发的移动端应用要打包成<code>app</code>的时候得重新再学习<code>ionic</code></li></ul><h3 id="1-2-cordova"><a href="#1-2-cordova" class="headerlink" title="1.2 cordova"></a>1.2 cordova</h3><blockquote><p><code>cordova</code>: 可以把<code>html css js</code>写的代码打包成<code>app</code>，还可以让<code>js</code>调用原生的<code>api</code>。<code>cordova</code>非常成熟、插件也非常多、扩展性也强，10年的历史</p></blockquote><p><strong>打包App有几个方案</strong></p><ul><li><code>ionic</code></li><li><code>reactNative</code></li><li><code>weex</code></li><li><code>flutter</code></li><li><code>cordova+vue</code></li><li><code>cordova+react</code></li><li><code>cordova+angular</code></li></ul><h2 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h2><h3 id="2-1-用cordova开发android-应用"><a href="#2-1-用cordova开发android-应用" class="headerlink" title="2.1 用cordova开发android 应用"></a>2.1 用cordova开发android 应用</h3><ul><li>安装jdk 、配置jdk</li><li>安装android studio</li><li>安装nodejs</li><li>安装cordova</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 淘宝源安装</span></span><br><span class="line">npm install -g cordova --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install -g cordova</span><br></pre></td></tr></table></figure><p><strong>创建项目cordova create 项目名称</strong></p><blockquote><p><code>cordova create 项目名</code>  <code>com.公司名.项目名  类名</code> （建议）</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cordova create cordovademo02  com.baidu.cordova  Cordovademo</span><br></pre></td></tr></table></figure><blockquote><p>创建项目的时候注意包名称：发布上线打包的时候用到包名称，注意</p></blockquote><blockquote><p>修改应用包名名称参考：<a href="http://www.ionic.wang/article-index-id-91.html" target="_blank" rel="noopener">http://www.ionic.wang/article-index-id-91.html</a></p></blockquote><p><strong>修改应用包名名称：</strong></p><ul><li>修改<code>config.xml</code>里面的包名称</li><li>修改完成以后重新执行<code>cordova platform add android</code></li></ul><p><img src="http://blog.poetries.top/img-repo/2019/10/cordova/2.png" alt></p><blockquote><p>cd 到项目里面 <code>cd cordovademo02</code></p></blockquote><ul><li>把<code>android</code>的平台添加到项目里面 <code>cordova platform add android</code></li><li>把项目导入到 <code>android studio</code> 进行运行调试  （或者运行   <code>cordova  run  android</code>）   注意可能遇到的问题参考（安装遇到问题图文解决方案文件夹</li></ul><blockquote><p>导入<code>platform</code>下的<code>Android</code>文件</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/cordova/3.png" alt></p><p><strong>导入android studio可能遇到的错误解决方法</strong></p><ol><li>导入后提示：<code>Android Studio Error:Connection timed out: connect</code></li></ol><p><img src="http://blog.poetries.top/img-repo/2019/10/cordova/4.png" alt></p><blockquote><p>解决方案参考：<a href="https://blog.csdn.net/u013020000/article/details/73159754" target="_blank" rel="noopener">https://blog.csdn.net/u013020000/article/details/73159754</a></p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/cordova/5.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/cordova/6.png" alt></p><ol start="2"><li>遇到错误 <code>failed  to  find with hash string  &#39;android-26&#39;</code></li></ol><p><img src="http://blog.poetries.top/img-repo/2019/10/cordova/7.png" alt></p><blockquote><p>解决方案点击 图上蓝色链接进行安装</p></blockquote><ol start="3"><li><code>Gradle build</code> 没有反应如</li></ol><p><img src="http://blog.poetries.top/img-repo/2019/10/cordova/8.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/cordova/9.png" alt></p><blockquote><p>解决方案 ：点击<code>build</code>见图箭头。如果有下载内容 耐心等待 （30分钟-2小时）</p></blockquote><ol start="4"><li>提示 <code>please configure Android SDK</code></li></ol><p><img src="http://blog.poetries.top/img-repo/2019/10/cordova/10.png" alt></p><blockquote><p>解决方案：点击蓝色 <code>configure</code>，然后选择对应的sdk   （前提是sdk已经安装）</p></blockquote><ol start="5"><li>真机调试,手机连上没有反应</li></ol><ul><li>关闭或者卸载自己电脑上面的360手机助手或者其他连手机的软件</li><li>安装你手机对应的<code>sdk</code></li></ul><p><img src="http://blog.poetries.top/img-repo/2019/10/cordova/11.png" alt></p><blockquote><p>建议 <code>android 5-到android8</code> sdk都安装 （安装sdk  ： Tools-&gt;SDK Manager）</p></blockquote><ul><li>点击右上角对应箭头按钮配置</li></ul><blockquote><p>查看当前连接上的手机</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/cordova/12.png" alt></p><ul><li>手机必须开启调试模式（百度搜 xxx手机开启调试模式）</li><li>手机拔下来重启<code>android studio</code>，重新插入手机重试</li><li>百度搜（<code>android studio</code> 连不上手机…）</li></ul><p><strong>运行项目 ：注意</strong></p><ul><li><code>android</code>手机要连上电脑，并且 <code>android</code>手机必须开启调试模式</li><li><code>android studio</code> 必须得安装手机对应的<code>sdk</code></li><li>关闭360手机助手、xxx手机助手</li><li>修改项目:  运行<code>cordova prepare</code></li></ul><h3 id="2-2-iOS平台搭建cordova环境"><a href="#2-2-iOS平台搭建cordova环境" class="headerlink" title="2.2 iOS平台搭建cordova环境"></a>2.2 iOS平台搭建cordova环境</h3><ul><li>安装<code>nodejs</code> 安装<code>xcode</code></li><li>安装<code>cordova</code>    </li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install -g cordova</span><br></pre></td></tr></table></figure><ol><li>创建项目</li></ol><blockquote><p><code>cordova create 项目名  com.公司名.项目名  类名</code> （建议）</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cordova create cordovademo02  com.baidu.cordova  Cordovademo</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li><code>cd  cordovademo02</code></li></ol></li><li>3.把ios的平台添加到项目里面  <code>cordova platform add ios</code></li><li><ol start="4"><li>用xcode打开项目运行</li></ol></li></ul><h2 id="三、cordova插件的使用"><a href="#三、cordova插件的使用" class="headerlink" title="三、cordova插件的使用"></a>三、cordova插件的使用</h2><blockquote><p>cordova插件拍照插件 、定位插件、文件上传插件 以及vconsole开启真机（手机）调试模式</p></blockquote><p><strong>cordova安装插件</strong></p><blockquote><p>如果我们要在自己的<code>html</code>里面调用手机原生的功能（拍照、扫描二维码、获取地理位置…）,借助<code>cordova</code>的插件</p></blockquote><blockquote><p><code>cordova</code> 官网：<a href="https://cordova.apache.org/" target="_blank" rel="noopener">https://cordova.apache.org/</a></p></blockquote><p><strong>如何使用插件：</strong></p><ul><li>安装插件 <code>cordova plugin  add  插件名称</code></li><li>复制文档使用</li></ul><p><strong>查看已经安装的插件：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cordova plugin list</span><br></pre></td></tr></table></figure><p><strong>卸载插件：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cordova plugin rm  cordova-plugin-network-information</span><br></pre></td></tr></table></figure><blockquote><p>插件使用</p></blockquote><p><strong>1. 设备插件的使用</strong></p><blockquote><p><a href="https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-device/index.html" target="_blank" rel="noopener">https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-device/index.html</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 安装 看文档使用</span></span><br><span class="line">cordova plugin add cordova-plugin-device</span><br></pre></td></tr></table></figure><p><strong>2. 使用网络相关的插件</strong></p><blockquote><p><a href="https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-network-information/index.html" target="_blank" rel="noopener">https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-network-information/index.html</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 看文档使用</span></span><br><span class="line">cordova plugin add cordova-plugin-network-information</span><br></pre></td></tr></table></figure><p><strong>3. 定位插件</strong></p><blockquote><p><a href="https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-geolocation/index.html" target="_blank" rel="noopener">https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-geolocation/index.html</a></p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cordova plugin add cordova-plugin-geolocation</span><br></pre></td></tr></table></figure><ul><li>注意改代码以后要运行：<code>cordova prepare</code></li><li>注意：要引入<code>cordova.js</code></li><li>注意：项目里面不要有中文文件夹、不要有<code>zip</code>包 、不要有中文文件</li></ul><p><strong>4. 拍照插件</strong></p><blockquote><p><a href="https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-camera/index.html" target="_blank" rel="noopener">https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-camera/index.html</a></p></blockquote><blockquote><p>注意：<code>ios</code>拍照完成以后调用 <code>navigator.camera.cleanup(onSuccess, onFail)</code></p></blockquote><p><strong>5. 文件上传 或者下载</strong></p><ul><li>文件插件: <a href="https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-file/index.html" target="_blank" rel="noopener">https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-file/index.html</a></li><li>文件传输插件：<a href="https://www.npmjs.com/package/cordova-plugin-file-transfer" target="_blank" rel="noopener">https://www.npmjs.com/package/cordova-plugin-file-transfer</a></li></ul><h2 id="四、cordova结合vue"><a href="#四、cordova结合vue" class="headerlink" title="四、cordova结合vue"></a>四、cordova结合vue</h2><h3 id="4-1-cordova结合vue开发跨平台app"><a href="#4-1-cordova结合vue开发跨平台app" class="headerlink" title="4.1 cordova结合vue开发跨平台app"></a>4.1 cordova结合vue开发跨平台app</h3><blockquote><p><code>cordova</code>结合<code>vue</code>开发跨平台混合app之<code>Cordova</code>打包Vue项目</p></blockquote><p><strong>cordova打包vue项目：</strong></p><ul><li><code>cordova</code>: 可以把<code>html css js</code>写的代码打包成<code>app</code>，还可以让<code>js</code>调用原生的 <code>api</code></li></ul><blockquote><p><code>cordova+vue</code>、<code>cordova+react</code> 、<code>cordova+angular</code> 、 <code>cordova+jquery</code></p></blockquote><p><strong>创建vue项目的时候有两种方式：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue init webpack 项目名称</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue init webpack-simple  项目名称</span><br></pre></td></tr></table></figure><blockquote><p>正式发布<code>vue</code>的项目：（把<code>vue</code>项目打包成浏览器能解析的代码）</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build <span class="comment"># 把vue打包成浏览器能解析的代码</span></span><br></pre></td></tr></table></figure><p><strong>把vue项目用cordova打包成app：</strong></p><ul><li><code>npm run build</code> （注意：图片目录的路径）</li><li>把<code>vue</code>打包后的静态资源复制到<code>cordova</code>项目里面</li><li>运行 <code>cordova prepare</code></li></ul><p><strong>注意：</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue init webpack-simple  <span class="comment">#项目名称</span></span><br></pre></td></tr></table></figure><ul><li>修改：<code>webpack.config.js</code> 里面  <code>publicPath</code></li><li>把<code>publicPath: &#39;/dist/&#39;</code>    改为  <code>publicPath: &#39;dist/&#39;</code></li><li>修改<code>index</code>里面引入<code>dist</code>的路径,去掉前面的<code>/</code> (重要)</li></ul><p><strong>vue init webpack 项目名称</strong></p><ul><li>修改：<code>config/index.js</code> 把 <code>assetsPublicPath: &#39;/&#39;</code>,    </li><li>修改成 <code>assetsPublicPath: &#39;./&#39;</code></li></ul><p><img src="http://blog.poetries.top/img-repo/2019/10/cordova/14.png" alt></p><blockquote><p>ios下打开效果。这样很方便打包原有的项目为app</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/cordova/16.png" alt></p><h3 id="4-2-vue调用cordova插件"><a href="#4-2-vue调用cordova插件" class="headerlink" title="4.2 vue调用cordova插件"></a>4.2 vue调用cordova插件</h3><blockquote><p><code>cordova</code>打包<code>vue</code>项目并在<code>Vue</code>中调用原生的<code>api</code>：</p></blockquote><p><strong>使用vue-cordova 插件（不推荐使用）</strong></p><blockquote><p><a href="https://github.com/kartsims/vue-cordova" target="_blank" rel="noopener">https://github.com/kartsims/vue-cordova</a>        </p></blockquote><ol><li><code>vue</code>项目安装 <code>npm install --save vue-cordova</code></li><li>在 <code>main.js</code> 引入插件并<code>use</code>插件</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import VueCordova from &apos;vue-cordova&apos;</span><br><span class="line">Vue.use(VueCordova)</span><br></pre></td></tr></table></figure><ol start="3"><li>调用插件注意在对应的组件需要引入 </li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Vue = <span class="built_in">require</span>(<span class="string">'vue'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.cordova.camera.getPicture(<span class="function">(<span class="params">imageURI</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.alert(<span class="string">'Photo URI : '</span> + imageURI)</span><br><span class="line">&#125;, (message) =&gt; &#123;</span><br><span class="line">    <span class="built_in">window</span>.alert(<span class="string">'FAILED : '</span> + message)</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    quality: <span class="number">50</span>,</span><br><span class="line">    destinationType: Vue.cordova.camera.DestinationType.FILE_URI</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="4"><li>注意需要在<code>vue</code>项目 <code>index.html</code>引入 <code>cordova.js</code></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"cordova.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>index.html</code> 引入<code>cordova.js</code>  并定义全局变量让<code>vue</code>组件里面直接使用<code>cordova</code>插件(推荐的使用方法）</p></blockquote><ul><li>在vue <code>index.html</code>引入<code>cordova.js</code> （注意顺序<code>cordova.js</code>放在<code>build.js</code>上面）</li><li>直接可以在组件里面使用<code>cordova</code>的<code>api</code>（注意<code>cordova</code>里面要安装<code>api</code>的插件）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我们可以使用&lt;code&gt;cordova&lt;/code&gt;来打包现有的&lt;code&gt;vue&lt;/code&gt;、
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Cordova" scheme="http://blog.poetries.top/tags/Cordova/"/>
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Ionic之调用原生模块相机</title>
    <link href="http://blog.poetries.top/2019/10/07/ionic-ios-camera/"/>
    <id>http://blog.poetries.top/2019/10/07/ionic-ios-camera/</id>
    <published>2019-10-07T06:10:24.000Z</published>
    <updated>2020-07-24T04:13:35.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Ionic-Native-的使用"><a href="#一、Ionic-Native-的使用" class="headerlink" title="一、Ionic Native 的使用"></a>一、Ionic Native 的使用</h2><blockquote><p>Ionic 在 <code>cordova</code> 的基础上面又进行了封装，可以让我们更方便的在 ionic 中使用 <code>cordova</code> 插件</p></blockquote><p><strong>使用方法:</strong></p><ol><li>找到对应的Api:</li></ol><blockquote><p><a href="https://ionicframework.com/docs/native/device/" target="_blank" rel="noopener">https://ionicframework.com/docs/native/device/</a></p></blockquote><ol start="2"><li>安装相关的设备插件</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ionic cordova plugin add cordova-plugin-device </span><br><span class="line"></span><br><span class="line">npm install @ionic-native/device --save</span><br></pre></td></tr></table></figure><blockquote><ul><li>注意: 安装 <code>ionic</code> 调用原生 api 的插件的时候在模块加上 <code>--save</code> </li><li>注意: <code>ios</code> 安装插件的时候命令签名加 <code>sudo</code></li></ul></blockquote><ol start="3"><li>在<code>app.module.ts</code>中引入注册相应模块</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; Device &#125; from &apos;@ionic-native/device/ngx&apos;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">providers: [</span><br><span class="line">    StatusBar,</span><br><span class="line">    SplashScreen,</span><br><span class="line">    Device,</span><br><span class="line">    &#123; </span><br><span class="line">        provide: RouteReuseStrategy, <span class="attr">useClass</span>: IonicRouteStrategy </span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="4"><li>在用到的页面引入看文档使用</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Device &#125; <span class="keyword">from</span> <span class="string">'@ionic-native/device/ngx'</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(private device: Device) &#123; &#125;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Device UUID is: '</span> + <span class="keyword">this</span>.device.uuid);</span><br></pre></td></tr></table></figure><h2 id="二、Cordova-常用命令以及插件的使用"><a href="#二、Cordova-常用命令以及插件的使用" class="headerlink" title="二、Cordova 常用命令以及插件的使用"></a>二、Cordova 常用命令以及插件的使用</h2><p><strong>1、增加平台</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cordova platform add android</span><br><span class="line">cordova platform add ios</span><br><span class="line"></span><br><span class="line">ionic cordova platform add android</span><br><span class="line">ionic cordova platform add ios</span><br></pre></td></tr></table></figure><p><strong>2、移除平台</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cordova platform rm android </span><br><span class="line">cordova platform rm ios</span><br><span class="line"></span><br><span class="line">ionic cordova platform rm android </span><br><span class="line">ionic cordova platform rm ios</span><br></pre></td></tr></table></figure><p><strong>3、修改代码后让代码生效</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cordova prepare</span><br><span class="line"></span><br><span class="line">ionic cordova prepare</span><br></pre></td></tr></table></figure><p><strong>4、真机运行</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cordova run android</span><br><span class="line"></span><br><span class="line">ionic cordova run android</span><br></pre></td></tr></table></figure><p><strong>5、安装插件–建议看 ionic 官方文档</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设备 API</span></span><br><span class="line">cordova plugin add org.apache.cordova.device</span><br><span class="line"></span><br><span class="line"><span class="comment">//网络(事件)</span></span><br><span class="line">cordova plugin add org.apache.cordova.network-information </span><br><span class="line"></span><br><span class="line"><span class="comment">//电池(事件)</span></span><br><span class="line">cordova plugin </span><br><span class="line">add org.apache.cordova.battery-status </span><br><span class="line"></span><br><span class="line"><span class="comment">//加速器</span></span><br><span class="line">cordova plugin add org.apache.cordova.device-motion </span><br><span class="line"></span><br><span class="line"><span class="comment">//罗盘</span></span><br><span class="line">cordova plugin add org.apache.cordova.device-orientation </span><br><span class="line"></span><br><span class="line"><span class="comment">//定位</span></span><br><span class="line">cordova plugin add org.apache.cordova.geolocation</span><br><span class="line"></span><br><span class="line"><span class="comment">//摄像头</span></span><br><span class="line">cordova plugin add org.apache.cordova.camera</span><br><span class="line"></span><br><span class="line"><span class="comment">//媒体文件处理</span></span><br><span class="line">cordova plugin add org.apache.cordova.media-capture cordova plugin add org.apache.cordova.media</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件访问</span></span><br><span class="line">cordova plugin add org.apache.cordova.file</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件传输</span></span><br><span class="line">cordova plugin add org.apache.cordova.file-transfer</span><br><span class="line"></span><br><span class="line"><span class="comment">//对话框</span></span><br><span class="line">cordova plugin add org.apache.cordova.dialogs</span><br><span class="line"></span><br><span class="line"><span class="comment">//震动</span></span><br><span class="line">cordova plugin add org.apache.cordova.vibration</span><br><span class="line"></span><br><span class="line"><span class="comment">//联系人</span></span><br><span class="line">cordova plugin add org.apache.cordova.contacts</span><br><span class="line"></span><br><span class="line"><span class="comment">//全球化</span></span><br><span class="line">cordova plugin add org.apache.cordova.globalization </span><br><span class="line"></span><br><span class="line"><span class="comment">//闪屏</span></span><br><span class="line">cordova plugin add org.apache.cordova.splashscreen </span><br><span class="line"></span><br><span class="line"><span class="comment">//打开新的浏览器窗口</span></span><br><span class="line">cordova plugin add org.apache.cordova.inappbrowser </span><br><span class="line"></span><br><span class="line"><span class="comment">//调试控制台</span></span><br><span class="line">cordova plugin add org.apache.cordova.console</span><br></pre></td></tr></table></figure><p><strong>6、查看已经安装的插件</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cordova plugin list</span><br></pre></td></tr></table></figure><p><strong>7、删除插件</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cordova plugin rm org.apache.cordova.console</span><br><span class="line"></span><br><span class="line">cordova plugin rm org.apache.cordova.geolocation</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Ionic-Native-的使用&quot;&gt;&lt;a href=&quot;#一、Ionic-Native-的使用&quot; class=&quot;headerlink&quot; title=&quot;一、Ionic Native 的使用&quot;&gt;&lt;/a&gt;一、Ionic Native 的使用&lt;/h2&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Ionic" scheme="http://blog.poetries.top/tags/Ionic/"/>
    
      <category term="Angular" scheme="http://blog.poetries.top/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Ionic之iOS打包流程</title>
    <link href="http://blog.poetries.top/2019/10/07/Ionic-ios-build/"/>
    <id>http://blog.poetries.top/2019/10/07/Ionic-ios-build/</id>
    <published>2019-10-07T00:10:24.000Z</published>
    <updated>2020-07-24T04:13:35.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、模拟器运行iOS项目"><a href="#一、模拟器运行iOS项目" class="headerlink" title="一、模拟器运行iOS项目"></a>一、模拟器运行iOS项目</h2><p><strong>安装 Ionic Cordova</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cnpm install -g cordova ionic</span><br></pre></td></tr></table></figure><p><strong>Ionic 创建浏览器运行的项目</strong></p><ul><li>创建项目: <code>sudo ionic start myApp tabs</code></li><li>cd 到刚才创建的项目</li><li><code>sudo ionic serve</code> 浏览器运行项目</li></ul><p><strong>Ionic 借助 cordova 创建 ios 手机上可以安装的应用</strong></p><ul><li>创建项目: <code>sudo ionic start myApp tabs</code></li><li>cd 到刚才创建的项目</li><li><code>sudo ionic cordova platform add ios</code> 把 ios 环境添加到我们的项目</li><li><code>sudo yarn install</code></li><li>修改代码后运行 <code>sudo ionic build --prod</code>(打包) 以及 <code>sudo ionic cordova prepare</code> (这个是拷贝<code>www</code>目录资源到ios工程下)。必须运行，否则调试会卡死</li></ul><p><strong>可能遇到的错误以及解决方案</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/1.png" alt></p><ul><li>使用软件中的提供的翻墙工具重试，如果不行继续看第二步骤</li><li>手机开启热点，让电脑连接手机用手机的网络下载</li></ul><p><strong>找到对应目录下面的文件双击用 Xcode 打开</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/2.png" alt></p><blockquote><p>注意:xcode 用最新的版本</p></blockquote><p><strong>如果双击遇到权限问题如下</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/3.png" alt></p><blockquote><p>可以用命令修改权限，cd 到要修改权限的目录执行下面命令</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chmod -R 777 *</span><br></pre></td></tr></table></figure><p><strong>在 xcode 中选择对应模拟器运行</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/4.png" alt></p><blockquote><p>注意:调整模拟器大小只需要拉动模拟器边缘即可</p></blockquote><h2 id="二、真机调试"><a href="#二、真机调试" class="headerlink" title="二、真机调试"></a>二、真机调试</h2><h3 id="2-1-真机调试之前的准备工作"><a href="#2-1-真机调试之前的准备工作" class="headerlink" title="2.1 真机调试之前的准备工作"></a>2.1 真机调试之前的准备工作</h3><ul><li>你得有苹果开发者账号个人($99)、公司($99)、企业($299)账号均可</li><li>能上网的苹果电脑 macos(苹果虚拟机也可以)、Xcode、iOS 设备(iPhone、ipad 均 可)</li></ul><h3 id="2-2-开发者中心配置调试设备的-uuid"><a href="#2-2-开发者中心配置调试设备的-uuid" class="headerlink" title="2.2 开发者中心配置调试设备的 uuid"></a>2.2 开发者中心配置调试设备的 uuid</h3><p><strong>1. 获取iPhone手机的uuid，手机连接电脑，打开iTunes软件，点击序列号字母处</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/5.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/6.png" alt></p><p><strong>2. 配置iPhone手机的uuid，打开平台开发者中心进行配置</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/7.png" alt></p><h3 id="2-3-xcode-自动管理证书文件"><a href="#2-3-xcode-自动管理证书文件" class="headerlink" title="2.3 xcode 自动管理证书文件"></a>2.3 xcode 自动管理证书文件</h3><p><strong>手动创建证书文件参考下面地址:</strong></p><blockquote><p><a href="https://jingyan.baidu.com/article/d3b74d640735c71f77e609f0.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/d3b74d640735c71f77e609f0.html</a></p></blockquote><blockquote><p>现在用 xcode 开发项目我们可以自动适配我们的证书，选择自动化配置证书意味着你不会 在证书设置和编译的时候浪费更多的时间,并且你可以更好的设置适合你的 Xcode</p></blockquote><p><strong>1、点击 xcode 选择 Preference，如下图</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/8.png" alt></p><p><strong>2、弹出下面界面输入自己的账户名和密码</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/9.png" alt></p><p><strong>3、选择对应的项目 选择 General-&gt;勾选自动管理签名-&gt;设置 Team 开发者账户-&gt;选择开发的 设备</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/10.png" alt></p><p><strong>4、设置所有工程的 Build settings 为 Automatic (默认可以不用管)</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/11.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/12.png" alt></p><h3 id="2-4-真机调试"><a href="#2-4-真机调试" class="headerlink" title="2.4 真机调试"></a>2.4 真机调试</h3><ul><li>连上手机，然后在手机上面选择信任此电脑</li><li>选择调试设备为自己的手机</li></ul><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/13.png" alt></p><ul><li>点击运行</li></ul><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/14.png" alt></p><ul><li>点击允许</li></ul><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/15.png" alt></p><blockquote><p>注意：每次修改代码后，都需要重新执行 <code>sudo ionic build --prod</code> 以及 <code>sudo ionic cordova prepare</code>。这样比较麻烦，建议在浏览器端调试好了在调试ios、安卓端的</p></blockquote><h2 id="三、创建测试包ipa"><a href="#三、创建测试包ipa" class="headerlink" title="三、创建测试包ipa"></a>三、创建测试包ipa</h2><ul><li>进入苹果开发者中心，配置需要测试项目的人员手机的 <code>uuid</code> 以及调试设备的 <code>uuid</code></li><li>配置应用包名称</li><li>打包测试证书需要连接 <code>iphone</code> 手机，不然 Archive 会是灰色的</li><li>选择 <code>product – Archive</code> 进行打包–(具体步骤如下)</li></ul><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/20.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/21.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/22.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/23.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/24.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/25.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/26.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/27.png" alt></p><p><strong>可能遇到的错误</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/28.png" alt></p><blockquote><p>如果是 code sign 相关的错误</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/29.png" alt></p><h2 id="四、发布到-appstore"><a href="#四、发布到-appstore" class="headerlink" title="四、发布到 appstore"></a>四、发布到 appstore</h2><p><strong>1. 需要登录到苹果开发者中心<code>Itunes connect</code> 创建应用</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/37.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/38.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/39.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/40.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/41.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/42.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/43.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/44.png" alt></p><p><strong>2. 配置好开发者证书以打包正式包</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/30.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/31.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/45.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/46.png" alt></p><blockquote><p>这里选择直接导出上传</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/47.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/48.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/49.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/50.png" alt></p><p><strong>3. 使用 <code>Application Loader</code> 把本地的正式包发布到 <code>App Store Connect</code>，也可以使用 Xcode把应用发布到 App Store</strong></p><blockquote><p>打开application loader上传应用包</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/33.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/34.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/51.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/52.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/53.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/54.png" alt></p><blockquote><p>应用升级需要修改版本号，然后build上传<br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/55.png" alt></p></blockquote><blockquote><p>然后在这里可以有多个版本，选择一个提交审核即可</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/56.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/57.png" alt></p><blockquote><p>保存之后提交审核</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/58.png" alt></p><p><strong>登录 Application Loader 报错</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/35.png" alt></p><blockquote><p>登录:<a href="https://appleid.apple.com/account/manage" target="_blank" rel="noopener">https://appleid.apple.com/account/manage</a></p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/36.png" alt></p><blockquote><p>然后用生成的密码作为登录密码</p></blockquote><p><strong>4. 在xcode中上传应用</strong></p><blockquote><p>修改版本后，选择achieve</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/59.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/60.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/61.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/62.png" alt></p><blockquote><p>然后可以在开发者中心选择上传的版本</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/63.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/64.png" alt></p><blockquote><p>提交审核后一般七个工作日左右</p></blockquote><h2 id="五、打包上传前，在-info-plist-添加权限"><a href="#五、打包上传前，在-info-plist-添加权限" class="headerlink" title="五、打包上传前，在 info.plist 添加权限"></a>五、打包上传前，在 info.plist 添加权限</h2><blockquote><p>Xcode 打包上传 app store 提示 Missing info.plist key NSPhotoLibraryUsageDescription 错误</p></blockquote><p><strong>Info.plist 添加权限</strong></p><blockquote><p>项目调用了摄像机，需要配置一下权限</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/65.png" alt></p><blockquote><p>为了保护隐私，最终用户必须明确的允许应用程序访问提醒信号、照片、位置、联系人、和日历数 据。为了说服用户接受，它有助于解释应用程序可以怎样使用这类数据，并且说明访问他的原因。给 位于 <code>Info.plist</code> 文件顶层的以下键分配字符串值。当 iOS 提示用户有关特定资源的权限时，他将显示 这些字符串，作为他的标准对话框的一部分。</p></blockquote><ul><li>相册 <code>NSPhotoLibraryUsageDescription</code></li><li>相机  <code>NSCameraUsageDescription</code></li><li>麦克风 <code>NSMicrophoneUsageDescription</code></li><li>位置 <code>NSLocationUsageDescription</code></li><li>在使用期间访问位置 <code>NSLocationWhenInUseUsageDescription</code></li><li>始终访问位置 <code>NSLocationAlwaysUsageDescription</code></li><li>日历 <code>NSCalendarsUsageDescription</code></li><li>提醒事项 <code>NSRemindersUsageDescription</code></li><li>运动与健身 <code>NSMotionUsageDescription</code></li><li>健康更新 <code>NSHealthUpdateUsageDescription</code></li><li>健康分享 <code>NSHealthShareUsageDescription</code></li><li>蓝牙 <code>NSBluetoothPeripheralUsageDescription</code></li><li>媒体资料库 <code>NSAppleMusicUsageDescription</code></li></ul><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/66.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、模拟器运行iOS项目&quot;&gt;&lt;a href=&quot;#一、模拟器运行iOS项目&quot; class=&quot;headerlink&quot; title=&quot;一、模拟器运行iOS项目&quot;&gt;&lt;/a&gt;一、模拟器运行iOS项目&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;安装 Ionic Cordova&lt;/stro
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Ionic" scheme="http://blog.poetries.top/tags/Ionic/"/>
    
      <category term="Angular" scheme="http://blog.poetries.top/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Vue核心梳理</title>
    <link href="http://blog.poetries.top/2019/10/06/vue-review/"/>
    <id>http://blog.poetries.top/2019/10/06/vue-review/</id>
    <published>2019-10-06T10:10:32.000Z</published>
    <updated>2020-07-24T04:13:35.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、组件的核心概念-属性props几种写法"><a href="#一、组件的核心概念-属性props几种写法" class="headerlink" title="一、组件的核心概念-属性props几种写法"></a>一、组件的核心概念-属性props几种写法</h2><blockquote><p>我们的开发都是围绕着<code>options</code>来的</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/vue/1.png" alt></p><p><img src="http://blog.poetries.top/img-repo/2019/10/vue/2.png" alt></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    name: &#123;&#123; name &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    type: &#123;&#123; type &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    list: &#123;&#123; list &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    isVisible: &#123;&#123; isVisible &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span>&gt;</span>change type<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">"PropsDemo"</span>,</span></span><br><span class="line"><span class="javascript">  <span class="comment">// inheritAttrs: false,</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 这种写法不利于后期维护</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// props: ['name', 'type', 'list', 'isVisible'],</span></span></span><br><span class="line">  props: &#123;</span><br><span class="line"><span class="javascript">    name: <span class="built_in">String</span>,</span></span><br><span class="line">    type: &#123;</span><br><span class="line"><span class="javascript">      validator: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 这个值必须匹配下列字符串中的一个</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> [<span class="string">"success"</span>, <span class="string">"warning"</span>, <span class="string">"danger"</span>].includes(value);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    list: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 对象或数组默认值必须从一个工厂函数获取</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> []</span></span><br><span class="line">    &#125;,</span><br><span class="line">    isVisible: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="literal">false</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    onChange: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Function</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 不要这么做、不要这么做、不要这么做</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// this.type = "warning";</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// 可以，还可以更好</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.onChange(<span class="keyword">this</span>.type === <span class="string">"success"</span> ? <span class="string">"warning"</span> : <span class="string">"success"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 用法</span><br><span class="line">&lt;Props</span><br><span class="line">  name=&quot;Hello Vue！&quot; // 原生属性</span><br><span class="line">  :type=&quot;type&quot;</span><br><span class="line">  :is-visible=&quot;false&quot;</span><br><span class="line">  :on-change=&quot;handlePropChange&quot;</span><br><span class="line">  title=&quot;属性Demo&quot; // 原生属性</span><br><span class="line">  class=&quot;test1&quot; // 原生属性</span><br><span class="line">  :class=&quot;[&apos;test2&apos;]&quot;</span><br><span class="line">  :style=&quot;&#123; marginTop: &apos;20px&apos; &#125;&quot;</span><br><span class="line">  style=&quot;margin-top: 10px&quot; // 原生属性</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h2 id="二、组件的核心概念-事件"><a href="#二、组件的核心概念-事件" class="headerlink" title="二、组件的核心概念-事件"></a>二、组件的核心概念-事件</h2><p><img src="http://blog.poetries.top/img-repo/2019/10/vue/3.png" alt></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    name: &#123;&#123; name || "--" &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">"name"</span> @<span class="attr">change</span>=<span class="string">"handleChange"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"handleDivClick"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span>&gt;</span>重置成功<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">"handleClick"</span>&gt;</span>重置失败<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">"EventDemo"</span>,</span></span><br><span class="line">  props: &#123;</span><br><span class="line"><span class="javascript">    name: <span class="built_in">String</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleChange(e) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$emit(<span class="string">"change"</span>, e.target.value);</span></span><br><span class="line">    &#125;,</span><br><span class="line">    handleDivClick() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$emit(<span class="string">"change"</span>, <span class="string">""</span>);</span></span><br><span class="line">    &#125;,</span><br><span class="line">    handleClick(e) &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 都会失败</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//e.stopPropagation();</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、组件的核心概念-插槽"><a href="#三、组件的核心概念-插槽" class="headerlink" title="三、组件的核心概念-插槽"></a>三、组件的核心概念-插槽</h2><p><img src="http://blog.poetries.top/img-repo/2019/10/vue/4.png" alt></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">a-tab-pane</span> <span class="attr">key</span>=<span class="string">"slot"</span> <span class="attr">tab</span>=<span class="string">"插槽"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>2.6 新语法<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SlotDemo</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>default slot<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>title slot1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>title slot2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:item</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>item slot-scope &#123;&#123; props &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">SlotDemo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>老语法<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SlotDemo</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>default slot<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>title slot1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>title slot2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"item"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span>&gt;</span>item slot-scope &#123;&#123; props &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">SlotDemo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a-tab-pane</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Slot <span class="keyword">from</span> <span class="string">"./Slot"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    SlotDemo: Slot</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">""</span>,</span></span><br><span class="line"><span class="javascript">      type: <span class="string">"success"</span>,</span></span><br><span class="line"><span class="javascript">      bigPropsName: <span class="string">"Hello world!"</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Slot.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"title"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"item"</span> <span class="attr">v-bind</span>=<span class="string">"&#123; value: 'vue' &#125;"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">"SlotDemo"</span></span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.poetries.top/img-repo/2019/10/vue/5.png" alt></p><p><strong>大属性例子</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--子组件 bigProps.vue--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123; name &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleChange"</span>&gt;</span>change name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &#123;&#123; slotDefault &#125;&#125; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">VNodes</span> <span class="attr">:vnodes</span>=<span class="string">"slotDefault"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">VNodes</span> <span class="attr">:vnodes</span>=<span class="string">"slotTitle"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">VNodes</span> <span class="attr">:vnodes</span>=<span class="string">"slotScopeItem(&#123; value: 'vue' &#125;)"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">"BigProps"</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    VNodes: &#123;</span><br><span class="line"><span class="javascript">      functional: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      render: <span class="function">(<span class="params">h, ctx</span>) =&gt;</span> ctx.props.vnodes</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line"><span class="javascript">    name: <span class="built_in">String</span>,</span></span><br><span class="line">    onChange: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Function</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    slotDefault: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">    slotTitle: <span class="built_in">Array</span>,</span></span><br><span class="line">    slotScopeItem: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Function</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleChange() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.onChange(<span class="string">"Hello vue!"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--父组件调用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a-tab-pane</span> <span class="attr">key</span>=<span class="string">"bigProps"</span> <span class="attr">tab</span>=<span class="string">"大属性"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">BigProps</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:name</span>=<span class="string">"bigPropsName"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:on-change</span>=<span class="string">"handleBigPropChange"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:slot-default</span>=<span class="string">"getDefault()"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:slot-title</span>=<span class="string">"getTitle()"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:slot-scope-item</span>=<span class="string">"getItem"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a-tab-pane</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、双向绑定和单项数据流并不冲突"><a href="#四、双向绑定和单项数据流并不冲突" class="headerlink" title="四、双向绑定和单项数据流并不冲突"></a>四、双向绑定和单项数据流并不冲突</h2><p><img src="http://blog.poetries.top/img-repo/2019/10/vue/6.png" alt></p><p><img src="http://blog.poetries.top/img-repo/2019/10/vue/7.png" alt></p><h2 id="五、如何触发组件的更新"><a href="#五、如何触发组件的更新" class="headerlink" title="五、如何触发组件的更新"></a>五、如何触发组件的更新</h2><p><img src="http://blog.poetries.top/img-repo/2019/10/vue/8.png" alt></p><p><img src="http://blog.poetries.top/img-repo/2019/10/vue/9.png" alt></p><p><img src="http://blog.poetries.top/img-repo/2019/10/vue/11.png" alt></p><h2 id="六、合理应用计算属性和监听器"><a href="#六、合理应用计算属性和监听器" class="headerlink" title="六、合理应用计算属性和监听器"></a>六、合理应用计算属性和监听器</h2><h3 id="6-1-计算属性Computed"><a href="#6-1-计算属性Computed" class="headerlink" title="6.1 计算属性Computed"></a>6.1 计算属性Computed</h3><ul><li>减少模板中的计算逻辑</li><li>数据缓存</li><li>依赖固定的数据类型（响应式数据）</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Reversed message1: "&#123;&#123; reversedMessage1 &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Reversed message2: "&#123;&#123; reversedMessage2() &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; now &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"() =&gt; $forceUpdate()"</span>&gt;</span>forceUpdate<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      message: <span class="string">"hello vue"</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line"><span class="javascript">    <span class="comment">// 计算属性的 getter</span></span></span><br><span class="line"><span class="javascript">    reversedMessage1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"执行reversedMessage1"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">this</span>.message</span></span><br><span class="line"><span class="javascript">        .split(<span class="string">""</span>)</span></span><br><span class="line">        .reverse()</span><br><span class="line"><span class="javascript">        .join(<span class="string">""</span>);</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    now: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">Date</span>.now();</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    reversedMessage2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"执行reversedMessage2"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">this</span>.message</span></span><br><span class="line"><span class="javascript">        .split(<span class="string">""</span>)</span></span><br><span class="line">        .reverse()</span><br><span class="line"><span class="javascript">        .join(<span class="string">""</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2-监听watcher"><a href="#6-2-监听watcher" class="headerlink" title="6.2 监听watcher"></a>6.2 监听watcher</h3><ul><li>更加灵活通用</li><li><code>watcher</code>可以执行任何逻辑，包括函数节流、ajax异步获取数据</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123; $data &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"() =&gt; (a += 1)"</span>&gt;</span>a+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      a: 1,</span><br><span class="line">      b: &#123; c: 2, d: 3 &#125;,</span><br><span class="line">      e: &#123;</span><br><span class="line">        f: &#123;</span><br><span class="line">          g: 4</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      h: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line"><span class="javascript">    a: <span class="function"><span class="keyword">function</span>(<span class="params">val, oldVal</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.b.c += <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"new: %s, old: %s"</span>, val, oldVal);</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="string">"b.c"</span>: <span class="function"><span class="keyword">function</span>(<span class="params">val, oldVal</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.b.d += <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"new: %s, old: %s"</span>, val, oldVal);</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="string">"b.d"</span>: <span class="function"><span class="keyword">function</span>(<span class="params">val, oldVal</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.e.f.g += <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"new: %s, old: %s"</span>, val, oldVal);</span></span><br><span class="line">    &#125;,</span><br><span class="line">    e: &#123;</span><br><span class="line"><span class="javascript">      handler: <span class="function"><span class="keyword">function</span>(<span class="params">val, oldVal</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.h.push(<span class="string">"😄"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"new: %s, old: %s"</span>, val, oldVal);</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      deep: <span class="literal">true</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    h(val, oldVal) &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"new: %s, old: %s"</span>, val, oldVal);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>watcher中使用节流</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123; fullName &#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>firstName: <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"firstName"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>lastName: <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"lastName"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      firstName: <span class="string">"Foo"</span>,</span></span><br><span class="line"><span class="javascript">      lastName: <span class="string">"Bar"</span>,</span></span><br><span class="line"><span class="javascript">      fullName: <span class="string">"Foo Bar"</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line"><span class="javascript">    firstName: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      clearTimeout(<span class="keyword">this</span>.firstTimeout);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.firstTimeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.fullName = val + <span class="string">" "</span> + <span class="keyword">this</span>.lastName;</span></span><br><span class="line">      &#125;, 500);</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    lastName: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      clearTimeout(<span class="keyword">this</span>.lastTimeout);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.lastTimeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.fullName = <span class="keyword">this</span>.firstName + <span class="string">" "</span> + val;</span></span><br><span class="line">      &#125;, 500);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-3-computed-vs-watcher"><a href="#6-3-computed-vs-watcher" class="headerlink" title="6.3 computed vs watcher"></a>6.3 computed vs watcher</h3><ul><li><code>computed</code> 能做的，<code>watcher</code> 都可以做，反之不行</li><li>能用computed的尽量使用<code>computed</code></li></ul><h2 id="七、生命周期的应用场景和函数式组件"><a href="#七、生命周期的应用场景和函数式组件" class="headerlink" title="七、生命周期的应用场景和函数式组件"></a>七、生命周期的应用场景和函数式组件</h2><h3 id="7-1-生命周期"><a href="#7-1-生命周期" class="headerlink" title="7.1 生命周期"></a>7.1 生命周期</h3><p><img src="http://blog.poetries.top/img-repo/2019/10/vue/12.png" alt></p><p><img src="http://blog.poetries.top/img-repo/2019/10/vue/13.png" alt></p><p><img src="http://blog.poetries.top/img-repo/2019/10/vue/14.png" alt></p><p><img src="http://blog.poetries.top/img-repo/2019/10/vue/15.png" alt></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123; log("render") &#125;&#125;</span><br><span class="line">    &#123;&#123; now &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"start = !start"</span>&gt;</span>&#123;&#123; start ? "停止" : "开始" &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">"moment"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"data"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.moment = moment;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.log = <span class="built_in">window</span>.console.log;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      now: moment(<span class="keyword">new</span> <span class="built_in">Date</span>()).format(<span class="string">"YYYY-MM-DD HH:mm:ss"</span>),</span></span><br><span class="line"><span class="javascript">      start: <span class="literal">false</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    start() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.startClock();</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeCreate() &#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"beforeCreate"</span>);</span></span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"created"</span>);</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeMount() &#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"beforeMount"</span>);</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"mounted"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.startClock();</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeUpdate() &#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"beforeUpdate"</span>);</span></span><br><span class="line">  &#125;,</span><br><span class="line">  updated() &#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"updated"</span>);</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"beforeDestroy"</span>);</span></span><br><span class="line"><span class="javascript">    clearInterval(<span class="keyword">this</span>.clockInterval);</span></span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed() &#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"destroyed"</span>);</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    startClock() &#123;</span><br><span class="line"><span class="javascript">      clearInterval(<span class="keyword">this</span>.clockInterval);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="keyword">this</span>.start) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.clockInterval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.now = moment(<span class="keyword">new</span> <span class="built_in">Date</span>()).format(<span class="string">"YYYY-MM-DD HH:mm:ss"</span>);</span></span><br><span class="line">        &#125;, 1000);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>打印顺序 <code>beforeCreate - data - created - beforeMount - render - mounted</code></p></blockquote><h3 id="7-2-函数式组件"><a href="#7-2-函数式组件" class="headerlink" title="7.2 函数式组件"></a>7.2 函数式组件</h3><ul><li><code>functional：true</code></li><li>无状态、无实例、没有<code>this</code>上下文、没有生命周期</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TempVar.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  functional: <span class="literal">true</span>,</span><br><span class="line">  render: <span class="function">(<span class="params">h, ctx</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ctx.scopedSlots.default &amp;&amp; ctx.scopedSlots.default(ctx.props || &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// Functional.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">functional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123; props &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 使用</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-tabs</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-tab-pane</span> <span class="attr">key</span>=<span class="string">"Functional"</span> <span class="attr">tab</span>=<span class="string">"函数式组件"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Functional</span> <span class="attr">:name</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TempVar</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:var1</span>=<span class="string">"`hello $&#123;name&#125;`"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:var2</span>=<span class="string">"destroyClock ? 'hello vue' : 'hello world'"</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">"&#123; var1, var2 &#125;"</span>&gt;</span></span><br><span class="line">            &#123;&#123; var1 &#125;&#125;</span><br><span class="line">            &#123;&#123; var2 &#125;&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">TempVar</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a-tab-pane</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-tabs</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Functional <span class="keyword">from</span> <span class="string">"./Functional"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> TempVar <span class="keyword">from</span> <span class="string">"./TempVar"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    Functional,</span><br><span class="line">    TempVar</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      destroyClock: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">      name: <span class="string">"vue"</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="八、Vue指令"><a href="#八、Vue指令" class="headerlink" title="八、Vue指令"></a>八、Vue指令</h2><h3 id="8-1-内置指令"><a href="#8-1-内置指令" class="headerlink" title="8.1 内置指令"></a>8.1 内置指令</h3><p><img src="http://blog.poetries.top/img-repo/2019/10/vue/16.png" alt></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>v-text<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">"'hello vue'"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>v-html<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"'&lt;span style=<span class="symbol">&amp;quot;</span>color: red<span class="symbol">&amp;quot;</span>&gt;hello vue&lt;/span&gt;'"</span>&gt;</span></span><br><span class="line">      hello world</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>v-show<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"show"</span>&gt;</span>hello vue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"show = !show"</span>&gt;</span>change show<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>v-if v-esle-if v-else<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"number === 1"</span>&gt;</span>hello vue &#123;&#123; number &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"number === 2"</span>&gt;</span>hello world &#123;&#123; number &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>hello geektime &#123;&#123; number &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>v-for v-bind<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"num in [1, 2, 3]"</span> <span class="attr">v-bind:key</span>=<span class="string">"num"</span>&gt;</span>hello vue &#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>v-on<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"number = number + 1"</span>&gt;</span>number++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>v-model<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>v-pre<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123; this will not be compiled &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>v-once<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-once</span>&gt;</span></span><br><span class="line">      &#123;&#123; number &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.log = <span class="built_in">window</span>.console.log;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      show: <span class="literal">true</span>,</span></span><br><span class="line">      number: 1,</span><br><span class="line"><span class="javascript">      message: <span class="string">"hello"</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-2-自定义指令"><a href="#8-2-自定义指令" class="headerlink" title="8.2 自定义指令"></a>8.2 自定义指令</h3><p><img src="http://blog.poetries.top/img-repo/2019/10/vue/17.png" alt></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"show = !show"</span>&gt;</span></span><br><span class="line">      销毁</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">"show"</span> <span class="attr">v-append-text</span>=<span class="string">"`hello $&#123;number&#125;`"</span> @<span class="attr">click</span>=<span class="string">"number++"</span>&gt;</span></span><br><span class="line">      按钮</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  directives: &#123;</span><br><span class="line">    appendText: &#123;</span><br><span class="line">      bind() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"bind"</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">      inserted(el, binding) &#123;</span><br><span class="line"><span class="javascript">        el.appendChild(<span class="built_in">document</span>.createTextNode(binding.value));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"inserted"</span>, el, binding);</span></span><br><span class="line">      &#125;,</span><br><span class="line">      update() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"update"</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">      componentUpdated(el, binding) &#123;</span><br><span class="line">        el.removeChild(el.childNodes[el.childNodes.length - 1]);</span><br><span class="line"><span class="javascript">        el.appendChild(<span class="built_in">document</span>.createTextNode(binding.value));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"componentUpdated"</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">      unbind() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"unbind"</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      number: 1,</span><br><span class="line"><span class="javascript">      show: <span class="literal">true</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="九、template和jsx"><a href="#九、template和jsx" class="headerlink" title="九、template和jsx"></a>九、template和jsx</h2><h3 id="9-1-JSX-VS-template"><a href="#9-1-JSX-VS-template" class="headerlink" title="9.1 JSX VS template"></a>9.1 JSX VS template</h3><p><strong>Template</strong></p><ul><li>学习成本低</li><li>大量内置指令简化开发</li><li>组件作用域css</li><li>但灵活性低</li></ul><p><strong>JSX</strong></p><ul><li>总体上很灵活</li></ul><h3 id="9-2-以下是jsx写法"><a href="#9-2-以下是jsx写法" class="headerlink" title="9.2 以下是jsx写法"></a>9.2 以下是jsx写法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// index.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Props <span class="keyword">from</span> <span class="string">"./Props"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Event <span class="keyword">from</span> <span class="string">"./Event"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Slot <span class="keyword">from</span> <span class="string">"./Slot"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> BigProps <span class="keyword">from</span> <span class="string">"./BigProps"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    Props,</span><br><span class="line">    Event,</span><br><span class="line">    SlotDemo: Slot,</span><br><span class="line">    BigProps</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">""</span>,</span></span><br><span class="line"><span class="javascript">      type: <span class="string">"success"</span>,</span></span><br><span class="line"><span class="javascript">      bigPropsName: <span class="string">"Hello world!"</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handlePropChange(val) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.type = val;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    handleEventChange(val) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.name = val;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    handleBigPropChange(val) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.bigPropsName = val;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    getDefault() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> [<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>default slot<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>];</span></span><br><span class="line">    &#125;,</span><br><span class="line">    getTitle() &#123;</span><br><span class="line"><span class="xml">      return [<span class="tag">&lt;<span class="name">p</span>&gt;</span>title slot1<span class="tag">&lt;/<span class="name">p</span>&gt;</span>, <span class="tag">&lt;<span class="name">p</span>&gt;</span>title slot2<span class="tag">&lt;/<span class="name">p</span>&gt;</span>];</span></span><br><span class="line">    &#125;,</span><br><span class="line">    getItem(props) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> [<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;`item slot-scope $&#123;JSON.stringify(props)&#125;`&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>];</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  render() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> &#123;</span></span><br><span class="line">      type,</span><br><span class="line">      handlePropChange,</span><br><span class="line">      name,</span><br><span class="line">      handleEventChange,</span><br><span class="line">      bigPropsName,</span><br><span class="line">      getDefault,</span><br><span class="line">      getTitle,</span><br><span class="line">      getItem,</span><br><span class="line">      handleBigPropChange</span><br><span class="line"><span class="javascript">    &#125; = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> slotDemoProps = &#123;</span></span><br><span class="line">      scopedSlots: &#123;</span><br><span class="line">        item(props) &#123;</span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="string">`item slot-scope <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(props)&#125;</span>`</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      props: &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> bigProps = &#123;</span></span><br><span class="line">      props: &#123;</span><br><span class="line">        onChange: handleBigPropChange</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> (</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">a-tabs</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">a-tab-pane</span> <span class="attr">key</span>=<span class="string">"props"</span> <span class="attr">tab</span>=<span class="string">"属性"</span>&gt;</span></span></span><br><span class="line">            &lt;Props</span><br><span class="line"><span class="javascript">              name=<span class="string">"Hello Vue！"</span></span></span><br><span class="line">              type=&#123;type&#125;</span><br><span class="line"><span class="javascript">              isVisible=&#123;<span class="literal">false</span>&#125;</span></span><br><span class="line">              &#123;...&#123; props: &#123; onChange: handlePropChange &#125; &#125;&#125;</span><br><span class="line"><span class="javascript">              title=<span class="string">"属性Demo"</span></span></span><br><span class="line"><span class="javascript">              <span class="class"><span class="keyword">class</span></span>=<span class="string">"test1"</span></span></span><br><span class="line"><span class="javascript">              <span class="class"><span class="keyword">class</span></span>=&#123;[<span class="string">"test1"</span>, <span class="string">"test2"</span>]&#125;</span></span><br><span class="line"><span class="javascript">              style=&#123;&#123; <span class="attr">marginTop</span>: <span class="string">"10px"</span> &#125;&#125;</span></span><br><span class="line">            /&gt;</span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">a-tab-pane</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">a-tab-pane</span> <span class="attr">key</span>=<span class="string">"event"</span> <span class="attr">tab</span>=<span class="string">"事件"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Event</span> <span class="attr">name</span>=<span class="string">&#123;name&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;handleEventChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">a-tab-pane</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">a-tab-pane</span> <span class="attr">key</span>=<span class="string">"slot"</span> <span class="attr">tab</span>=<span class="string">"插槽"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">SlotDemo</span> &#123;<span class="attr">...slotDemoProps</span>&#125;&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">p</span>&gt;</span>default slot<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>title slot1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>title slot2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">SlotDemo</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">a-tab-pane</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">a-tab-pane</span> <span class="attr">key</span>=<span class="string">"bigProps"</span> <span class="attr">tab</span>=<span class="string">"大属性"</span>&gt;</span></span></span><br><span class="line">            &lt;BigProps</span><br><span class="line">              name=&#123;bigPropsName&#125;</span><br><span class="line">              &#123;...bigProps&#125;</span><br><span class="line">              slotDefault=&#123;getDefault()&#125;</span><br><span class="line">              slotTitle=&#123;getTitle()&#125;</span><br><span class="line">              slotScopeItem=&#123;getItem&#125;</span><br><span class="line">            /&gt;</span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">a-tab-pane</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">a-tabs</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// bigProps</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">"BigProps"</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    VNodes: &#123;</span><br><span class="line"><span class="javascript">      functional: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      render: <span class="function">(<span class="params">h, ctx</span>) =&gt;</span> ctx.props.vnodes</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line"><span class="javascript">    name: <span class="built_in">String</span>,</span></span><br><span class="line">    onChange: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Function</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    slotDefault: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">    slotTitle: <span class="built_in">Array</span>,</span></span><br><span class="line">    slotScopeItem: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Function</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleChange() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.onChange(<span class="string">"Hello vue!"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  render() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> &#123; name, handleChange, slotDefault, slotTitle, slotScopeItem &#125; = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> (</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line">        &#123;name&#125;</span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleChange&#125;</span>&gt;</span>change name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line">        &#123;slotDefault&#125;</span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line">        &#123;slotTitle&#125;</span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="javascript">        &#123;slotScopeItem(&#123; <span class="attr">value</span>: <span class="string">"vue"</span> &#125;)&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// Events.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">"EventDemo"</span>,</span></span><br><span class="line">  props: &#123;</span><br><span class="line"><span class="javascript">    name: <span class="built_in">String</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleChange(e) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$emit(<span class="string">"change"</span>, e.target.value);</span></span><br><span class="line">    &#125;,</span><br><span class="line">    handleDivClick() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$emit(<span class="string">"change"</span>, <span class="string">""</span>);</span></span><br><span class="line">    &#125;,</span><br><span class="line">    handleClick(e, stop) &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"stop"</span>, stop);</span></span><br><span class="line">      if (stop) &#123;</span><br><span class="line">        e.stopPropagation();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  render() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> &#123; name, handleChange, handleDivClick, handleClick &#125; = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> (</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="javascript">        name: &#123;name || <span class="string">"--"</span>&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;name&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;handleChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;handleDivClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>重置成功<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;e</span> =&gt;</span> handleClick(e, true)&#125;&gt;重置失败<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// Props.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">"PropsDemo"</span>,</span></span><br><span class="line"><span class="javascript">  <span class="comment">// inheritAttrs: false,</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// props: ['name', 'type', 'list', 'isVisible'],</span></span></span><br><span class="line">  props: &#123;</span><br><span class="line"><span class="javascript">    name: <span class="built_in">String</span>,</span></span><br><span class="line">    type: &#123;</span><br><span class="line"><span class="javascript">      validator: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 这个值必须匹配下列字符串中的一个</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> [<span class="string">"success"</span>, <span class="string">"warning"</span>, <span class="string">"danger"</span>].includes(value);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    list: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 对象或数组默认值必须从一个工厂函数获取</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> []</span></span><br><span class="line">    &#125;,</span><br><span class="line">    isVisible: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="literal">false</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    onChange: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Function</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 不要这么做、不要这么做、不要这么做</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//this.type = "warning";</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// 可以，还可以更好</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.onChange(<span class="keyword">this</span>.type === <span class="string">"success"</span> ? <span class="string">"warning"</span> : <span class="string">"success"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  render() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> &#123; name, type, list, isVisible, handleClick &#125; = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> (</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line">        name: &#123;name&#125;</span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line">        type: &#123;type&#125;</span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line">        list: &#123;list&#125;</span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line">        isVisible: &#123;isVisible&#125;</span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>change type<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// Slot</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">"SlotDemo"</span>,</span></span><br><span class="line">  render() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> &#123; $scopedSlots &#125; = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> (</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line">        &#123;$scopedSlots.default()&#125;</span><br><span class="line">        &#123;$scopedSlots.title()&#125;</span><br><span class="line"><span class="javascript">        &#123;$scopedSlots.item(&#123; <span class="attr">value</span>: <span class="string">"vue"</span> &#125;)&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="十、为什么需要vuex"><a href="#十、为什么需要vuex" class="headerlink" title="十、为什么需要vuex"></a>十、为什么需要vuex</h2><p><img src="http://blog.poetries.top/img-repo/2019/10/vue/19.png" alt></p><p><strong>Vuex运行机制</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/vue/20.png" alt></p><p><strong>基本例子</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment(state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    increment(&#123;commit&#125;) &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// state.count++ // 不要对state进行更改操作，应该通过commit交给mutations去处理</span></span><br><span class="line">        commit(<span class="string">'increment'</span>)</span><br><span class="line">      &#125;, <span class="number">3000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    doubleCount(state) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// App.vue</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123;count&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123;$store.getters.doubleCount&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$store.commit('increment')"</span>&gt;</span>count++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$store.dispatch('increment')"</span>&gt;</span>count++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'app'</span>,</span></span><br><span class="line">  computed: &#123;</span><br><span class="line">    count() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="十一、vuex核心概念和底层原理"><a href="#十一、vuex核心概念和底层原理" class="headerlink" title="十一、vuex核心概念和底层原理"></a>十一、vuex核心概念和底层原理</h2><h3 id="11-1-核心概念"><a href="#11-1-核心概念" class="headerlink" title="11.1 核心概念"></a>11.1 核心概念</h3><p><img src="http://blog.poetries.top/img-repo/2019/10/vue/23.png" alt></p><h3 id="11-2-底层原理"><a href="#11-2-底层原理" class="headerlink" title="11.2 底层原理"></a>11.2 底层原理</h3><p><img src="http://blog.poetries.top/img-repo/2019/10/vue/22.png" alt></p><p><strong>简化版本的vuex</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">const</span> Store = <span class="function"><span class="keyword">function</span> <span class="title">Store</span> (<span class="params">options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;state = &#123;&#125;, mutations=&#123;&#125;&#125; = options</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 把state进行响应式和vue写法一样</span></span><br><span class="line">  <span class="keyword">this</span>._vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">      $$state: state</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">this</span>._mutations = mutations</span><br><span class="line">&#125;</span><br><span class="line">Store.prototype.commit = <span class="function"><span class="keyword">function</span>(<span class="params">type, payload</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>._mutations[type]) &#123;</span><br><span class="line">    <span class="keyword">this</span>._mutations[type](<span class="keyword">this</span>.state, payload)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(Store.prototype, &#123; </span><br><span class="line">  <span class="comment">// 当我们取值 如 $store.getter.count的时候就会触发这里</span></span><br><span class="line">  state: &#123; </span><br><span class="line">    <span class="keyword">get</span>: function()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>._vm._data.$$state</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;Store&#125;</span><br></pre></td></tr></table></figure><h2 id="十二、vuex最佳实践"><a href="#十二、vuex最佳实践" class="headerlink" title="十二、vuex最佳实践"></a>十二、vuex最佳实践</h2><h3 id="12-1-核心概念"><a href="#12-1-核心概念" class="headerlink" title="12.1 核心概念"></a>12.1 核心概念</h3><p><img src="http://blog.poetries.top/img-repo/2019/10/vue/23.png" alt></p><h3 id="12-2-使用常量代替Mutation事件类型"><a href="#12-2-使用常量代替Mutation事件类型" class="headerlink" title="12.2 使用常量代替Mutation事件类型"></a>12.2 使用常量代替Mutation事件类型</h3><p><img src="http://blog.poetries.top/img-repo/2019/10/vue/24.png" alt></p><h3 id="12-3-命名空间"><a href="#12-3-命名空间" class="headerlink" title="12.3 命名空间"></a>12.3 命名空间</h3><blockquote><p>对所有模块开启命名空间</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/vue/25.png" alt></p><h3 id="12-4-实践例子"><a href="#12-4-实践例子" class="headerlink" title="12.4 实践例子"></a>12.4 实践例子</h3><blockquote><p>DEMO地址 <a href="https://github.com/poetries/vuex-demo" target="_blank" rel="noopener">https://github.com/poetries/vuex-demo</a></p></blockquote><h2 id="十三、vue-router使用场景"><a href="#十三、vue-router使用场景" class="headerlink" title="十三、vue-router使用场景"></a>十三、vue-router使用场景</h2><h3 id="13-1-解决的问题"><a href="#13-1-解决的问题" class="headerlink" title="13.1 解决的问题"></a>13.1 解决的问题</h3><p><img src="http://blog.poetries.top/img-repo/2019/10/vue/26.png" alt></p><h3 id="13-2-使用方式"><a href="#13-2-使用方式" class="headerlink" title="13.2 使用方式"></a>13.2 使用方式</h3><p><img src="http://blog.poetries.top/img-repo/2019/10/vue/27.png" alt></p><h3 id="13-3-例子"><a href="#13-3-例子" class="headerlink" title="13.3 例子"></a>13.3 例子</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">'./routes'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  routes,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// App.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>router demo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'app'</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#app</span> &#123;</span></span><br><span class="line">  font-family: 'Avenir', Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line"><span class="css">  <span class="selector-tag">color</span>: <span class="selector-id">#2c3e50</span>;</span></span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// routes.js</span></span><br><span class="line"><span class="keyword">import</span> RouterDemo <span class="keyword">from</span> <span class="string">'./components/RouterDemo'</span></span><br><span class="line"><span class="keyword">import</span> RouterChildrenDemo <span class="keyword">from</span> <span class="string">'./components/RouterChildrenDemo'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>, <span class="attr">component</span>: RouterDemo, <span class="attr">name</span>: <span class="string">'1'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/bar'</span>, <span class="attr">component</span>: RouterDemo, <span class="attr">name</span>: <span class="string">'2'</span> &#125;,</span><br><span class="line">  <span class="comment">// 当 /user/:id 匹配成功，</span></span><br><span class="line">  <span class="comment">// RouterDemo 会被渲染在 App 的 &lt;router-view /&gt; 中</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/user/:id'</span>, </span><br><span class="line">    component: RouterDemo, </span><br><span class="line">    name: <span class="string">'3'</span>,</span><br><span class="line">    props: <span class="literal">true</span>,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 当 /user/:id/profile 匹配成功，</span></span><br><span class="line">        <span class="comment">// RouterChildrenDemo 会被渲染在 RouterDemo 的 &lt;router-view/&gt; 中</span></span><br><span class="line">        path: <span class="string">'profile'</span>,</span><br><span class="line">        component: RouterChildrenDemo,</span><br><span class="line">        name: <span class="string">'3-1'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 当 /user/:id/posts 匹配成功</span></span><br><span class="line">        <span class="comment">// RouterChildrenDemo 会被渲染在 RouterDemo 的 &lt;router-view/&gt; 中</span></span><br><span class="line">        path: <span class="string">'posts'</span>,</span><br><span class="line">        component: RouterChildrenDemo</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/a'</span>, <span class="attr">redirect</span>: <span class="string">'/bar'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'*'</span>, <span class="attr">component</span>: RouterDemo, <span class="attr">name</span>: <span class="string">'404'</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes</span><br></pre></td></tr></table></figure><blockquote><p>更多详情 <a href="https://github.com/poetries/vue-router-demo" target="_blank" rel="noopener">https://github.com/poetries/vue-router-demo</a></p></blockquote><h2 id="十四、路由的类型及底层原理"><a href="#十四、路由的类型及底层原理" class="headerlink" title="十四、路由的类型及底层原理"></a>十四、路由的类型及底层原理</h2><p><strong>路由的类型</strong></p><ul><li><code>Hash</code>模式：无法使用锚点定位</li><li><code>History</code>模式：需要后端配合，IE9不兼容，可以使用强制刷新处理</li></ul><p><strong>原理</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/vue/28.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、组件的核心概念-属性props几种写法&quot;&gt;&lt;a href=&quot;#一、组件的核心概念-属性props几种写法&quot; class=&quot;headerlink&quot; title=&quot;一、组件的核心概念-属性props几种写法&quot;&gt;&lt;/a&gt;一、组件的核心概念-属性props几种写法&lt;/
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>React Native之Icon/启动图设置</title>
    <link href="http://blog.poetries.top/2019/10/04/rn-icon-spash-setting/"/>
    <id>http://blog.poetries.top/2019/10/04/rn-icon-spash-setting/</id>
    <published>2019-10-04T07:10:12.000Z</published>
    <updated>2020-07-24T04:13:35.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生成不同尺寸的启动图和图标"><a href="#生成不同尺寸的启动图和图标" class="headerlink" title="生成不同尺寸的启动图和图标"></a>生成不同尺寸的启动图和图标</h2><p><strong>方式一</strong></p><blockquote><p><a href="http://blog.poetries.top/2019/01/10/ionic3-summary/#12-1-%E5%9B%BE%E6%A0%87%E7%94%9F%E6%88%90">借助Ionic生成不同尺寸的启动图和图标</a></p></blockquote><p><strong>方式二</strong></p><p><strong>各种尺寸Icon图标生成</strong></p><blockquote><p>使用图标工厂生成 <a href="https://icon.wuruihong.com/" target="_blank" rel="noopener">https://icon.wuruihong.com/</a></p></blockquote><ol><li>安卓下替换<code>andriod/app/src/main/res/</code>下的mipmap文件即可</li><li>iOS下替换如下</li></ol><p><img src="http://blog.poetries.top/img-repo/2019/10/750.png" alt></p><p><strong>各种尺寸启动图图标生成</strong></p><blockquote><p>启动图也可以使用图标工厂生产了 <a href="https://icon.wuruihong.com/splash" target="_blank" rel="noopener">https://icon.wuruihong.com/splash</a></p></blockquote><ol><li>安卓下拷贝生成的文件到<code>andriod/app/src/main/res/</code>目录下</li></ol><p><img src="http://blog.poetries.top/img-repo/2019/10/751.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/750.png" alt></p><ol start="2"><li>iOS下拷贝生成的该文件夹替换即可</li></ol><p><img src="http://blog.poetries.top/img-repo/2019/10/752.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/753.png" alt></p><h2 id="安卓端"><a href="#安卓端" class="headerlink" title="安卓端"></a>安卓端</h2><p><strong>修改图标和名称</strong></p><blockquote><p>找到根目录<code>/android/app/src/main/res</code></p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/540.png" alt></p><p><strong>启动页</strong></p><blockquote><ul><li>在<code>react-native</code>的<code>android</code>中的启动图和<code>IOS</code>不相同点在于，<code>android</code>没有默认的启动图，在<code>IOS</code>里面有</li><li>使用插件 <code>import SplashScreen from &#39;react-native-splash-screen&#39;;</code></li><li><a href="https://github.com/crazycodeboy/react-native-splash-screen" target="_blank" rel="noopener">https://github.com/crazycodeboy/react-native-splash-screen</a></li></ul></blockquote><blockquote><p>把生成好的启动页按这个格式处理即可</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/541.png" alt></p><h2 id="iOS端"><a href="#iOS端" class="headerlink" title="iOS端"></a>iOS端</h2><p><strong>修改app名称</strong></p><blockquote><p>编辑 <code>ios/test/Info.plist</code> 文件</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;key&gt;CFBundleDisplayName&lt;/key&gt;</span><br><span class="line">- &lt;string&gt;$(PRODUCT_NAME)&lt;/string&gt;</span><br><span class="line">+ &lt;string&gt;测试程序&lt;/string&gt;</span><br></pre></td></tr></table></figure><p><strong>修改应用图标</strong></p><blockquote><p>应用图标对尺寸有要求，比较简单地方式是准备一张 <code>1024*1024</code> 的图片，然后使用<a href="https://icon.wuruihong.com/" target="_blank" rel="noopener">图标工厂</a>在线生成 </p></blockquote><blockquote><p>这里直接从 Sketch iOS 图标设计模板中选取了一张图片，生成后的结果如下</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/744.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/745.png" alt></p><blockquote><p>我们可以直接用生成好的内容替换默认的图标即可</p></blockquote><blockquote><p>替换 <code>ios/test/Images.xcassets/AppIcon.appiconset</code> 中的内容。如果不需要全部尺寸，可以用 XCode 打开项目，点击 <code>Images.xcassets&gt;AppIcon</code> 拖入相应尺寸的图标</p></blockquote><h2 id="添加启动页"><a href="#添加启动页" class="headerlink" title="添加启动页"></a>添加启动页</h2><blockquote><p>添加启动页可以使用 <a href="https://github.com/crazycodeboy/react-native-splash-screen" target="_blank" rel="noopener">react-native-splash-screen</a> 库，通过它可以控制启动页的显示和隐藏</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yarn add react-native-splash-screen</span><br><span class="line"></span><br><span class="line">$ react-native link react-native-splash-screen</span><br></pre></td></tr></table></figure><p><strong>Android</strong></p><blockquote><p>编辑 <code>MainActivity.java</code>，添加显示启动页的代码</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Bundle; <span class="comment">// here</span></span><br><span class="line"><span class="keyword">import</span> com.facebook.react.ReactActivity;</span><br><span class="line"><span class="comment">// react-native-splash-screen &gt;= 0.3.1</span></span><br><span class="line"><span class="keyword">import</span> org.devio.rn.splashscreen.SplashScreen; <span class="comment">// here</span></span><br><span class="line"><span class="comment">// react-native-splash-screen &lt; 0.3.1</span></span><br><span class="line"><span class="keyword">import</span> com.cboy.rn.splashscreen.SplashScreen; <span class="comment">// here</span></span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">ReactActivity</span> </span>&#123;</span><br><span class="line">   @Override</span><br><span class="line">    protected <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        SplashScreen.show(<span class="keyword">this</span>);  <span class="comment">// here</span></span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...other code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在 <code>android/app/src/main/res/layout</code> 文件夹下创建启动页布局文件 <code>launch_screen.xml</code></p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@drawable/launch_image"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>将启动页图片放置在 <code>drawable</code> 文件夹下</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drawable-ldpi</span><br><span class="line">drawable-mdpi</span><br><span class="line">drawable-hdpi</span><br><span class="line">drawable-xhdpi</span><br><span class="line">drawable-xxhdpi</span><br><span class="line">drawable-xxxhdpi</span><br></pre></td></tr></table></figure><ul><li>Android 会自动缩放 drawable 下的图片，所以我们不必为所有分辨率的设备准备启动图</li><li>完成上述操作后，重新打包应用，再启动时就可以看到启动页了。不过，启动页显示之前会有短暂的白屏，我们可以通过设置透明背景来处理。编辑 <code>android/app/src/main/res/values/styles.xml</code> 文件，修改如下</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Base application theme. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></span></span><br><span class="line"><span class="xml">+        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowIsTranslucent"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>iOS</strong></p><blockquote><p><a href="https://github.com/phodal/growth/tree/master/ios/growth/Images.xcassets/AppIcon.appiconset" target="_blank" rel="noopener">图标配置参考</a></p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#import "AppDelegate.h"</span><br><span class="line"></span><br><span class="line">#import &lt;React/RCTBundleURLProvider.h&gt;</span><br><span class="line">#import &lt;React/RCTRootView.h&gt;</span><br><span class="line">#import "RNSplashScreen.h"  // here</span><br><span class="line"></span><br><span class="line">@implementation AppDelegate</span><br><span class="line"></span><br><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...other code</span></span><br><span class="line"></span><br><span class="line">    [RNSplashScreen show];  <span class="comment">// here</span></span><br><span class="line">    <span class="keyword">return</span> YES;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><blockquote><p>用 XCode 打开项目，选中 <code>LaunchScreen.xib</code> 中的 <code>View</code>，取消选中 <code>Use Launch Screen</code></p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/746.webp" alt></p><blockquote><p>选中项目，在 <code>General</code> 配置中设置 <code>Launch Images Srouce</code>，点击 <code>Use Asset Catalog</code>，弹出对话框中使用默认即可（此操作会在 <code>Images.xcassets</code> 中创建 <code>LaunchImage</code>），然后设置 <code>Launch Screen File</code> 为空</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/747.webp" alt></p><p><img src="http://blog.poetries.top/img-repo/2019/10/754.png" alt></p><p><img src="http://blog.poetries.top/img-repo/2019/10/755.png" alt></p><blockquote><p>点击 <code>Images.xcassets &gt; LaunchImage</code>，在右侧属性栏处选择要支持的设备。接着，添加对应分辨率的图片，分辨率对照如下</p></blockquote><table><thead><tr><th>设备</th><th>分辨率</th></tr></thead><tbody><tr><td><code>iOS 11+</code></td><td><code>1125*2436</code></td></tr><tr><td><code>iOS 8+ Retina HD 5.5</code></td><td><code>1242*2208</code></td></tr><tr><td><code>iOS 8+ Retina HD 4.7</code></td><td><code>750*1334</code></td></tr><tr><td><code>iOS 7+ 2x</code></td><td><code>640*960</code></td></tr><tr><td><code>iOS 7+ Retina 4</code></td><td><code>640*1136</code></td></tr><tr><td><code>iOS 5,6 1x</code></td><td><code>320*480</code></td></tr><tr><td><code>iOS 5,6 2x</code></td><td><code>640*960</code></td></tr><tr><td><code>iOS 5,6 Retina 4</code></td><td><code>640*1136</code></td></tr></tbody></table><p><strong>安卓的尺寸</strong></p><table><thead><tr><th>设备</th><th>分辨率</th></tr></thead><tbody><tr><td><code>mdpi:</code></td><td><code>375*667</code></td></tr><tr><td><code>hdpi:</code></td><td><code>563*1001</code></td></tr><tr><td><code>xhdpi:</code></td><td><code>750*1334</code></td></tr><tr><td><code>xxhdpi:</code></td><td><code>1125*2001</code></td></tr><tr><td><code>xxxhdpi:</code></td><td><code>1500*2668</code></td></tr></tbody></table><p><img src="http://blog.poetries.top/img-repo/2019/10/748.webp" alt></p><p>完成上述操作之后，重新安装 APP 再启动时就可以看到启动页</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;生成不同尺寸的启动图和图标&quot;&gt;&lt;a href=&quot;#生成不同尺寸的启动图和图标&quot; class=&quot;headerlink&quot; title=&quot;生成不同尺寸的启动图和图标&quot;&gt;&lt;/a&gt;生成不同尺寸的启动图和图标&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;方式一&lt;/strong&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
      <category term="RN" scheme="http://blog.poetries.top/tags/RN/"/>
    
  </entry>
  
  <entry>
    <title>React Native之iOS打包发布</title>
    <link href="http://blog.poetries.top/2019/10/03/rn-ios-distribute/"/>
    <id>http://blog.poetries.top/2019/10/03/rn-ios-distribute/</id>
    <published>2019-10-03T16:10:12.000Z</published>
    <updated>2020-07-24T04:13:35.057Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>结合这篇文章一起看 <a href="http://blog.poetries.top/2019/10/07/Ionic-ios-build">http://blog.poetries.top/2019/10/07/Ionic-ios-build</a></p></blockquote><blockquote><p><code>React Native</code> 应用程序开发完成后，需要先打包一个测试版，由测试人员安装应用并测试。对于 <code>iOS</code> 应用，一般来说，开发者如果需要将应用安装到某些用户的设备上，就需要将应用导出为这些设备可以直接安装的安装包（<code>.ipa</code> 文件）。本文总结了如何打包 <code>ipa</code> 并发布到应用内测分发平台供安装测试</p></blockquote><h2 id="一、应用程序打包"><a href="#一、应用程序打包" class="headerlink" title="一、应用程序打包"></a>一、应用程序打包</h2><blockquote><p>开发 <code>React Native</code> 应用时，js 代码和图片资源通过 <code>Debug Server</code> 提供，但是当我们需要发布应用时，就需要将 js 等资源和应用一起打包</p></blockquote><h3 id="1-1-打包离线资源"><a href="#1-1-打包离线资源" class="headerlink" title="1.1 打包离线资源"></a>1.1 打包离线资源</h3><blockquote><p>通过 <code>react-native bundle</code> 命令可以打包离线资源。为了日后把打包方便，我们把打包指令填在下<code>package.json</code>下</p></blockquote><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "start": "node node_modules/react-native/local-cli/cli.js start",</span><br><span class="line">    "test": "jest",</span><br><span class="line">    "bundle-ios": "node node_modules/react-native/local-cli/cli.js bundle --entry-file index.js --platform ios --dev false --bundle-output ./ios/bundle/index.jsbundle --assets-dest ./ios/bundle"</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><blockquote><p><code>bundle-ios</code>命令参数含义</p></blockquote><ul><li><code>--entry-file</code>：入口文件。</li><li><code>--platform</code>：平台名称（ios或者android）。</li><li><code>--dev</code>：是否是开发模式，设置为 false 的时候将会对 JavaScript 代码进行优化处理。</li><li><code>--bundle-output</code>：生成的 <code>jsbundle</code> 文件的名称。</li><li><code>--assets-dest</code>：图片以及其他资源存放的目录</li></ul><blockquote><p>这样打包只需要在根目录下输入<code>npm run bundle-ios</code> 即可（切记一定要先在<code>项目--&gt;ios下新建bundle</code>文件夹，不然会报错）</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/711.png" alt></p><blockquote><p>之后你会发现bundle文件下面已经有了内容（如下图）</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/712.png" alt></p><h3 id="1-2-添加离线资源到项目中"><a href="#1-2-添加离线资源到项目中" class="headerlink" title="1.2 添加离线资源到项目中"></a>1.2 添加离线资源到项目中</h3><blockquote><p>在<code>Xcode</code>中添加资源到项目中，必须使用<code>Create folder references</code>的方式(也就是文件夹的方式)添加<code>bundle</code>文件<br>夹</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/713.png" alt></p><blockquote><p>必须使用<code>Create folder references</code>的方式添加：</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/714.png" alt></p><blockquote><p>添加成功后<code>bundle</code>文件夹为蓝色（如下图）</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/715.png" alt></p><h3 id="1-3-修改-AppDelegate-m-文件"><a href="#1-3-修改-AppDelegate-m-文件" class="headerlink" title="1.3 修改 AppDelegate.m 文件"></a>1.3 修改 AppDelegate.m 文件</h3><blockquote><p>在开发的过程中可以在这里配置<code>Debug Server</code>的地址，当发布上线的时候，就需要使用离线的<code>jsbundle</code>文件，因此需要设置<code>jsCodeLocation</code>为本地的离线<code>jsbundle</code>。</p></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</span><br><span class="line">&#123;</span><br><span class="line">  NSURL *jsCodeLocation;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@"index" fallbackResource:nil];</span></span><br><span class="line"><span class="comment">//  jsCodeLocation = [NSURL URLWithString:@"http://192.0.0.0:8081/index.bundle?platform=ios&amp;dev=true"];//真机Hot reloading</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line">     jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@<span class="string">"index"</span> fallbackResource:nil];<span class="comment">//开发调试</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    jsCodeLocation = [[NSBundle mainBundle] URLForResource:@<span class="string">"bundle/index"</span> withExtension:@<span class="string">"jsbundle"</span>];<span class="comment">//上线打包</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"> ........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、iOS证书配置"><a href="#二、iOS证书配置" class="headerlink" title="二、iOS证书配置"></a>二、iOS证书配置</h2><blockquote><p>建议阅读这篇文章更详细。<a href="http://blog.poetries.top/2019/10/03/rn-ios-cert-config">React Native打包前凑之iOS证书配置</a></p></blockquote><blockquote><p>首先你的有一个开发者账号才可以进行以下步骤</p></blockquote><blockquote><p>在mac上搜索钥匙串打开</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/726.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/727.png" alt></p><blockquote><p>到 <code>https://developer.apple.com</code> 去申请证书</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/728.png" alt></p><blockquote><p>新建证书</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/729.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/730.png" alt></p><blockquote><p>上传之前的钥匙串文件</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/731.png" alt></p><blockquote><p>下载证书。双击即可安装到钥匙串中</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/732.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/733.png" alt></p><blockquote><p>新建<code>Identifiers</code></p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/734.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/735.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/736.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/737.png" alt></p><blockquote><p>新增Profiles 把设备证书以及id关联起来</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/738.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/739.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/740.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/741.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/742.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/743.png" alt></p><blockquote><p>到此证书部分添加完毕。接下来是根据已经配置的证书去打包。xcode会自动同步证书信息过来</p></blockquote><h2 id="三、Xcode-打包-ipa"><a href="#三、Xcode-打包-ipa" class="headerlink" title="三、Xcode 打包 ipa"></a>三、Xcode 打包 ipa</h2><ol><li>在 <code>Xcode</code> 添加前面申请证书的开发者账号（<code>Xcode-&gt;Preferences-&gt;Accounts</code>）</li></ol><p><img src="http://blog.poetries.top/img-repo/2019/10/716.png" alt></p><ol start="2"><li>这里的 <code>Bundle Idetifier</code> 应该为之前在开发者平台上添加的 <code>App ID</code> 如下图</li></ol><p><img src="http://blog.poetries.top/img-repo/2019/10/717.png" alt></p><ol start="3"><li>配置一下<code>code sign</code> 。选择 <code>Code Signing Identity</code> 安装证书</li></ol><blockquote><p>程序会自动选择设置</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/718.png" alt></p><blockquote><p>或者手动选择证书</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/719.png" alt></p><ol start="4"><li>点击设备，选择通用 iOS 设备</li></ol><p><img src="http://blog.poetries.top/img-repo/2019/10/720.png" alt></p><ol start="5"><li>点击 <code>Product-&gt;Archive</code> 开始打包</li></ol><blockquote><p>打包完成后如下</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/721.png" alt></p><blockquote><p>点击<code>distribute App</code></p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/ionic/16.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/17.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/18.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/ionic/19.png" alt></p><blockquote><p>最后打包成<code>ipa</code>文件</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/725.png" alt></p><h2 id="四、发布到内测分发平台"><a href="#四、发布到内测分发平台" class="headerlink" title="四、发布到内测分发平台"></a>四、发布到内测分发平台</h2><blockquote><p>由于新版的 iTunes 没有了应用程序选项，所以无法通过 iTunes 安装 App 到手机中。比较方便的方式是将应用发布到内测分发平台，然后扫码即可下载。目前我听得比较多的平台就是蒲公英和 fir.im，不过这两个平台都需要实名认证，有点蛋疼。具体使用哪个平台自己甄选就行，这里推荐一个不需要认证的国外平台 <a href="https://www.diawi.com" target="_blank" rel="noopener">https://www.diawi.com</a></p></blockquote><h3 id="4-1-ipa安装到手机上"><a href="#4-1-ipa安装到手机上" class="headerlink" title="4.1 ipa安装到手机上"></a>4.1 ipa安装到手机上</h3><blockquote><p>在Xcode的导航栏上选择<code>window-&gt;Devices and Simulators</code>，点击弹出页面里面的+号，选择<code>ipa</code>所在的文件夹,添加<code>ipa</code>，安装成功</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/709.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/710.png" alt></p><blockquote><p>以上只是测试版本打包，打包成<code>disctibute App</code>发布版本同理，这里不再赘述</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;结合这篇文章一起看 &lt;a href=&quot;http://blog.poetries.top/2019/10/07/Ionic-ios-build&quot;&gt;http://blog.poetries.top/2019/10/07/Ionic-ios-build&lt;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
      <category term="RN" scheme="http://blog.poetries.top/tags/RN/"/>
    
  </entry>
  
  <entry>
    <title>React Native打包前凑之iOS证书配置</title>
    <link href="http://blog.poetries.top/2019/10/03/rn-ios-cert-config/"/>
    <id>http://blog.poetries.top/2019/10/03/rn-ios-cert-config/</id>
    <published>2019-10-03T11:10:12.000Z</published>
    <updated>2020-07-24T04:13:35.057Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>iOS证书配置</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/693.png" alt></p><h2 id="一、Overview"><a href="#一、Overview" class="headerlink" title="一、Overview"></a>一、Overview</h2><blockquote><p>我们都知道开发一款应用需要配置苹果常用证书、<code>AppId</code>,<code>Provisioning Profiles</code>，如果有推送还需要配置推送证书等</p></blockquote><h2 id="二、App-ID"><a href="#二、App-ID" class="headerlink" title="二、App ID"></a>二、App ID</h2><blockquote><p><code>App ID</code> 是每个应用的独立标识，在设置中可以配置该应用的权限，比如：<code>Push Notifications</code>、<code>Network Extensions</code>等。</p></blockquote><h2 id="三、开发者证书"><a href="#三、开发者证书" class="headerlink" title="三、开发者证书"></a>三、开发者证书</h2><ul><li>iOS证书是用来证明iOS App内容（executable code）的合法性和完整性的数字证书。对于想安装到真机或发布到AppStore的应用程序（App），只有经过签名验证（Signature Validated）才能确保来源可信，并且保证App内容是完整、未经篡改的。</li><li>数字证书是一个经证书授权中心数字签名的包含公开密钥拥有者信息以及公开密钥的文件。具有时效性，只在特定的时间段内有效。</li><li>开发证书类型分为两种，一种开发证书（iOS Development）一种发布证书(iOS Distribution)。开发证书（iOS Development）用于开发和调试应用程序，可用于真机调试；生产证书用于打包上传App Store，用于验证开发者身份</li></ul><h2 id="四、推送证书"><a href="#四、推送证书" class="headerlink" title="四、推送证书"></a>四、推送证书</h2><blockquote><p>如果项目中集成了推送功能，同样需要配置推送证书。推送证书同样也分两种：开发（Apple Development iOS Push Services）、生产（Apple Production iOS Push Services）。推送证书在AppID中创建生成，同时生成的的p12文件需要上传到服务端后台（友盟后台、极光后台或自己服务端后台）</p></blockquote><h2 id="五、配置文件（Provisioning-Profiles）"><a href="#五、配置文件（Provisioning-Profiles）" class="headerlink" title="五、配置文件（Provisioning Profiles）"></a>五、配置文件（Provisioning Profiles）</h2><blockquote><p>配置文件同样也分两种，分为开发（<code>Development</code>）和发布（<code>Distribution</code>），配置文件（<code>Provisioning Profiles</code>）中包含了证书、<code>App ID</code>、设备（Devices），后缀名为<code>.mobileprovision</code>。它在开发者账号体系中扮演着配置和验证的角色，是真机调试和打包上架必须的文件</p></blockquote><ul><li>一个<code>Provisioning Profile</code>对应一个Explicit App ID或Wildcard App ID</li><li><code>Provisioning Profile</code>决定<code>Xcode</code>用哪个证书（公钥）/私钥组合（Key Pair/Signing Identity）来签名应用程序（<code>Signing Product</code>）,将在应用程序打包时嵌入到<code>.ipa</code>包里</li><li><code>Provisioning Profile</code> 把这些信息全部打包在一起，方便我们在调试和发布程序打包时使用。这样，只要在不同的情况下选择不同的<code>Provisioning Profile</code>文件就可以了</li><li><code>Provisioning Profile</code>也分为<code>Development</code>和<code>Distribution</code>两类，有效期同<code>Certificate</code>一样。<code>Development</code>版本的<code>ProvisioningProfile</code>用于开发调试，<code>Distribution</code>版本的<code>ProvisioningProfile</code>主要用于提交<code>App Store</code>审核，其不指定开发测试的<code>Devices</code></li></ul><blockquote><p>ps:打<code>Ad-hoc</code>包的时候，如果遇到刚添加的设备<code>UDID</code>没添加进去，可以将开发模式的配置文件下载下来，打包后直接选中即可</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/694.png" alt></p><p>在配置证书之前我们需要有一个开发账号。个人账号和公司账号类似，每年都需要支付99刀，其中公司账号需要邓白氏编码而个人账号并不需要。</p><p>如果项目需要不通过App Store进行安装，可以申请企业账号。当然了，也可以找一些第三方直接打企业包，比如蒲公英之类的</p><h2 id="六、创建CSR文件（证书请求文件）"><a href="#六、创建CSR文件（证书请求文件）" class="headerlink" title="六、创建CSR文件（证书请求文件）"></a>六、创建CSR文件（证书请求文件）</h2><blockquote><p>CSR（<code>Certificate signing request</code>）即证书请求文件。证书申请者在申请数字证书时由CSP(加密服务提供者)在生成私钥的同时也生成证书请求文件（CSR文件），证书申请者只要把CSR文件提交给证书颁发机构后（创建App ID时上传到苹果后台），证书颁发机构使用其根证书私钥签名生成证书公钥文件（开发者证书）</p></blockquote><ul><li>关于CSR文件的创建，我们可以直接使用Mac上的钥匙串访问直接请求。</li></ul><p><strong>具体步骤为： 钥匙串访问 -&gt; 钥匙串访问 -&gt; 证书助理 -&gt; 从证书颁发机构请求证书</strong></p><p><strong>1、打开电脑上的钥匙串访问，选中证书助理；</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/695.png" alt></p><p><strong>2、用户电子邮件地址填开发者账号的邮箱，名称可以随意填，然后保存到磁盘上。</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/696.png" alt></p><p><strong>3、Keychain将生成一个包含开发者身份信息的CSR（Certificate Signing Request）文件。同时，Keychain Access-&gt;Keys（密钥）中增加一对Public/Private Key Pair</strong></p><h3 id="创建App-ID"><a href="#创建App-ID" class="headerlink" title="创建App ID"></a>创建App ID</h3><p><strong>1、登录苹果开发者中心,或者直接登录Apple Member Center选择Certificates,Identifiers &amp; Profiles</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/697.png" alt></p><p><strong>2、选择Identifiers 中的 App IDs，然后点上方的加号；</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/698.png" alt></p><p><strong>3、添加App ID Description和Bundle ID</strong></p><ul><li>在“Explicit App ID”栏下的“Bundle ID”项中输入App ID（反域名格式，如：com.company.test）</li><li>这里“Bundle ID”对应Xcode中的“Bundle identifier” Explicit App ID：唯一的App ID，用于唯一标识一个应用程序。例如“com.apple.garageband”这个App ID，用于标识Bundle Identifier为“com.apple.garageband”的App</li><li>Wildcard App ID：含有通配符的App ID，用于标识一组应用程序。例如“”（实际上是Application Identifier Prefix）表示所有应用程序；而“com.apple.”可以表示Bundle Identifier以“com.apple.”开头（苹果公司）的所有应用程序。</li><li>在“App Services”栏下选择应用要使用到的服务（如要使用推送功能，勾选“Push Notifications”）</li><li>点击continue-&gt;点击submit-&gt;点击done，申请App IDs完成。点击All IDs可查看申请的ID，点击该ID</li><li>点击 对应名称 可对该App ID进行编辑</li></ul><h2 id="七、创建开发者证书-和-推送证书"><a href="#七、创建开发者证书-和-推送证书" class="headerlink" title="七、创建开发者证书 和 推送证书"></a>七、创建开发者证书 和 推送证书</h2><p><strong>1、选择Certificates,然后选择上方的加号；</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/699.png" alt></p><p><strong>2、选择相应的证书，因为开发调试证书、生产发布证书、开发环境推送证书、生产环境推送证书基本都类似，所以这里只选择开发调试证书为例。</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/699.jpg" alt></p><p><strong>3、一路点击Continue, 到Generate后选择一开始生成的CSR文件上传，然后再继续点击Continue</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/701.png" alt></p><p><strong>4、生成完开发调试、生成调试证书 和 开发环境推送证书、生成环境推送证书，可以在“Certificates”-&gt;“All”中查看该证书，并进行下载或删除</strong></p><p><strong>5、下载到桌面上，然后双击添加到钥匙串中，可在Keychain Access-&gt;“证书”中查看</strong></p><blockquote><p>使用友盟，生成的推送证书（开发环境和生产环境）需要从钥匙串访问中导出p12文件，添加到友盟后台</p></blockquote><h2 id="八、推送证书"><a href="#八、推送证书" class="headerlink" title="八、推送证书"></a>八、推送证书</h2><blockquote><p>导出p12文件上传到友盟（极光）后台</p></blockquote><p><strong>1、由上一步创建了开发环境的推送证书和生成环境的推送证书，下载到电脑上后，直接双击即可安装到钥匙串中。</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/702.png" alt></p><p><strong>2、选中相应证书（开发环境推送证书或生成环境推送证书）右键 导出；</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/703.png" alt></p><p><strong>3、点击存储后需要输入密码，密码要记住，上传到友盟（极光）后台时，需要用到</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/704.png" alt></p><h3 id="创建配置文件（Provisioning-Profiles）"><a href="#创建配置文件（Provisioning-Profiles）" class="headerlink" title="创建配置文件（Provisioning Profiles）"></a>创建配置文件（Provisioning Profiles）</h3><p><strong>1、选中Provisioning Profiles 然后选中上方的加号。</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/705.png" alt></p><p><strong>2、配置文件也分为开发和发布，我们这里以Ad Hoc为例，因为我们打测试包的时候，如果有些设备的UDID未添加进配置文件中，我们需要下载配置文件手动选择。而其他的的配置文件目前的Xcode会自动请求，所以一般不需要我们自己手动创建</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/706.png" alt></p><p><strong>3、选择刚创建的App ID,选择相应证书、选择测试的设备，然后创建名称一直点击Continue即可，最后下载下来</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/707.png" alt><br><img src="http://blog.poetries.top/img-repo/2019/10/708.png" alt></p><p>到此为止证书和配置文件之类的都创建完了~~</p><h2 id="九、总结："><a href="#九、总结：" class="headerlink" title="九、总结："></a>九、总结：</h2><ul><li>导出p12证书的时候需要密码，上传到友盟（极光）后台需要输入密码。</li><li>开发和生成的推送证书创建成功后，到相应App ID 下查看是否有，如果没有可以停段时间刷新下，或下载下来手动上传上去。</li><li>新添加上的测试机的UDID，打包的时候没打包上去，需要重新创建配置文件，下载后将本地的删除，然后双击。不过刚添加UDID，重新创建配置文件后，我一般在打包的时候手动选择配置文件。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;iOS证书配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.poetries.top/img-repo/2019/10/693.png&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、Overview&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="RN" scheme="http://blog.poetries.top/tags/RN/"/>
    
      <category term="IOS证书" scheme="http://blog.poetries.top/tags/IOS%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>React Native之原理浅析</title>
    <link href="http://blog.poetries.top/2019/10/02/rn-yuanli/"/>
    <id>http://blog.poetries.top/2019/10/02/rn-yuanli/</id>
    <published>2019-10-02T10:30:12.000Z</published>
    <updated>2020-07-24T04:13:35.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、JavaScriptCore"><a href="#一、JavaScriptCore" class="headerlink" title="一、JavaScriptCore"></a>一、JavaScriptCore</h2><blockquote><p>讲React Native之前，了解JavaScriptCore会有帮助，也是必要的。React Native的核心驱动力就来自于JS Engine. 你写的所有JS和JSX代码都会被JS Engine来执行, 没有JS Engine的参与，你是无法享受ReactJS给原生应用开发带来的便利的。在iOS上，默认的就是JavaScriptCore， iOS 7之后的设备都支持. iOS 不允许用自己的JS Engine. JavaScriptCore来自于WebKit, 所以，安卓上默认也是用JavaScriptCore</p></blockquote><blockquote><p>你深入了解<code>React Native</code>的第一站应该是 <code>JavaScriptCore</code></p></blockquote><ul><li><code>JavaScriptCore</code>在<code>iOS</code>平台上给<code>React Native</code>提供的接口也仅限于那几个接口，你弄明白了<code>JavaScriptCore</code>那几个接口, React Native 剩下的魔法秘密都可以顺藤摸瓜来分析了。</li><li>接下来要讲解的就是Facebook围绕这几个接口以及用一个React来颠覆整个native开发所做的精妙设计和封装</li></ul><h2 id="二、浏览器工作原理"><a href="#二、浏览器工作原理" class="headerlink" title="二、浏览器工作原理"></a>二、浏览器工作原理</h2><ul><li>浏览器通过<code>Dom Render</code>来渲染所有的元素.</li><li>浏览器有一整套的UI控件，样式和功能都是按照html标准实现的</li><li>浏览器能读懂html和css。</li><li>html告诉浏览器绘制什么控件(html tag)，css告诉浏览器每个类型的控件(html tag)具体长什么样。</li><li>浏览器的主要作用就是通过解析html来形成dom树，然后通过css来点缀和装饰树上的每一个节点</li></ul><p><strong>UI的描述和呈现分离开了</strong></p><ol><li>html文本描述了页面应该有哪些功能，css告诉浏览器该长什么样。</li><li>浏览器引擎通过解析html和css，翻译成一些列的预定义UI控件，</li><li>然后UI控件去调用操作系统绘图指令去绘制图像展现给用户。</li><li>Javascript可有可无，主要用于html里面一些用户事件响应，DOM操作、异步网络请求和一些简单的计算</li></ol><blockquote><p>在react native 里面，1和2是不变的，也是用html语言描述页面有哪些功能，然后stylesheet告诉浏览器引擎每个控件应该长什么样。并且和浏览器用的是同一个引擎</p></blockquote><blockquote><p>在步骤3里面UI控件不再是浏览器内置的控件，而是<code>react native</code>自己实现的一套UI控件（两套，android一套，ios一套），这个切换是在<code>MessageQueque</code>中进行的，并且还可以发现，他们tag也是不一样的</p></blockquote><p><strong>Javascript在react native里面非常重要</strong></p><ul><li>它负责管理UI component的生命周期，管理Virtual DOM</li><li>所有业务逻辑都是用javascript来实现或者衔接</li><li>调用原生的代码来操纵原生组件。</li><li>Javascript本身是无绘图能力的，都是通过给原生组件发指令来完成</li></ul><h2 id="三、React-Native-架构"><a href="#三、React-Native-架构" class="headerlink" title="三、React Native 架构"></a>三、React Native 架构</h2><p><img src="http://blog.poetries.top/img-repo/2019/10/680.jpeg" alt></p><ul><li>绿色的是我们应用开发的部分。我们写的代码基本上都是在这一层</li><li>蓝色代表公用的跨平台的代码和工具引擎，一般我们不会动蓝色部分的代码</li><li>黄色代码平台相关的代码，做定制化的时候会添加修改代码。不跨平台，要针对平台写不同的代码。iOS写OC, android写java，web写js. 每个bridge都有对应的js文件，js部分是可以共享的，写一份就可以了。如果你想做三端融合，你就得理解这一个东西。如果你要自己定制原生控件，你就得写bridge部分</li><li>红色部分是系统平台的东西。红色上面有一个虚线，表示所有平台相关的东西都通过bridge隔离开来了</li><li>大部分情况下我们只用写绿色的部分，少部分情况下会写黄色的部分。你如果对基础架构和开源感兴趣，你可以写蓝色部分，然后尝试给那些大的开源项目提交代码。红色部分是独立于React Native的</li></ul><h2 id="四、React-Native、React和JavascriptCore的关系"><a href="#四、React-Native、React和JavascriptCore的关系" class="headerlink" title="四、React Native、React和JavascriptCore的关系"></a>四、React Native、React和JavascriptCore的关系</h2><blockquote><p>React Native最重要的三个概念应该就是<code>React Native</code>、<code>React</code>和<code>JavascriptCore</code></p></blockquote><ul><li>React是一个纯JS库，所有的React代码和所有其它的js代码都需要JS Engine来解释执行。因为种种原因，浏览器里面的JS代码是不允许调用自定义的原生代码的，而React又是为浏览器JS开发的一套库，所以，比较容易理解的事实是React是一个纯JS库，它封装了一套Virtual Dom的概念，实现了数据驱动编程的模式，为复杂的Web UI实现了一种无状态管理的机制, 标准的HTML/CSS之外的事情，它无能为力。调用原生控件，驱动声卡显卡，读写磁盘文件，自定义网络库等等，这是JS/React无能为力的</li><li>你可以简单理解为React是一个纯JS 函数， 它接受特定格式的字符串数据，输出计算好的字符串数据</li><li>JS Engine负责调用并解析运行这个函数</li><li><code>React Native</code>呢？ 它比较复杂。复杂在哪里？前面我们说了React 是纯JS库，意味着React只能运行JS代码，通过JS Engine提供的接口(Html Tag)绘制html支持的那些元素，驱动有限的声卡显卡。简单点说, React只能做浏览器允许它做的事情, 不能调用原生接口， 很多的事情也只能干瞪眼</li></ul><p><strong>React Native它可不一样</strong></p><ul><li>第一点，驱动关系不一样。前面我们说的是, JS Engine来解析执行React脚本, 所以，React由浏览器(最终还是JS Engine)来驱动. 到了React Native这里，RN的原生代码(Timer和用户事件)驱动JS Engine, 然后JS Engine解析执行React或者相关的JS代码，然后把计算好的结果返回给Native code. 然后, Native code 根据JS计算出来的结果驱动设备上所有能驱动的硬件。重点，所有的硬件。也就是说，在RN这里，JS代码已经摆脱JS Engine(浏览器)的限制，可以调用所有原生接口啦</li><li>第二点, 它利用React的Virtual Dom和数据驱动编程概念，简化了我们原生应用的开发, 同时，它不由浏览器去绘制，只计算出绘制指令，最终的绘制还是由原生控件去负责，保证了原生的用户体验</li></ul><p><strong>React Native组件结构</strong></p><blockquote><p>驱动硬件的能力决定能一个软件能做多大的事情，有多大的主控性。研究过操作系统底层东西或者汇编的同学明白，我们大部分时候写的代码是受限的代码，很多特权指令我们是没法使用的，很多设备我们是不允许直接驱动的。我们现在的编程里面几乎已经没有人提中断了，没有中断，硬件的操作几乎会成为一场灾难.</p></blockquote><p>在一定程度上，React Native和NodeJS有异曲同工之妙。它们都是通过扩展JavaScript Engine, 使它具备强大的本地资源和原生接口调用能力，然后结合JavaScript丰富的库和社区和及其稳定的跨平台能力，把javascript的魔力在浏览器之外的地方充分发挥出来</p><p><strong>JavaScriptCore + ReactJS + Bridges 就成了React Native</strong></p><ul><li><code>JavaScriptCore</code>负责JS代码解释执行</li><li><code>ReactJS</code>负责描述和管理<code>VirtualDom</code>,指挥原生组件进行绘制和更新，同时很多计算逻辑也在js里面进行。ReactJS自身是不直接绘制UI的，UI绘制是非常耗时的操作，原生组件最擅长这事情。</li><li><code>Bridges</code>用来翻译ReactJS的绘制指令给原生组件进行绘制，同时把原生组件接收到的用户事件反馈给<code>ReactJS</code>。<br>要在不同的平台实现不同的效果就可以通过定制<code>Bridges</code>来实现</li></ul><blockquote><p>深入 <code>Bridge</code> 前面有提到, RN厉害在于它能打通JS和Native Code, 让JS能够调用丰富的原生接口,充分发挥硬件的能力, 实现非常复杂的效果,同时能保证效率和跨平台性。</p></blockquote><blockquote><p>打通RN任督二脉的关键组件就是<code>Bridge</code>. 在RN中如果没有Bridge, JS还是那个JS，只能调用JS Engine提供的有限接口，绘制标准html提供的那些效果,那些摄像头，指纹，3D加速,声卡, 视频播放定制等等，JS都只能流流口水，原生的、平台相关的、设备相关的效果做不了， 除非对浏览器进行定制</p></blockquote><ul><li>Bridge的作用就是给RN内嵌的JS Engine提供原生接口的扩展供JS调用。所有的本地存储、图片资源访问、图形图像绘制、3D加速、网络访问、震动效果、NFC、原生控件绘制、地图、定位、通知等都是通过Bridge封装成JS接口以后注入JS Engine供JS调用。理论上，任何原生代码能实现的效果都可以通过Bridge封装成JS可以调用的组件和方法, 以JS模块的形式提供给RN使用。</li><li>每一个支持RN的原生功能必须同时有一个原生模块和一个JS模块，JS模块是原生模块的封装，方便Javascript调用其接口。Bridge会负责管理原生模块和对应JS模块之间的沟通, 通过Bridge, JS代码能够驱动所有原生接口，实现各种原生酷炫的效果。</li><li>RN中JS和Native分隔非常清晰，JS不会直接引用Native层的对象实例，Native也不会直接引用JS层的对象实例(所有Native和JS互掉都是通过Bridge层会几个最基础的方法衔接的)。</li><li><code>Bridge</code> 原生代码负责管理原生模块并生成对应的JS模块信息供JS代码调用。每个功能JS层的封装主要是针对ReactJS做适配，让原生模块的功能能够更加容易被用ReactJS调用。<code>MessageQueue.js</code>是<code>Bridge</code>在JS层的代理，所有JS2N和N2JS的调用都会经过<code>MessageQueue.js</code>来转发。JS和Native之间不存在任何指针传递，所有参数都是字符串传递。所有的instance都会被在JS和Native两边分别编号，然后做一个映射,然后那个数字/字符串编号会做为一个查找依据来定位跨界对象。</li></ul><h2 id="五、Bridge各模块简介"><a href="#五、Bridge各模块简介" class="headerlink" title="五、Bridge各模块简介"></a>五、Bridge各模块简介</h2><h3 id="5-1-RCTRootView"><a href="#5-1-RCTRootView" class="headerlink" title="5.1 RCTRootView"></a>5.1 RCTRootView</h3><ul><li><code>RCTRootView</code>是<code>React Native</code>加载的地方,是万物之源。从这里开始，我们有了JS Engine, JS代码被加载进来，对应的原生模块也被加载进来，然后js loop开始运行。 js loop的驱动来源是Timer和Event Loop(用户事件). js loop跑起来以后应用就可以持续不停地跑下去了。</li><li>如果你要通过调试来理解RN底层原理，你也应该是从RCTRootView着手，顺藤摸瓜。</li><li>每个项目的<code>AppDelegate.m</code>的- (BOOL)application:didFinishLaunchingWithOptions:里面都可以看到RCTRootView的初始化代码，RCTRootView初始化完成以后，整个React Native运行环境就已经初始化好了，JS代码也加载完毕，所有React的绘制都会有这个RCTRootView来管理。</li></ul><p><strong>RCTRootView做的事情如下</strong></p><ul><li>创建并且持有<code>RCTBridge</code></li><li>加载<code>JS Bundle</code>并且初始化JS运行环境.</li><li>初始化JS运行环境的时候在App里面显示<code>loadingView</code>, 注意不是屏幕顶部的那个下拉悬浮进度提示条. RN第一次加载之后每次启动非常快，很少能意识到这个加载过程了。loadingView默认情况下为空, 也就是默认是没有效果的。loadingView可以被自定义，直接覆盖RCTRootView.loadingView就可以了.开发模式下RN app第一次启动因为需要完整打包整个js所以可以很明显看到加载的过程，加载第一次以后就看不到很明显的加载过程了，可以执行下面的命令来触发重新打包整个js来观察<code>loadingView</code>的效果 <code>watchman watch-del-all &amp;&amp; rm -rf node_modules/ &amp;&amp; yarn install &amp;&amp; yarn start – –reset-cache</code>, 然后杀掉<code>app</code>重启你就会看到一个很明显的进度提示.</li><li><code>JS</code>运行环境准备好以后把加载视图用<code>RCTRootContentView</code>替换加载视图</li><li>有准备工作就绪以后调用<code>AppRegistry.runApplication</code>正式启动RN JS代码，从<code>Root Component()</code>开始UI绘制</li></ul><blockquote><p>一个App可以有多个<code>RCTRootView</code>, 初始化的时候需要手动传输<code>Bridge</code>做为参数，全局可以有多个<code>RCTRootView</code>, 但是只能有一个<code>Bridge</code></p></blockquote><blockquote><p>如果你做过<code>React Native</code>和原生代码混编，你会发现混编就是把<code>AppDelegate</code>里面那段初始化<code>RCTRootView</code>的代码移动到需要混编的地方，然后把<code>RCTRootView</code>做为一个普通的<code>subview</code>来加载到原生的<code>view</code>里面去，非常简单。不过这地方也要注意处理好单Bridge实例的问题，同时，混编里面要注意<code>RCTRootView</code>如果销毁过早可能会引发JS回调奔溃的问题</p></blockquote><h3 id="5-2-RCTRootContentView"><a href="#5-2-RCTRootContentView" class="headerlink" title="5.2 RCTRootContentView"></a>5.2 RCTRootContentView</h3><ul><li><code>RCTRootContentView reactTag</code>在默认情况下为1. 在<code>Xcode view Hierarchy debugger</code> 下可以看到，最顶层为<code>RCTRootView</code>, 里面嵌套的是<code>RCTRootContentView</code>, 从<code>RCTRootContentView</code>开始，每个View都有一个<code>reactTag</code></li><li><code>RCTRootView</code>继承自UIView, RCTRootView主要负责初始化<code>JS Environment</code>和React代码，然后管理整个运行环境的生命周期。 <code>RCTRootContentView</code>继承自<code>RCTView</code>, <code>RCTView</code>继承自UIView, RCTView封装了React Component Node更新和渲染的逻辑， <code>RCTRootContentView</code>会管理所有react ui components. <code>RCTRootContentView</code>同时负责处理所有touch事件</li></ul><h3 id="5-3-RCTBridge"><a href="#5-3-RCTBridge" class="headerlink" title="5.3 RCTBridge"></a>5.3 RCTBridge</h3><blockquote><p>这是一个加载和初始化专用类，用于前期JS的初始化和原生代码的加载</p></blockquote><ul><li>负责加载各个Bridge模块供JS调用</li><li>找到并注册所有实现了<code>RCTBridgeModule protocol</code>的类, 供JS后期使用.</li><li>创建和持有 <code>RCTBatchedBridge</code></li></ul><h3 id="5-4-RCTBatchedBridge"><a href="#5-4-RCTBatchedBridge" class="headerlink" title="5.4 RCTBatchedBridge"></a>5.4 RCTBatchedBridge</h3><blockquote><p>如果RCTBridge是总裁, 那么RCTBatchedBridge就是副总裁。前者负责发号施令，后者负责实施落地</p></blockquote><ul><li>负责Native和JS之间的相互调用(消息通信)</li><li>持有<code>JSExecutor</code></li><li>实例化所有在RCTBridge里面注册了的<code>native node_modules</code></li><li>创建JS运行环境, 注入<code>native hooks</code> 和<code>modules</code>, 执行 JS bundle script</li><li>管理JS run loop, 批量把所有JS到native的调用翻译成<code>native invocations</code></li><li>批量管理原生代码到JS的调用，把这些调用翻译成JS消息发送给<code>JS executor</code></li></ul><h3 id="5-5-RCTJavaScriptLoader"><a href="#5-5-RCTJavaScriptLoader" class="headerlink" title="5.5 RCTJavaScriptLoader"></a>5.5 RCTJavaScriptLoader</h3><blockquote><p>这是实现远程代码加载的核心。热更新，开发环境代码加载，静态<code>jsbundle</code>加载都离不开这个工具。</p></blockquote><ul><li>从指定的地方(<code>bundle</code>, <code>http server</code>)加载 <code>script bundle</code></li><li>把加载完成的脚本用<code>string</code>的形式返回</li><li>处理所有获取代码、打包代码时遇到的错误</li></ul><h3 id="5-6-RCTContextExecutor"><a href="#5-6-RCTContextExecutor" class="headerlink" title="5.6 RCTContextExecutor"></a>5.6 RCTContextExecutor</h3><ul><li>封装了基础的JS和原生代码互掉和管理逻辑，是JS引擎切换的基础。通过不同的RCTCOntextExecutor来适配不同的JS Engine，让我们的React JS可以在iOS、Android、chrome甚至是自定义的js engine里面执行。这也是为何我们能在chrome里面直接调试js代码的原因</li><li>管理和执行所有N2J调用</li></ul><h3 id="5-7-RCTModuleData"><a href="#5-7-RCTModuleData" class="headerlink" title="5.7 RCTModuleData"></a>5.7 RCTModuleData</h3><ul><li>加载和管理所有和JS有交互的原生代码。把需要和JS交互的代码按照一定的规则自动封装成JS模块</li><li>收集所有桥接模块的信息，供注入到JS运行环境</li></ul><h3 id="5-8-RCTModuleMethod"><a href="#5-8-RCTModuleMethod" class="headerlink" title="5.8 RCTModuleMethod"></a>5.8 RCTModuleMethod</h3><blockquote><p>记录所有原生代码的导出函数地址(JS里面是不能直接持有原生对象的)，同时生成对应的字符串映射到该函数地址。JS调用原生函数的时候会通过message的形式调用过来</p></blockquote><ul><li>记录所有的原生代码的函数地址，并且生成对应的字符串映射到该地址</li><li>记录所有的block的地址并且映射到唯一的一个id</li><li>翻译所有<code>J2N call</code>，然后执行对应的native方法</li></ul><blockquote><ul><li>如果是原生方法的调用则直接通过方法名调用，MessageQueue会帮忙把Method翻译成MethodID, 然后转发消息给原生代码，传递函数签名和参数给原生MessageQueue, 最终给RCTModuleMethod解析调用最终的方法</li><li>如果JS调用的是一个回调block，MessageQueue会把回调对象转化成一个一次性的block id, 然后传递给RCTModuleMethod, 最终由RCTModuleMethod解析调用。基本上和方法调用一样，只不过生命周期会不一样，block是动态生成的，要及时销毁，要不然会导致内存泄漏</li></ul></blockquote><blockquote><p>实际上是不存在原生MessageQueue对象模块的，JS的MessageQueue对应到原生层就是RCTModuleData &amp; RCTModuleMethod的组合, MessageQueue的到原生层的调用先经过RCTModuleData和RCTModuleMethod翻译成原生代码调用，然后执行</p></blockquote><h3 id="5-9-MessageQueue"><a href="#5-9-MessageQueue" class="headerlink" title="5.9 MessageQueue"></a>5.9 MessageQueue</h3><ul><li>这是核心中的核心。整个react native对浏览器内核是未做任何定制的，完全依赖浏览器内核的标准接口在运作。它怎么实现UI的完全定制的呢？它实际上未使用浏览器内核的任何UI绘制功能，注意是未使用UI绘制功能。它利用javascript引擎强大的DOM操作管理能力来管理所有UI节点，每次刷新前把所有节点信息更新完毕以后再给yoga做排版，然后再调用原生组件来绘制。javascript是整个系统的核心语言。</li><li>我们可以把浏览器看成一个盒子，javascript引擎是盒子里面的总管，DOM是javascript引擎内置的，javascript和javascript引擎也是无缝链接的。react native是怎么跳出这个盒子去调用外部原生组件来绘制UI的呢？秘密就在MessageQueue。</li><li>javascript引擎对原生代码的调用都是通过一套固定的接口来实现，这套接口的主要作用就是记录原生接口的地址和对应的javascript的函数名称，然后在javascript调用该函数的时候把调用转发给原生接口</li></ul><h2 id="六、React-Native-初始化"><a href="#六、React-Native-初始化" class="headerlink" title="六、React Native 初始化"></a>六、React Native 初始化</h2><blockquote><p><code>React Native</code>的初始化从<code>RootView</code>开始，默认在<code>AppDelegate.m:- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</code> 里面会有<code>RootViewd</code>的初始化逻辑，调试的时候可以从这里入手</p></blockquote><p><strong>React Native的初始化分为几个步骤</strong></p><ul><li>原生代码加载</li><li><code>JS Engine</code>初始化(生成一个空的JS引擎)</li><li>JS基础设施初始化. 主要是require等基本模块的加载并替换JS默认的实现。自定义<code>require</code>, <code>Warning window</code>, <code>Alert window</code>, <code>fetch</code>等都是在这里进行的。基础设施初始化好以后就可以开始加载js代码了</li><li>遍历加载所有要导出给JS用的原生模块和方法, 生成对应的JS模块信息，打包成json的格式给JS Engine, 准确地说是给MessageQueue. </li></ul><p><strong>这里需要提一下的是</strong></p><blockquote><p>这里的导出是没有对象的，只有方法和模块。JS不是一个标准的面向对象语言，刚从Java转JavaScript的同学都会在面向对象这个概念上栽跟头，这里特别提醒一下</p></blockquote><h3 id="6-1-原生代码初始化"><a href="#6-1-原生代码初始化" class="headerlink" title="6.1 原生代码初始化"></a>6.1 原生代码初始化</h3><blockquote><p>这里讨论的主要是RN相关的原生代码和用户自定义的RN模块的原生代码的加载和初始化。原生代码初始化主要分两步</p></blockquote><ul><li>静态加载。iOS没有动态加载原生代码的接口，所有的代码都在编译的初期就已经编译为静态代码并且链接好，程序启动的时候所有的原生代码都会加载好。这是原生代码的静态加载，iOS里面没有动态加载原生代码的概念，这也是为何没有静态代码热更新的原因</li><li>RN模块解析和注入JS。这是加载的第二步。在RootView初始化的时候会遍历所有被标记为RCTModule的原生模块，生成一个json格式的模块信息，里面包含模块名称和方法名称，然后注入到JS Engine, 由MessageQueue记录下来。原生代码在生成json模块信息的时候同时会在原生代码这边维护一个名称字典，用来把模块和方法的名称映射到原生代码的地址上去，用于JS调用原生代码的翻译</li></ul><h3 id="6-2-Javascript环境初始化"><a href="#6-2-Javascript环境初始化" class="headerlink" title="6.2 Javascript环境初始化"></a>6.2 Javascript环境初始化</h3><ul><li>RN的初始化是从RCRootView开始的，所有的绘制都会在这个RootView里面进行(Alert除外)</li><li>RootView做的第一件事情就是初始化一个空的JS Engine。 这个空的JS Engine里面包含一些最基础的模块和方法(fetch, require, alert等), 没有UI绘制模块。 RN的工作就是替换这些基础的模块和方法，然后把RN的UI绘制模块加载并注入到JS Engine.</li></ul><p><strong>JS Engine不直接管理UI的绘制</strong></p><ul><li>所有的绘制由原生控制的UI事件和Timer触发</li><li>影响界面刷新的事件发生以后一部分直接由原生控件消化掉，直接更新原生控件。剩下的部分会通过<code>Bridge</code>派发给MessageQueue，然后在JS层进行业务逻辑的计算，再由<code>React</code>来进行Virtual Dom的管理和更新。<code>Virtual Dom</code>再通过MessageQueue发送重绘指令给对应的原生组件进行UI更新</li></ul><h3 id="6-3-NativeModules加载"><a href="#6-3-NativeModules加载" class="headerlink" title="6.3 NativeModules加载"></a>6.3 NativeModules加载</h3><ul><li>在OC里面，所有NativeModules要加载进JS Engine都必须遵循一定的协议(protocol)。</li><li>模块(OC里面的类)需要声明为<rctbridgemodule>, 然后在类里面还必须调用宏RCT_EXPORT_MODULE() 用来定义一个接口告诉JS当前模块叫什么名字。这个宏可以接受一个可选的参数，指定模块名，不指定的情况下就取类名。</rctbridgemodule></li><li>对应的JS模块在初始化的时候会调用原生类的[xxx new]方法- 模块声明为<code>&lt;RCTBridgeModule&gt;</code>后只是告诉Native Modules这有一个原生模块，是一个空的模块。要导出任何方法给JS使用都必须手动用宏RCT_EXPORT_METHOD来导出方法给JS用.</li><li>所有的原生模块都会注册到<code>NativeModules</code>这一个JS模块下面去，你如果想要让自己的模块成为一个顶级模块就必须再写一个JS文件封装一遍NativeModules里面的方法。</li><li>你如果想自己的方法导出就默认成为顶级方法，那么你需要一个手动去调用JSC的接口，这个在前面章节有讲解。 不建议这样做，因为这样你会失去跨JS引擎的便利性。</li><li>你可以导出常量到JS里面去, 模块初始化的时候会坚持用户是否有实现<code>constantsToExport</code> 方法, 接受一个常量词典</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (NSDictionary *)constantsToExport</span><br><span class="line">&#123;</span><br><span class="line">  return @&#123; @&quot;firstDayOfTheWeek&quot;: @&quot;Monday&quot; &#125;;// JS里面可以直接调用 ModuleName.firstDayOfTheWeek获取这个常量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>常量只会在初始化的时候调用一次，动态修改该方法的返回值无效</li><li>所有标记为RCT_EXPORT_MODULE的模块都会在程序启动的时候自动注册好这些模块，主要是记录模块名和方法名。只是注册，不一定会初始化。</li><li><code>Native Modules</code>导出宏具体使用方法见官方文档<code>Native Modules</code></li></ul><h3 id="6-4-三个线程"><a href="#6-4-三个线程" class="headerlink" title="6.4 三个线程"></a>6.4 三个线程</h3><blockquote><p>React Native有三个重要的线程:</p></blockquote><ul><li>Shadow queue. 布局引擎(yoga)计算布局用的</li><li>Main thread. 主线程。就是操作系统的UI线程。无论是iOS还是android，一个进程都只有一个UI线程，我们常说的主线程. React Native所有UI绘制也是由同一个UI线程来维护</li><li><code>Javascript thread. javascript</code>线程。 大家都知道javascript是单线程模型，event驱动的异步模型。React Native用了JS引擎，所以也必需有一个独立的js 线程. 所有JS和原生代码的交互都发生在这个线程里。死锁，异常也最容易发生在这个线程</li></ul><blockquote><p>可以看到Shadow queue是queue而不是thread, 在iOS里面queue是thread之上的一层抽象,GCD里面的一个概念，创建queue的时候可以指定是并行的还是串行的。也就是说，一个queue可能对应多个thread</p></blockquote><h2 id="七、内部机制"><a href="#七、内部机制" class="headerlink" title="七、内部机制"></a>七、内部机制</h2><p><strong>内部机制</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/681.jpg" alt></p><p><strong>JS用时序</strong></p><p><img src="http://blog.poetries.top/img-repo/2019/10/682.png" alt></p><h2 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h2><h3 id="8-1-React-Native-框架分析"><a href="#8-1-React-Native-框架分析" class="headerlink" title="8.1 React Native 框架分析"></a>8.1 React Native 框架分析</h3><p><img src="http://blog.poetries.top/img-repo/2019/10/683.png" alt></p><h3 id="8-2-层次架构"><a href="#8-2-层次架构" class="headerlink" title="8.2 层次架构"></a>8.2 层次架构</h3><ul><li><strong>Java层</strong>：该层主要提供了Android的UI渲染器<code>UIManager</code>（将JavaScript映射成<code>Android Widget</code>）以及一些其他的功能组件（例如：Fresco、Okhttp）等，在java层均封装为Module，java层核心jar包是react-native.jar，封装了众多上层的interface，如Module，Registry，bridge等</li><li><strong>C++层</strong>：主要处理Java与JavaScript的通信以及执行JavaScript代码工作，该层封装了JavaScriptCore，执行对js的解析。基于<code>JavaScriptCore</code>，<code>Web</code>开发者可以尽情使用ES6的新特性，如class、箭头操作符等，而且 React Native运行在<code>JavaScriptCore</code>中的，完全不存在浏览器兼容的情况。Bridge桥接了java ， js 通信的核心接口。JSLoader主要是将来自assets目录的或本地file加载javascriptCore，再通过<code>JSCExectutor</code>解析js文件</li><li><strong>Js层</strong>：该层提供了各种供开发者使用的组件以及一些工具库。<br><code>Component</code>：Js层通js/jsx编写的<code>Virtual Dom</code>来构建<code>Component</code>或Module，Virtual DOM是DOM在内存中的一种轻量级表达方式，可以通过不同的渲染引擎生成不同平台下的UI。component的使用在 React 里极为重要, 因为component的存在让计算 DOM diff 更高效。<br>ReactReconciler : 用于管理顶层组件或子组件的挂载、卸载、重绘</li></ul><blockquote><p>注：JSCore，即JavaScriptCore，JS解析的核心部分，IOS使用的是内置的<code>JavaScriptCore</code>，Androis上使用的是 <a href="https://webkit.org" target="_blank" rel="noopener">https://webkit.org</a> 家的jsc.so。</p></blockquote><p><strong>Java层核心类及原理，如下所示</strong></p><p><strong>ReactContext</strong></p><ul><li>ReactContext继承于ContextWrapper，是ReactNative应用的上下文，通过getContext()去获得，通过它可以访问ReactNative核心类的实现。</li></ul><p><strong>ReactInstanceManager</strong></p><ul><li><code>ReactInstanceManager</code>是ReactNative应用总的管理类，创建<code>ReactContext</code>、<code>CatalystInstance</code>等类，解析<code>ReactPackage</code>生成映射表，并且配合<code>ReactRootView</code>管理View的创建与生命周期等功能。</li></ul><p><strong>ReactRootView</strong></p><ul><li>为启动入口核心类，负责监听及分发事件并重新渲染元素，App启动后，其将作为App的<code>root view</code>。</li></ul><p><strong>CatalystInstance</strong></p><ul><li><code>CatalystInstance</code>是<code>ReactNative</code>应用Java层、C++层、JS层通信总管理类，总管Java层、JS层核心<code>Module</code>映射表与回调，三端通信的入口与桥梁。</li></ul><p><strong>JavaScriptModule</strong></p><ul><li><code>JavaScriptModule</code>是<code>JS Module</code>，负责JS到Java的映射调用格式声明，由<code>CatalystInstance</code>统一管理。</li></ul><p><strong>NativeModule</strong></p><ul><li><code>NativeModule</code>是<code>java Module</code>，负责Java到Js的映射调用格式声明，由<code>CatalystInstance</code>统一管理。</li></ul><p><strong>JavascriptModuleRegistry</strong></p><ul><li>JS Module映射表,负责将所有JavaScriptModule注册到CatalystInstance，通过Java动态代理调用到Js。</li></ul><p><strong>NativeModuleRegistry</strong></p><ul><li>是Java Module映射表,即暴露给Js的API集合。</li></ul><p><strong>CoreModulePackage</strong></p><ul><li>定义核心框架模块，创建<code>NativeModules&amp;JsModules</code></li></ul><h3 id="8-3-启动过程的解析"><a href="#8-3-启动过程的解析" class="headerlink" title="8.3 启动过程的解析"></a>8.3 启动过程的解析</h3><ol><li>ReactInstanceManager创建时会配置应用所需的java模块与js模块，通过ReactRootView的startReactApplication启动APP。</li><li>在创建ReactInstanceManager同时会创建用于加载JsBundle的JSBundlerLoader，并传递给CatalystInstance。</li><li>CatalystInstance会创建Java模块注册表及Javascript模块注册表，并遍历实例化模块。</li><li>CatalystInstance通过JSBundlerLoader向Node Server请求Js Bundle，并传递给JSCJavaScriptExectutor，最后传递给javascriptCore，再通过ReactBridge通知ReactRootView完成渲染</li></ol><h3 id="8-4-Js与Java通信机制"><a href="#8-4-Js与Java通信机制" class="headerlink" title="8.4 Js与Java通信机制"></a>8.4 Js与Java通信机制</h3><blockquote><p>Java与Js之间的调用，是以两边存在两边存在同一份模块配置表，最终均是将调用转化为{moduleID,methodID，callbackID，args}，处理端在模块配置表里查找注册的模块与方法并调用。</p></blockquote><p><strong>Java 调用Js</strong></p><blockquote><p>Java通过注册表调用到CatalystInstance实例，透过ReactBridge的jni，调用到Onload.cpp中的callFunction，最后通过javascriptCore，调用BatchedBridge.js，根据参数｛moduleID,methodID｝require相应Js模块执行。流程如下图：</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/684.png" alt></p><p><strong>Js 调用Java</strong></p><blockquote><p>如果消息队列中有等待Java 处理的逻辑，而且 Java 超过 5ms 都没有来取走，那么 JavaScript 就会主动调用 Java 的方法,在需要调用调Java模块方法时，会把参数｛moduleID,methodID｝等数据存在MessageQueue中，等待Java的事件触发，把MessageQueue中的｛moduleID,methodID｝返回给Java，再根据模块注册表找到相应模块处理。流程如下图：</p></blockquote><p><img src="http://blog.poetries.top/img-repo/2019/10/685.webp" alt></p><h2 id="九、更多参考"><a href="#九、更多参考" class="headerlink" title="九、更多参考"></a>九、更多参考</h2><ul><li><a href="https://juejin.im/post/5a6460f8f265da3e4f0a446d" target="_blank" rel="noopener">React Native for Android 原理分析与实践：实现原理</a></li><li><a href="https://www.jianshu.com/p/e220e1f34a0b" target="_blank" rel="noopener">深入剖析 JavaScriptCore</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、JavaScriptCore&quot;&gt;&lt;a href=&quot;#一、JavaScriptCore&quot; class=&quot;headerlink&quot; title=&quot;一、JavaScriptCore&quot;&gt;&lt;/a&gt;一、JavaScriptCore&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;讲
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
      <category term="RN" scheme="http://blog.poetries.top/tags/RN/"/>
    
  </entry>
  
  <entry>
    <title>React Native之启动流程</title>
    <link href="http://blog.poetries.top/2019/10/02/rn-start-progress/"/>
    <id>http://blog.poetries.top/2019/10/02/rn-start-progress/</id>
    <published>2019-10-02T07:40:12.000Z</published>
    <updated>2020-07-24T04:13:35.057Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>JS</code>程序的入口，将当前<code>APP</code>对象注册到<code>AppRegistry</code>组件中，<code>AppRegistry</code>组件是<code>js module</code></p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; AppRegistry &#125; <span class="keyword">from</span> <span class="string">'react-native'</span></span><br><span class="line"> ...省略代码</span><br><span class="line"></span><br><span class="line"> AppRegistry.registerComponent(<span class="string">'demo'</span>, () =&gt; Index)</span><br></pre></td></tr></table></figure><h2 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h2><ul><li>我们新建一个RN的项目，在原生代码中会生成<code>MainActivity</code>和<code>MainApplication</code>两个<code>Java</code>类。顾名思义，<code>MainAcitivity</code>就是我们的<code>Native</code>的入口了，</li><li>我们先来看下<code>MainApplication</code>都做了哪些操作</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> <span class="title">implements</span> <span class="title">ReactApplication</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ReactNativeHost：持有ReactInstanceManager实例，做一些初始化操作。</span></span><br><span class="line">  private final ReactNativeHost mReactNativeHost = <span class="keyword">new</span> ReactNativeHost(<span class="keyword">this</span>) &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean getUseDeveloperSupport() &#123;</span><br><span class="line">      <span class="keyword">return</span> BuildConfig.DEBUG;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected List&lt;ReactPackage&gt; getPackages() &#123;</span><br><span class="line">      <span class="keyword">return</span> Arrays.&lt;ReactPackage&gt;asList(</span><br><span class="line">          <span class="keyword">new</span> MainReactPackage()</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public ReactNativeHost getReactNativeHost() &#123;</span><br><span class="line">    <span class="keyword">return</span> mReactNativeHost;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public <span class="keyword">void</span> onCreate() &#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate();</span><br><span class="line">    <span class="comment">//SoLoader：加载C++底层库，准备解析JS。</span></span><br><span class="line">    SoLoader.init(<span class="keyword">this</span>, <span class="comment">/* native exopackage */</span> <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再来看下<code>MainActivity</code>的代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">ReactActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected <span class="built_in">String</span> getMainComponentName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"demo"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到其实是继承了<code>ReactActivity</code>类，只是重写了<code>getMainComponentName</code>方法，有没有看出来，其方法的返回值和我们在<code>JS</code>端的值是一样的。如果不一致会怎么样，你可以自己试一下。</p></blockquote><h2 id="ReactActivity"><a href="#ReactActivity" class="headerlink" title="ReactActivity"></a>ReactActivity</h2><blockquote><p>我们来看下<code>ReactActivity</code>的方法的<code>onCreate</code>方法</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">public abstract <span class="class"><span class="keyword">class</span> <span class="title">ReactActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span></span><br><span class="line"><span class="class">    <span class="title">implements</span> <span class="title">DefaultHardwareBackBtnHandler</span>, <span class="title">PermissionAwareActivity</span> </span>&#123;</span><br><span class="line">    private final ReactActivityDelegate mDelegate;</span><br><span class="line"></span><br><span class="line">    ...省略代码</span><br><span class="line"></span><br><span class="line">     @Override</span><br><span class="line">  protected <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    mDelegate.onCreate(savedInstanceState);</span><br><span class="line">  &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>ReactActivity</code>全权委托给<code>ReactActivityDelegate</code>来处理</p></blockquote><p><strong>ReactActivityDelegate</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ReactActivityDelegate</span> </span>&#123;</span><br><span class="line">      protected <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">      <span class="comment">// 弹框权限判断</span></span><br><span class="line">    boolean needsOverlayPermission = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (getReactNativeHost().getUseDeveloperSupport() &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</span><br><span class="line">      <span class="comment">// Get permission to show redbox in dev builds.</span></span><br><span class="line">      <span class="keyword">if</span> (!Settings.canDrawOverlays(getContext())) &#123;</span><br><span class="line">        needsOverlayPermission = <span class="literal">true</span>;</span><br><span class="line">        Intent serviceIntent = <span class="keyword">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse(<span class="string">"package:"</span> + getContext().getPackageName()));</span><br><span class="line">        FLog.w(ReactConstants.TAG, REDBOX_PERMISSION_MESSAGE);</span><br><span class="line">        Toast.makeText(getContext(), REDBOX_PERMISSION_MESSAGE, Toast.LENGTH_LONG).show();</span><br><span class="line">        ((Activity) getContext()).startActivityForResult(serviceIntent, REQUEST_OVERLAY_PERMISSION_CODE);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">// 加载组建逻辑 mMainComponentName为getMainComponentName返回的值</span></span><br><span class="line">    <span class="keyword">if</span> (mMainComponentName != <span class="literal">null</span> &amp;&amp; !needsOverlayPermission) &#123;</span><br><span class="line">      loadApp(mMainComponentName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 双击判断工具类</span></span><br><span class="line">    mDoubleTapReloadRecognizer = <span class="keyword">new</span> DoubleTapReloadRecognizer();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  protected <span class="keyword">void</span> loadApp(<span class="built_in">String</span> appKey) &#123;</span><br><span class="line">     <span class="comment">//空判断</span></span><br><span class="line">    <span class="keyword">if</span> (mReactRootView != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot loadApp while app is already running."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建 RN容器根视图</span></span><br><span class="line">    mReactRootView = createRootView();</span><br><span class="line">    mReactRootView.startReactApplication(</span><br><span class="line">      getReactNativeHost().getReactInstanceManager(),</span><br><span class="line">      appKey,</span><br><span class="line">      getLaunchOptions());</span><br><span class="line">      <span class="comment">//将rootview添加入activity</span></span><br><span class="line">    getPlainActivity().setContentView(mReactRootView);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>loadApp</code>做了三件事:创建<code>RootView</code>、创建<code>ReactApplication</code>、创建<code>ReactInstanceManager</code></p></blockquote><h2 id="ReactRootView"><a href="#ReactRootView" class="headerlink" title="ReactRootView"></a>ReactRootView</h2><blockquote><p>ReactRootView是一个自定义的View，其父类是FrameLayout。因此，可以把RN看成是一个特殊的 “自定义View”。</p></blockquote><blockquote><p>我们来看下<code>startReactApplication</code>方法</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">void</span> startReactApplication(</span><br><span class="line">      ReactInstanceManager reactInstanceManager,</span><br><span class="line">      <span class="built_in">String</span> moduleName,</span><br><span class="line">      @Nullable Bundle initialProperties) &#123;</span><br><span class="line">        ...省略代码</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//在UI线程中进行</span></span><br><span class="line">      UiThreadUtil.assertOnUiThread();</span><br><span class="line"></span><br><span class="line">      Assertions.assertCondition(</span><br><span class="line">        mReactInstanceManager == <span class="literal">null</span>,</span><br><span class="line">        <span class="string">"This root view has already been attached to a catalyst instance manager"</span>);</span><br><span class="line">        <span class="comment">// 赋值</span></span><br><span class="line">      mReactInstanceManager = reactInstanceManager;</span><br><span class="line">      mJSModuleName = moduleName;</span><br><span class="line">      mAppProperties = initialProperties;</span><br><span class="line">        <span class="comment">// 判断ReactContext是否初始化，没有就异步进行初始化</span></span><br><span class="line">      <span class="keyword">if</span> (!mReactInstanceManager.hasStartedCreatingInitialContext()) &#123;</span><br><span class="line">        mReactInstanceManager.createReactContextInBackground();</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="comment">//宽高计算完成后添加布局监听</span></span><br><span class="line">      attachToReactInstanceManager();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      Systrace.endSection(TRACE_TAG_REACT_JAVA_BRIDGE);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>startReactApplication</code>中的三个参数</p></blockquote><table><thead><tr><th>形参</th><th>描述</th></tr></thead><tbody><tr><td><code>reactInstanceManager</code></td><td><code>ReactInstanceManager</code>类型，创建和管理<code>CatalyInstance</code>的实例</td></tr><tr><td><code>moduleName</code></td><td>就是之前的组件名</td></tr><tr><td><code>initialProperties</code></td><td>是<code>Native</code>向JS传递的数据，以后可能由POJO代替，默认是<code>null</code>，需要的话要重写<code>createReactActivityDelegate</code> ，并重写其中<code>getLaunchOptions</code>方法</td></tr></tbody></table><blockquote><p><code>startReactApplication</code> 中调用了<code>ReactInstanceManager</code>的<code>createReactContextInBackground</code>方法。</p></blockquote><h2 id="ReactInstanceManager"><a href="#ReactInstanceManager" class="headerlink" title="ReactInstanceManager"></a>ReactInstanceManager</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">void</span> createReactContextInBackground() &#123;</span><br><span class="line">    <span class="comment">//首次执行</span></span><br><span class="line">     mHasStartedCreatingInitialContext = <span class="literal">true</span>;</span><br><span class="line">    recreateReactContextInBackgroundInner();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>该方法只会在<code>application</code>中执行一次，JS重载时，会走<code>recreateReactContextInBackground</code>, 这两个方法最终都会调用<code>recreateReactContextInBackgroundInner</code>方法</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@ThreadConfined(UI)</span><br><span class="line">  private <span class="keyword">void</span> recreateReactContextInBackgroundInner() &#123;</span><br><span class="line">    <span class="comment">// 确保在UI线程中执行</span></span><br><span class="line">    UiThreadUtil.assertOnUiThread();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mUseDeveloperSupport &amp;&amp; mJSMainModuleName != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">      !Systrace.isTracing(TRACE_TAG_REACT_APPS | TRACE_TAG_REACT_JSC_CALLS)) &#123;</span><br><span class="line">        <span class="comment">// 调试模式，加载服务器bundle</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 加载本地bundle</span></span><br><span class="line">    recreateReactContextInBackgroundFromBundleLoader();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @ThreadConfined(UI)</span><br><span class="line">  private <span class="keyword">void</span> recreateReactContextInBackgroundFromBundleLoader() &#123;</span><br><span class="line">    recreateReactContextInBackground(</span><br><span class="line">        <span class="keyword">new</span> JSCJavaScriptExecutor.Factory(mJSCConfig.getConfigMap()),</span><br><span class="line">        mBundleLoader);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>形参</th><th>描述</th></tr></thead><tbody><tr><td><code>jsExecutorFactory</code></td><td>C++和JS双向通信的中转站</td></tr><tr><td><code>jsBundleLoader</code></td><td><code>bundle</code>加载器，根据<code>ReactNativeHost</code>中的配置决定从哪里加载<code>bundle</code>文件</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">private <span class="keyword">void</span> recreateReactContextInBackground(</span><br><span class="line">    JavaScriptExecutor.Factory jsExecutorFactory,</span><br><span class="line">    JSBundleLoader jsBundleLoader) &#123;</span><br><span class="line">    UiThreadUtil.assertOnUiThread();</span><br><span class="line"></span><br><span class="line">     <span class="comment">//创建ReactContextInitParams对象</span></span><br><span class="line">    final ReactContextInitParams initParams = <span class="keyword">new</span> ReactContextInitParams(</span><br><span class="line">      jsExecutorFactory,</span><br><span class="line">      jsBundleLoader);</span><br><span class="line">    <span class="keyword">if</span> (mCreateReactContextThread == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 新增线程初始化ReactContext</span></span><br><span class="line">      runCreateReactContextOnNewThread(initParams);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      mPendingReactContextInitParams = initParams;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>runCreateReactContextOnNewThread</code>中有一个核心方法<code>createReactContext</code>来创建<code>ReactContext</code></p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">private ReactApplicationContext createReactContext(</span><br><span class="line">      JavaScriptExecutor jsExecutor,</span><br><span class="line">      JSBundleLoader jsBundleLoader) &#123;</span><br><span class="line">    <span class="comment">// 包装ApplicationContext</span></span><br><span class="line">    final ReactApplicationContext reactContext = <span class="keyword">new</span> ReactApplicationContext(mApplicationContext);</span><br><span class="line">    <span class="comment">//创建JavaModule注册表Builder，用来创建JavaModule注册表，JavaModule注册表将所有的JavaModule注册到CatalystInstance中。</span></span><br><span class="line">    NativeModuleRegistryBuilder nativeModuleRegistryBuilder = <span class="keyword">new</span> NativeModuleRegistryBuilder(</span><br><span class="line">      reactContext,</span><br><span class="line">      <span class="keyword">this</span>,</span><br><span class="line">      mLazyNativeModulesEnabled);</span><br><span class="line">      <span class="comment">// 创建JavaScriptModule注册表Builder</span></span><br><span class="line">    JavaScriptModuleRegistry.Builder jsModulesBuilder = <span class="keyword">new</span> JavaScriptModuleRegistry.Builder();</span><br><span class="line">    <span class="keyword">if</span> (mUseDeveloperSupport) &#123;</span><br><span class="line">      <span class="comment">// 调试模式下，将错误交给DevSupportManager处理</span></span><br><span class="line">      reactContext.setNativeModuleCallExceptionHandler(mDevSupportManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...省略代码</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//创建CoreModulesPackage，其中封装了RN Framework核心功能，通信、调试等。</span></span><br><span class="line">      CoreModulesPackage coreModulesPackage =</span><br><span class="line">        <span class="keyword">new</span> CoreModulesPackage(</span><br><span class="line">          <span class="keyword">this</span>,</span><br><span class="line">          mBackBtnHandler,</span><br><span class="line">          mUIImplementationProvider,</span><br><span class="line">          mLazyViewManagersEnabled);</span><br><span class="line">          <span class="comment">//把各自的Module添加到对应的注册表中</span></span><br><span class="line">      processPackage(coreModulesPackage, nativeModuleRegistryBuilder, jsModulesBuilder);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      Systrace.endSection(TRACE_TAG_REACT_JAVA_BRIDGE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将我们Application中的ReactPackage循环处理，加入对应的注册表中。</span></span><br><span class="line">   <span class="keyword">for</span> (ReactPackage reactPackage : mPackages) &#123;</span><br><span class="line">        ...省略代码</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        processPackage(reactPackage, nativeModuleRegistryBuilder, jsModulesBuilder);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Systrace.endSection(TRACE_TAG_REACT_JAVA_BRIDGE);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...省略代码</span><br><span class="line">    <span class="comment">//生成Java注册表，将Java可调用的API暴露给JS</span></span><br><span class="line">    NativeModuleRegistry nativeModuleRegistry;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">       nativeModuleRegistry = nativeModuleRegistryBuilder.build();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      Systrace.endSection(TRACE_TAG_REACT_JAVA_BRIDGE);</span><br><span class="line">      ReactMarker.logMarker(BUILD_NATIVE_MODULE_REGISTRY_END);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    NativeModuleCallExceptionHandler exceptionHandler = mNativeModuleCallExceptionHandler != <span class="literal">null</span></span><br><span class="line">        ? mNativeModuleCallExceptionHandler</span><br><span class="line">        : mDevSupportManager;</span><br><span class="line">     <span class="comment">//构建CatalystInstanceImpl实例</span></span><br><span class="line">    CatalystInstanceImpl.Builder catalystInstanceBuilder = <span class="keyword">new</span> CatalystInstanceImpl.Builder()</span><br><span class="line">      .setReactQueueConfigurationSpec(mUseSeparateUIBackgroundThread ?</span><br><span class="line">        ReactQueueConfigurationSpec.createWithSeparateUIBackgroundThread() :</span><br><span class="line">        ReactQueueConfigurationSpec.createDefault())</span><br><span class="line">        <span class="comment">//JS执行通信类</span></span><br><span class="line">      .setJSExecutor(jsExecutor)</span><br><span class="line">      <span class="comment">//Java模块注册表</span></span><br><span class="line">      .setRegistry(nativeModuleRegistry)</span><br><span class="line">      <span class="comment">// JS注册表</span></span><br><span class="line">      .setJSModuleRegistry(jsModulesBuilder.build())</span><br><span class="line">      <span class="comment">// Bundle加载工具类</span></span><br><span class="line">      .setJSBundleLoader(jsBundleLoader)</span><br><span class="line">      <span class="comment">// 异常处理器</span></span><br><span class="line">      .setNativeModuleCallExceptionHandler(exceptionHandler);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略代码</span></span><br><span class="line"></span><br><span class="line">   final CatalystInstance catalystInstance;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      catalystInstance = catalystInstanceBuilder.build();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//省略代码</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mBridgeIdleDebugListener != <span class="literal">null</span>) &#123;</span><br><span class="line">      catalystInstance.addBridgeIdleDebugListener(mBridgeIdleDebugListener);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Systrace.isTracing(TRACE_TAG_REACT_APPS | TRACE_TAG_REACT_JSC_CALLS)) &#123;</span><br><span class="line"> <span class="comment">//调用CatalystInstanceImpl的Native方法把Java Registry转换为Json，再由C++层传送到JS层。     catalystInstance.setGlobalVariable("__RCTProfileIsProfiling", "true");</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关联ReacContext与CatalystInstance</span></span><br><span class="line">    reactContext.initializeWithInstance(catalystInstance);</span><br><span class="line">    <span class="comment">//通过CatalystInstance开始加载JS Bundle</span></span><br><span class="line">    catalystInstance.runJSBundle();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> reactContext;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这段代码比较长，它主要做了这几件事：</p></blockquote><ul><li>创建<code>JavaModule</code>注册表和<code>JavaScriptModule</code>注册表，交给<code>CatalystInstance</code>管理。</li><li>处理<code>ReactPackage</code>，将各自的<code>Module</code>放入对应的注册表中。</li><li>通过上面的各个参数创建<code>CatalystInstance</code>实例。<br><code>CatalystInstance</code>关联<code>ReactContext</code>，开始加载<code>JS Bundle</code></li></ul><h2 id="CatalystInstance"><a href="#CatalystInstance" class="headerlink" title="CatalystInstance"></a>CatalystInstance</h2><blockquote><p>我们来看下<code>CatalystInstance</code>的实现类<code>CatalystInstanceImpl</code>的构造方法</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">private CatalystInstanceImpl(</span><br><span class="line">      final ReactQueueConfigurationSpec reactQueueConfigurationSpec,</span><br><span class="line">      final JavaScriptExecutor jsExecutor,</span><br><span class="line">      final NativeModuleRegistry registry,</span><br><span class="line">      final JavaScriptModuleRegistry jsModuleRegistry,</span><br><span class="line">      final JSBundleLoader jsBundleLoader,</span><br><span class="line">      NativeModuleCallExceptionHandler nativeModuleCallExceptionHandler) &#123;</span><br><span class="line">    <span class="comment">//用来创建JNI相关方法，并返回mHybridData</span></span><br><span class="line">    mHybridData = initHybrid();</span><br><span class="line">    <span class="comment">// Android UI线程、JS线程、NativeMOdulesQueue线程</span></span><br><span class="line">    mReactQueueConfiguration = ReactQueueConfigurationImpl.create(</span><br><span class="line">        reactQueueConfigurationSpec,</span><br><span class="line">        <span class="keyword">new</span> NativeExceptionHandler());</span><br><span class="line">    <span class="comment">// 省略代码</span></span><br><span class="line">    <span class="comment">//调用 C++ 层代码进行初始化Bridge</span></span><br><span class="line">    initializeBridge(</span><br><span class="line">      <span class="keyword">new</span> BridgeCallback(<span class="keyword">this</span>),</span><br><span class="line">      jsExecutor,</span><br><span class="line">      mReactQueueConfiguration.getJSQueueThread(),</span><br><span class="line">      mNativeModulesQueueThread,</span><br><span class="line">      mUIBackgroundQueueThread,</span><br><span class="line">      mJavaRegistry.getJavaModules(<span class="keyword">this</span>),</span><br><span class="line">      mJavaRegistry.getCxxModules());</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">private native <span class="keyword">void</span> initializeBridge(</span><br><span class="line">      ReactCallback callback,</span><br><span class="line">      JavaScriptExecutor jsExecutor,</span><br><span class="line">      MessageQueueThread jsQueue,</span><br><span class="line">      MessageQueueThread moduleQueue,</span><br><span class="line">      MessageQueueThread uiBackgroundQueue,</span><br><span class="line">      Collection&lt;JavaModuleWrapper&gt; javaModules,</span><br><span class="line">      Collection&lt;ModuleHolder&gt; cxxModules);</span><br></pre></td></tr></table></figure><table><thead><tr><th>形参</th><th>描述</th></tr></thead><tbody><tr><td><code>ReactCallback</code></td><td>CatalystInstanceImpl的静态内部类<code>ReactCallback</code>，负责接口回调</td></tr><tr><td><code>JavaScriptExecutor</code></td><td>JS执行器，将JS的调用传给C++层</td></tr><tr><td><code>MessageQueueThread</code></td><td><code>JS</code>线程</td></tr><tr><td><code>MessageQueueThread moduleQueue</code></td><td><code>Java</code>线程</td></tr><tr><td><code>MessageQueueThread uiBackgroundQueue</code></td><td><code>UI</code>背景线程</td></tr><tr><td><code>javaModules</code></td><td><code>java module</code></td></tr><tr><td><code>cxxModules</code></td><td><code>c++ module</code></td></tr></tbody></table><blockquote><p><code>createReactContext</code>方法中用<code>catalystInstance.runJSBundle()</code> 来加载 <code>JS bundle</code></p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">  public <span class="keyword">void</span> runJSBundle() &#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    mJSBundleLoader.loadScript(CatalystInstanceImpl.this);</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="JSBundleLoader"><a href="#JSBundleLoader" class="headerlink" title="JSBundleLoader"></a>JSBundleLoader</h2><blockquote><p><code>CatalystInstanceImpl.runJSBundle()</code>会调用<code>JSBundleLoader</code>去加载<code>JS Bundle</code>，由于不同的情况可能会有不同的<code>JSBundleLoader</code>，我们假设其中一种</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">public abstract <span class="class"><span class="keyword">class</span> <span class="title">JSBundleLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * This loader is recommended one for release version of your app. In that case local JS executor</span></span><br><span class="line"><span class="comment">   * should be used. JS bundle will be read from assets in native code to save on passing large</span></span><br><span class="line"><span class="comment">   * strings from java to native memory.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  public <span class="keyword">static</span> JSBundleLoader createAssetLoader(</span><br><span class="line">      final Context context,</span><br><span class="line">      final <span class="built_in">String</span> assetUrl,</span><br><span class="line">      final boolean loadSynchronously) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JSBundleLoader() &#123;</span><br><span class="line">      @Override</span><br><span class="line">      public <span class="built_in">String</span> loadScript(CatalystInstanceImpl instance) &#123;</span><br><span class="line">        instance.loadScriptFromAssets(context.getAssets(), assetUrl, loadSynchronously);</span><br><span class="line">        <span class="keyword">return</span> assetUrl;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到它会继续调用<code>CatalystInstance</code>中的<code>loadScriptFromAssets</code>方法</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CatalystInstanceImpl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* package */</span> <span class="keyword">void</span> loadScriptFromAssets(AssetManager assetManager, <span class="built_in">String</span> assetURL) &#123;</span><br><span class="line">    mSourceURL = assetURL;</span><br><span class="line">    jniLoadScriptFromAssets(assetManager, assetURL);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private native <span class="keyword">void</span> jniLoadScriptFromAssets(AssetManager assetManager, <span class="built_in">String</span> assetURL);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最终呢，还是会调用<code>CatalystInstanceImpl.cpp</code>去加载<code>JS Bundle</code>，我们去<code>C++</code>层看一下实现</p></blockquote><p>我们先看下源码的结构图</p><p><img src="http://blog.poetries.top/img-repo/2019/10/677.png" alt></p><h2 id="CatalystInstanceImpl-cpp"><a href="#CatalystInstanceImpl-cpp" class="headerlink" title="CatalystInstanceImpl.cpp"></a>CatalystInstanceImpl.cpp</h2><blockquote><p>在ReactAndroid的Jni中，我们看下相关代码：</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> CatalystInstanceImpl::jniLoadScriptFromAssets(</span><br><span class="line">    jni::alias_ref&lt;JAssetManager::javaobject&gt; assetManager,</span><br><span class="line">    <span class="keyword">const</span> std::string&amp; assetURL,</span><br><span class="line">    bool loadSynchronously) &#123;</span><br><span class="line">  <span class="keyword">const</span> int kAssetsLength = <span class="number">9</span>;  <span class="comment">// strlen("assets://");</span></span><br><span class="line">  <span class="comment">// 获取soure js Bundle的路径名</span></span><br><span class="line">  auto sourceURL = assetURL.substr(kAssetsLength);</span><br><span class="line">  <span class="comment">// 获取AssetManager</span></span><br><span class="line">  auto manager = extractAssetManager(assetManager);</span><br><span class="line">  <span class="comment">// 读取JS Bundle里的内容</span></span><br><span class="line">  auto script = loadScriptFromAssets(manager, sourceURL);</span><br><span class="line">  <span class="comment">// unbundle命令打包判断</span></span><br><span class="line">  <span class="keyword">if</span> (JniJSModulesUnbundle::isUnbundle(manager, sourceURL)) &#123;</span><br><span class="line">    instance_-&gt;loadUnbundle(</span><br><span class="line">      folly::make_unique&lt;JniJSModulesUnbundle&gt;(manager, sourceURL),</span><br><span class="line">      std::move(script),</span><br><span class="line">      sourceURL,</span><br><span class="line">      loadSynchronously);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//bundle命令打包走次流程，instance_是Instan.h中类的实例</span></span><br><span class="line">    instance_-&gt;loadScriptFromString(std::move(script), sourceURL, loadSynchronously);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Instance-cpp"><a href="#Instance-cpp" class="headerlink" title="Instance.cpp"></a>Instance.cpp</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> Instance::loadScriptFromString(std::unique_ptr&lt;<span class="keyword">const</span> JSBigString&gt; string,</span><br><span class="line">                                    std::string sourceURL,</span><br><span class="line">                                    bool loadSynchronously) &#123;</span><br><span class="line">  SystraceSection s(<span class="string">"reactbridge_xplat_loadScriptFromString"</span>, <span class="string">"sourceURL"</span>, sourceURL);</span><br><span class="line">  <span class="keyword">if</span> (loadSynchronously) &#123;</span><br><span class="line">    loadApplicationSync(nullptr, <span class="attr">std</span>::move(string), <span class="attr">std</span>::move(sourceURL));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    loadApplication(nullptr, <span class="attr">std</span>::move(string), <span class="attr">std</span>::move(sourceURL));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Instance::loadApplicationSync(</span><br><span class="line">    std::unique_ptr&lt;JSModulesUnbundle&gt; unbundle,</span><br><span class="line">    std::unique_ptr&lt;<span class="keyword">const</span> JSBigString&gt; string,</span><br><span class="line">    std::string sourceURL) &#123;</span><br><span class="line">  std::unique_lock&lt;std::mutex&gt; lock(m_syncMutex);</span><br><span class="line">  m_syncCV.wait(lock, [<span class="keyword">this</span>] &#123; <span class="keyword">return</span> m_syncReady; &#125;);</span><br><span class="line"></span><br><span class="line">  SystraceSection s(<span class="string">"reactbridge_xplat_loadApplicationSync"</span>, <span class="string">"sourceURL"</span>, sourceURL);</span><br><span class="line">  <span class="comment">//nativeToJsBridge_也是在Instance::initializeBridget()方法里初始化的，具体实现在NativeToJsBridge.cpp里。</span></span><br><span class="line">  nativeToJsBridge_-&gt;loadApplicationSync(std::move(unbundle), <span class="attr">std</span>::move(string), <span class="attr">std</span>::move(sourceURL));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>NativeToJsBridge.cpp</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> NativeToJsBridge::loadApplication(</span><br><span class="line">    std::unique_ptr&lt;JSModulesUnbundle&gt; unbundle,</span><br><span class="line">    std::unique_ptr&lt;<span class="keyword">const</span> JSBigString&gt; startupScript,</span><br><span class="line">    std::string startupScriptSourceURL) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取一个MessageQueueThread，探后在线程中执行一个Task。</span></span><br><span class="line">  runOnExecutorQueue(</span><br><span class="line">      m_mainExecutorToken,</span><br><span class="line">      [unbundleWrap=folly::makeMoveWrapper(std::move(unbundle)),</span><br><span class="line">       startupScript=folly::makeMoveWrapper(std::move(startupScript)),</span><br><span class="line">       startupScriptSourceURL=std::move(startupScriptSourceURL)]</span><br><span class="line">        (JSExecutor* executor) mutable &#123;</span><br><span class="line"></span><br><span class="line">    auto unbundle = unbundleWrap.move();</span><br><span class="line">    <span class="keyword">if</span> (unbundle) &#123;</span><br><span class="line">      executor-&gt;setJSModulesUnbundle(std::move(unbundle));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//executor从runOnExecutorQueue()返回的map中取得，与OnLoad中的JSCJavaScriptExecutorHolder对应，也与</span></span><br><span class="line">    <span class="comment">//Java中的JSCJavaScriptExecutor对应。它的实例在JSExecutor.cpp中实现。</span></span><br><span class="line">    executor-&gt;loadApplicationScript(std::move(*startupScript),</span><br><span class="line">                                    std::move(startupScriptSourceURL));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>unbundle命令，使用方式和bundle命令完全相同。unbundle命令是在bundle命令的基础上增加了一项功能，除了生成整合JS文件index.android.bundle外，还会<br>生成各个单独的未整合JS文件（但会被优化），全部放在js-modules目录下，同时会生成一个名为UNBUNDLE的标识文件，一并放在其中。UNBUNDLE标识文件的前4个字节<br>固定为0xFB0BD1E5，用于加载前的校验。</p></blockquote><ul><li>该函数进一步调用<code>JSExecutor.cpp</code>的<code>loadApplicationScript()</code>方法。</li><li>到了这个方法，就是去真正加载JS文件了。</li></ul><p><strong>JSCExecutor.cpp</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> JSCExecutor::loadApplicationScript(std::unique_ptr&lt;<span class="keyword">const</span> JSBigString&gt; script, <span class="attr">std</span>::string sourceURL) &#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//使用Webkit JSC去解释执行JS</span></span><br><span class="line">    evaluateSourceCode(m_context, bcSourceCode, jsSourceURL);</span><br><span class="line">    flush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> JSCExecutor::flush() &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//绑定bridge，核心就是通过getGlobalObject()将JS与C++通过Webkit jSC实现绑定</span></span><br><span class="line">      bindBridge();</span><br><span class="line">      <span class="comment">//返回给callNativeModules</span></span><br><span class="line">    callNativeModules(m_flushedQueueJS-&gt;callAsFunction(&#123;&#125;));</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> JSCExecutor::callNativeModules(Value&amp;&amp; value) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//把JS层相关通信数据转换为JSON格式</span></span><br><span class="line">    auto calls = value.toJSONString();</span><br><span class="line">    <span class="comment">//m_delegate为JsToNativeBridge对象。</span></span><br><span class="line">    m_delegate-&gt;callNativeModules(*<span class="keyword">this</span>, <span class="attr">folly</span>::parseJson(calls), <span class="literal">true</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>m_flushedQueueJS</code>支线的是<code>MessageQueue.js</code>的<code>flushedQueue()</code>方法，此时JS已经被加载到队列中，等待Java层来驱动它。</li><li><code>JS Bundle</code>加载并解析完成后，我们回到Java代码中看看后续的流程</li><li>我们在之前的<code>runCreateReactContextOnNewThread</code>方法中，在<code>creatReactContext</code>之后还有一句核心的代码</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setupReactContext(reactApplicationContext);</span><br></pre></td></tr></table></figure><blockquote><p>这就是加载<code>JS Bundle</code>之后执行的代码</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ReactInstanceManager</span> </span>&#123;</span><br><span class="line">    private <span class="keyword">void</span> setupReactContext(ReactApplicationContext reactContext) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// Native Java module初始化</span></span><br><span class="line">    catalystInstance.initialize();</span><br><span class="line">    <span class="comment">//重置ReactContext </span></span><br><span class="line">    mDevSupportManager.onNewReactContextCreated(reactContext);</span><br><span class="line">   <span class="comment">//内存状态回调设置 mMemoryPressureRouter.addMemoryPressureListener(catalystInstance);</span></span><br><span class="line">    <span class="comment">// 复位生命周期</span></span><br><span class="line">    moveReactContextToCurrentLifecycleState();</span><br><span class="line"></span><br><span class="line">    ReactMarker.logMarker(ATTACH_MEASURED_ROOT_VIEWS_START);</span><br><span class="line">    synchronized (mAttachedRootViews) &#123;</span><br><span class="line">    <span class="comment">//mAttachedRootViews保存的是ReactRootView</span></span><br><span class="line">      <span class="keyword">for</span> (ReactRootView rootView : mAttachedRootViews) &#123;</span><br><span class="line">        attachRootViewToInstance(rootView, catalystInstance);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private <span class="keyword">void</span> attachMeasuredRootViewToInstance (     final ReactRootView rootView,</span><br><span class="line">      CatalystInstance catalystInstance) &#123;</span><br><span class="line">      ...</span><br><span class="line">            <span class="comment">//将ReactRootView作为根布局</span></span><br><span class="line">    UIManagerModule uiManagerModule = catalystInstance.getNativeModule(UIManagerModule.class);</span><br><span class="line">    int rootTag = uiManagerModule.addMeasuredRootView(rootView);</span><br><span class="line">    <span class="comment">//设置相关</span></span><br><span class="line">    rootView.setRootViewTag(rootTag);</span><br><span class="line">    rootView.runApplication();</span><br><span class="line">    ...</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* package */</span> <span class="keyword">void</span> runApplication() &#123;</span><br><span class="line">       ...</span><br><span class="line">     CatalystInstance catalystInstance = reactContext.getCatalystInstance();</span><br><span class="line"></span><br><span class="line">     WritableNativeMap appParams = <span class="keyword">new</span> WritableNativeMap();</span><br><span class="line">     appParams.putDouble(<span class="string">"rootTag"</span>, getRootViewTag());</span><br><span class="line">     @Nullable Bundle appProperties = getAppProperties();</span><br><span class="line">     <span class="keyword">if</span> (appProperties != <span class="literal">null</span>) &#123;</span><br><span class="line">       appParams.putMap(<span class="string">"initialProps"</span>, Arguments.fromBundle(appProperties));</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="built_in">String</span> jsAppModuleName = getJSModuleName();</span><br><span class="line">     <span class="comment">//启动流程入口：由Java层调用启动</span></span><br><span class="line">     catalystInstance.getJSModule(AppRegistry.class).runApplication(jsAppModuleName, appParams);</span><br><span class="line">     ...</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，最终调用的是<code>catalystInstance.getJSModule(AppRegistry.class).runApplication(jsAppModuleName, appParams)</code>， <code>AppRegistry.class</code>是JS层暴露给Java层的接口方法。它的真正实现在<code>AppRegistry.js</code>里，<code>AppRegistry.js</code>是运行所有<code>RN</code>应用的<code>JS</code>层入口，我们来看看它的实现：</p></blockquote><ul><li><strong>在<code>Libraries/ReactNative</code>中的<code>AppRegistry.js</code></strong></li></ul><h2 id="AppRegistry-js"><a href="#AppRegistry-js" class="headerlink" title="AppRegistry.js"></a>AppRegistry.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">runApplication(appKey: string, <span class="attr">appParameters</span>: any): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> msg =</span><br><span class="line">      <span class="string">'Running application "'</span> + appKey + <span class="string">'" with appParams: '</span> +</span><br><span class="line">      <span class="built_in">JSON</span>.stringify(appParameters) + <span class="string">'. '</span> +</span><br><span class="line">      <span class="string">'__DEV__ === '</span> + <span class="built_in">String</span>(__DEV__) +</span><br><span class="line">      <span class="string">', development-level warning are '</span> + (__DEV__ ? <span class="string">'ON'</span> : <span class="string">'OFF'</span>) +</span><br><span class="line">      <span class="string">', performance optimizations are '</span> + (__DEV__ ? <span class="string">'OFF'</span> : <span class="string">'ON'</span>);</span><br><span class="line">    infoLog(msg);</span><br><span class="line">    BugReporting.addSource(<span class="string">'AppRegistry.runApplication'</span> + runCount++, () =&gt; msg);</span><br><span class="line">    invariant(</span><br><span class="line">      runnables[appKey] &amp;&amp; runnables[appKey].run,</span><br><span class="line">      <span class="string">'Application '</span> + appKey + <span class="string">' has not been registered.\n\n'</span> +</span><br><span class="line">      <span class="string">'Hint: This error often happens when you\'re running the packager '</span> +</span><br><span class="line">      <span class="string">'(local dev server) from a wrong folder. For example you have '</span> +</span><br><span class="line">      <span class="string">'multiple apps and the packager is still running for the app you '</span> +</span><br><span class="line">      <span class="string">'were working on before.\nIf this is the case, simply kill the old '</span> +</span><br><span class="line">      <span class="string">'packager instance (e.g. close the packager terminal window) '</span> +</span><br><span class="line">      <span class="string">'and start the packager in the correct app folder (e.g. cd into app '</span> +</span><br><span class="line">      <span class="string">'folder and run \'npm start\').\n\n'</span> +</span><br><span class="line">      <span class="string">'This error can also happen due to a require() error during '</span> +</span><br><span class="line">      <span class="string">'initialization or failure to call AppRegistry.registerComponent.\n\n'</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    SceneTracker.setActiveScene(&#123;<span class="attr">name</span>: appKey&#125;);</span><br><span class="line">    runnables[appKey].run(appParameters);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>到这里就会去调用JS进行渲染，在通过<code>UIManagerModule</code>将JS组件转换成Android组件，最终显示在<code>ReactRootView</code>上。</li><li>最后总结一下，就是先在应用终端启动并创建上下文对象，启动<code>JS Runtime</code>，进行布局，将JS端的代码通过C++层，<code>UIManagerMoodule</code>转化成<code>Android</code>组件，再进行渲染，最后将渲染的View添加到<code>ReactRootView</code>上，最终呈现在用户面前。</li></ul><h2 id="系统框架图"><a href="#系统框架图" class="headerlink" title="系统框架图"></a>系统框架图</h2><p><img src="http://blog.poetries.top/img-repo/2019/10/678.png" alt></p><h2 id="启动流程图"><a href="#启动流程图" class="headerlink" title="启动流程图"></a>启动流程图</h2><p><img src="http://blog.poetries.top/img-repo/2019/10/679.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;JS&lt;/code&gt;程序的入口，将当前&lt;code&gt;APP&lt;/code&gt;对象注册到&lt;code&gt;AppRegistry&lt;/code&gt;组件中，&lt;code&gt;AppRegistry&lt;/code&gt;组件是&lt;code&gt;js module&lt;/code&gt;&lt;/
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
      <category term="RN" scheme="http://blog.poetries.top/tags/RN/"/>
    
  </entry>
  
  <entry>
    <title>React Native之图片/宽高/字体平台适配</title>
    <link href="http://blog.poetries.top/2019/10/02/rn-adapter/"/>
    <id>http://blog.poetries.top/2019/10/02/rn-adapter/</id>
    <published>2019-10-02T04:50:12.000Z</published>
    <updated>2020-07-24T04:13:35.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Platform-OS"><a href="#一、Platform-OS" class="headerlink" title="一、Platform.OS"></a>一、Platform.OS</h2><blockquote><p>为了提高代码的兼容性，我们有时需要判断当前系统的平台，然后做一些适配。比如，我们在使用<code>StatusBar</code>做导航栏的时候，在<code>iOS</code>平台下根视图的位置默认情况下是占据状态栏的位置的，我们通常希望状态栏下面能显示一个导航栏，所以我们需要为<code>StatusBar</code>的外部容器设置一个高度</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;&#123;height:</span> <span class="attr">Platform.OS</span> === <span class="string">'ios'</span> ? <span class="attr">20:0</span>&#125;&#125;&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">StatusBar</span> &#123;<span class="attr">...this.props.statusBar</span>&#125; /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">View</span>&gt;</span>;</span><br></pre></td></tr></table></figure><h2 id="二、留意api-doc的android或ios标识"><a href="#二、留意api-doc的android或ios标识" class="headerlink" title="二、留意api doc的android或ios标识"></a>二、留意api doc的android或ios标识</h2><blockquote><p>并不是所有<code>React Native</code>的一些<code>api</code>或组件的一些属性和方法都兼容<code>Android</code>和<code>iOS</code>，在<code>React Native</code>的<code>api doc</code>中通常会在一些属性或方法的前面加上<code>android</code>或<code>ios</code>的字样来标识该属性或方法所支持的平台，如</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android renderToHardwareTextureAndroid bool</span><br><span class="line">ios shouldRasterizeIOS bool</span><br></pre></td></tr></table></figure><blockquote><p>在上述代码中，<code>renderToHardwareTextureAndroid bool</code>只支持<code>Android</code>平台，<code>ios shouldRasterizeIOS bool</code>只支持<code>iOS</code>平台，所有我们在使用这些带有标记的属性或方法的时候就需要考虑对于它们不兼容的平台我们是否需要做相应的适配了</p></blockquote><h2 id="三、组件选择"><a href="#三、组件选择" class="headerlink" title="三、组件选择"></a>三、组件选择</h2><blockquote><p>比如，我们要开发一款应用需要用到导航组件，<code>在React Native</code>组件中有<code>NavigatorIOS</code>与<code>Navigator</code>两个导航组件来供我们选择，从<code>api doc</code>中我们可以看出<code>NavigatorIOS</code>只支持<code>iOS</code>平台，<code>Navigator</code>则两个平台都支持。<br>所以如果我们要开发的应用需要适配<code>Android</code>和<code>iOS</code>，那么<code>Navigator</code>才是最佳的选择。</p></blockquote><p>为了提高代码的复用性与兼容性建议大家在选择<code>React Native</code>组件的时候要多留意该组件是不是兼容<code>Android</code>和<code>iOS</code>，尽量选择<code>Android</code>和<code>iOS</code>平台都兼容的组件。</p><h2 id="四、图片适配"><a href="#四、图片适配" class="headerlink" title="四、图片适配"></a>四、图片适配</h2><blockquote><p>开发一款应用少不了的需要用到图标。无论是<code>Android</code>还是<code>iOS</code>，现在不同分辨率的设备越来越多，我们希望这些图标能够适配不同分辨率的设备。为此我们需要为每个图标提供<code>1x</code>、<code>2x</code>、<code>3x</code>三种大小的尺寸<code>，React Native</code>会根据屏幕的分辨率来动态的选择显示不同尺寸的图片。比如：在<code>img</code>目录下有如下三种尺寸的<code>check.png</code></p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">└── img</span><br><span class="line">    ├── check.png</span><br><span class="line">    ├── check@2x.png</span><br><span class="line">    └── check@3x.png</span><br></pre></td></tr></table></figure><p>那么我们就可以通过下面的方式来使用<code>check.png</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Image</span> <span class="attr">source</span>=<span class="string">&#123;require(</span>'<span class="attr">.</span>/<span class="attr">img</span>/<span class="attr">check.png</span>')&#125; /&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>提示：我们在使用具有不同分辨率的图标时，一定要引用标准分辨率的图片如<code>require(&#39;./img/check.png&#39;)</code>，如果我们这样写<code>require(&#39;./img/check@2x.png&#39;)</code>，那么应用在不同分辨率的设备上都只会显示<a href="mailto:`check@2x.png" target="_blank" rel="noopener">`check@2x.png</a>`图片，也就无法达到图片自适配的效果。</p></blockquote><h2 id="五、字体-宽高适配"><a href="#五、字体-宽高适配" class="headerlink" title="五、字体/宽高适配"></a>五、字体/宽高适配</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// utils/FontSize.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; PixelRatio, Dimensions &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; width, height &#125; = Dimensions.get(<span class="string">'window'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> FontSize = <span class="function">(<span class="params">size</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (PixelRatio === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// iphone 5s and older Androids</span></span><br><span class="line">    <span class="keyword">if</span> (width &lt; <span class="number">360</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> size * <span class="number">0.95</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// iphone 5</span></span><br><span class="line">    <span class="keyword">if</span> (height &lt; <span class="number">667</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> size;</span><br><span class="line">      <span class="comment">// iphone 6-6s</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (height &gt;= <span class="number">667</span> &amp;&amp; height &lt;= <span class="number">735</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> size * <span class="number">1.15</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// older phablets</span></span><br><span class="line">    <span class="keyword">return</span> size * <span class="number">1.25</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (PixelRatio === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">// catch Android font scaling on small machines</span></span><br><span class="line">    <span class="comment">// where pixel ratio / font scale ratio =&gt; 3:3</span></span><br><span class="line">    <span class="keyword">if</span> (width &lt;= <span class="number">360</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Catch other weird android width sizings</span></span><br><span class="line">    <span class="keyword">if</span> (height &lt; <span class="number">667</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> size * <span class="number">1.15</span>;</span><br><span class="line">      <span class="comment">// catch in-between size Androids and scale font up</span></span><br><span class="line">      <span class="comment">// a tad but not too much</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (height &gt;= <span class="number">667</span> &amp;&amp; height &lt;= <span class="number">735</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> size * <span class="number">1.2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// catch larger devices</span></span><br><span class="line">    <span class="comment">// ie iphone 6s plus / 7 plus / mi note 等等</span></span><br><span class="line">    <span class="keyword">return</span> size * <span class="number">1.27</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (PixelRatio === <span class="number">3.5</span>) &#123;</span><br><span class="line">    <span class="comment">// catch Android font scaling on small machines</span></span><br><span class="line">    <span class="comment">// where pixel ratio / font scale ratio =&gt; 3:3</span></span><br><span class="line">    <span class="keyword">if</span> (width &lt;= <span class="number">360</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> size;</span><br><span class="line">      <span class="comment">// Catch other smaller android height sizings</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (height &lt; <span class="number">667</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> size * <span class="number">1.2</span>;</span><br><span class="line">      <span class="comment">// catch in-between size Androids and scale font up</span></span><br><span class="line">      <span class="comment">// a tad but not too much</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (height &gt;= <span class="number">667</span> &amp;&amp; height &lt;= <span class="number">735</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> size * <span class="number">1.25</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// catch larger phablet devices</span></span><br><span class="line">    <span class="keyword">return</span> size * <span class="number">1.4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// if older device ie pixelRatio !== 2 || 3 || 3.5</span></span><br><span class="line">  <span class="keyword">return</span> size;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 统一常用工具入口 utils/tool.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; Dimensions, Platform, PixelRatio &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;FontSize&#125; <span class="keyword">from</span> <span class="string">'./FontSize'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; width, height &#125; = Dimensions.get(<span class="string">'window'</span>);</span><br><span class="line"><span class="keyword">let</span> pixelRatio = PixelRatio.get();</span><br><span class="line"><span class="keyword">let</span> screenPxW = PixelRatio.getPixelSizeForLayoutSize(width);</span><br><span class="line"><span class="keyword">let</span> basePx = Platform.OS === <span class="string">'ios'</span> ? <span class="number">750</span> : <span class="number">720</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 像素转dp</span></span><br><span class="line"><span class="keyword">let</span> Px2Dp = <span class="function"><span class="keyword">function</span> <span class="title">px2dp</span>(<span class="params">px</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> scaleWidth = px * screenPxW*<span class="number">2</span> / basePx;</span><br><span class="line">  size = <span class="built_in">Math</span>.round((scaleWidth/pixelRatio + <span class="number">0.5</span>));</span><br><span class="line">  <span class="keyword">return</span> size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  SCREEN_WIDTH: width,</span><br><span class="line">  SCREEN_HEIGHT: height,</span><br><span class="line">  iOS: Platform.OS === <span class="string">'ios'</span>,</span><br><span class="line">  Android: Platform.OS === <span class="string">'android'</span>,</span><br><span class="line">  Px2Dp,</span><br><span class="line">  FontSize</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用方式</span></span><br><span class="line"><span class="keyword">import</span> Tool <span class="keyword">from</span> <span class="string">'../../utils/tool'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">    header_info: &#123;</span><br><span class="line">        display: <span class="string">'flex'</span>,</span><br><span class="line">        flexDirection: <span class="string">'row'</span>,</span><br><span class="line">        justifyContent: <span class="string">'space-between'</span>,</span><br><span class="line">        alignItems: <span class="string">'center'</span>,</span><br><span class="line">        height: Tool.Px2Dp(<span class="number">50</span>),</span><br><span class="line">        paddingTop: Tool.Px2Dp(<span class="number">25</span>),</span><br><span class="line">        paddingBottom: Tool.Px2Dp(<span class="number">10</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    text: &#123;</span><br><span class="line">        fontSize: Tool.FontSize(<span class="number">14</span>),</span><br><span class="line">        color: <span class="string">'#fff'</span>,</span><br><span class="line">        paddingLeft: <span class="number">5</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Platform-OS&quot;&gt;&lt;a href=&quot;#一、Platform-OS&quot; class=&quot;headerlink&quot; title=&quot;一、Platform.OS&quot;&gt;&lt;/a&gt;一、Platform.OS&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;为了提高代码的兼容性，我们
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
      <category term="RN" scheme="http://blog.poetries.top/tags/RN/"/>
    
  </entry>
  
</feed>
